// Cloudflare Worker: Telegram-–±–æ—Ç "–£—á–∏—Ç–µ–ª—å"
// –¢—Ä–µ–±—É—é—Ç—Å—è bindings –≤ Settings ‚Üí Variables/Secrets/Bindings:
// Secret: BOT_TOKEN
// Plaintext: PUBLIC_URL (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://teacher-helper.<account>.workers.dev)
// KV namespace binding: KV_BOT
//
// –í–∞–∂–Ω–æ: —É –±–æ—Ç–∞ –≤ @BotFather –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∫–ª—é—á–µ–Ω privacy mode: /setprivacy ‚Üí Disable
//
// –≠—Ç–æ—Ç —Ñ–∞–π–ª ‚Äî —Ä–∞–∑–≤–∏—Ç–∏–µ –Ω–∞—à–µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞:
// + small talk, ¬´–∫–∞–∫ —É—á–∏—Ç–µ–ª—å¬ª
// + –º–∏–Ω–∏-–∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞ —Ç–µ–º—É (KV)
// + –¥–æ–æ–±—É—á–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞: /teach, /teach_list, /teach_del, /teach_clear

const OK = (b = "ok") => new Response(b, { status: 200 });
const NO = (code = 404, b = "not found") => new Response(b, { status: code });

/* ---------------- Telegram API ---------------- */
async function tg(method, token, payload) {
  const res = await fetch(`https://api.telegram.org/bot${token}/${method}`, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify(payload),
  });
  return res.json();
}
async function sendSafe(method, token, payload) {
  try {
    const r = await tg(method, token, payload);
    console.log("SEND", method, JSON.stringify(payload), "=>", JSON.stringify(r));
    return r;
  } catch (e) {
    console.log("SEND ERROR", method, e?.toString?.() || e);
    return null;
  }
}
// –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ç–æ—Ç –∂–µ —á–∞—Ç/—Ç—É –∂–µ —Ç–µ–º—É
async function sendToSameThread(method, token, msg, payload = {}) {
  const p = { ...payload, chat_id: msg.chat.id };
  if ((msg.chat?.type === "supergroup" || msg.chat?.type === "group") && msg.is_topic_message && msg.message_thread_id) {
    p.message_thread_id = msg.message_thread_id;
  }
  return sendSafe(method, token, p);
}

/* ---------------- KV: —Å–æ—Å—Ç–æ—è–Ω–∏–µ ---------------- */
async function loadState(env) {
  const raw = await env.KV_BOT.get("state");
  if (!raw) {
    return {
      teacher_id: null,
      teacher_display_name: "–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–Ω–∞",
      autoreply_enabled: true,
      policy_absence: "–í—ã–∑–¥–æ—Ä–∞–≤–ª–∏–≤–∞–π—Ç–µ üôå –ü—Ä–∏–¥–∏—Ç–µ –≤ —à–∫–æ–ª—É —Å–æ —Å–ø—Ä–∞–≤–∫–æ–π –æ—Ç –≤—Ä–∞—á–∞.",
      forward_unknown_to_teacher: true,
      classes: {}, // "1–ë": {...}
      faq: [], // { q, a, kw:[], cat:"" }
      teach: [], // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞: {pat, ans}
    };
  }
  return JSON.parse(raw);
}
async function saveState(env, state) { await env.KV_BOT.put("state", JSON.stringify(state)); }
function ensureClass(state, cls) {
  if (!state.classes[cls]) {
    state.classes[cls] = {
      general_chat_id: null,
      parents_chat_id: null,
      schedule_file_id: null,
      schedule_caption: null,
      last_update_iso: null,
      bus_file_id: null,
      bus_caption: null,
      pickup_times: null,
    };
  }
}

/* ---------------- –£—Ç–∏–ª–∏—Ç—ã ---------------- */
const DAYS = ["–í–°","–ü–ù","–í–¢","–°–†","–ß–¢","–ü–¢","–°–ë"];
const DAYS_FULL = ["–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ","–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–í—Ç–æ—Ä–Ω–∏–∫","–°—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä–≥","–ü—è—Ç–Ω–∏—Ü–∞","–°—É–±–±–æ—Ç–∞"];
const TZ = "Europe/Kaliningrad";

function normalize(s = "") {
  return s.toLowerCase()
    .replace(/[—ë]/g, "–µ")
    .replace(/[^a-z–∞-—è0-9\s#:+.()\-]/g, " ")
    .replace(/\s+/g, " ")
    .trim();
}
function parseClassFrom(text = "") {
  const m = text.match(/#?\s*([0-9]{1,2}\s*[–ê-–ØA-Z])/i);
  return m ? m[1].toUpperCase().replace(/\s+/g, "") : null;
}
function extractLargestPhotoId(photos = []) {
  if (!photos.length) return null;
  const bySize = [...photos].sort((a, b) => (a.file_size || 0) - (b.file_size || 0));
  return bySize.at(-1)?.file_id || photos.at(-1)?.file_id || null;
}
function scoreMatch(text, kwList) {
  const t = " " + normalize(text) + " ";
  let score = 0;
  for (const kw of kwList || []) {
    const k = " " + normalize(kw) + " ";
    if (t.includes(k)) score += Math.min(k.length, 10);
  }
  return score;
}
function bestFaqAnswer(state, question) {
  if (!state.faq?.length) return null;
  const ranked = state.faq
    .map(it => ({ it, s: scoreMatch(question, it.kw || []) }))
    .sort((a, b) => b.s - a.s);
  if (!ranked[0] || ranked[0].s < 5) return null;
  return ranked[0].it;
}
function listCategories(state) {
  const s = new Set();
  for (const f of state.faq || []) if (f.cat) s.add(f.cat);
  return [...s].sort();
}
function ruShortFromDate(d) {
  const idx = Number(new Date(d.toLocaleString("en-US", { timeZone: TZ })).getDay());
  return DAYS[idx];
}
function todayRuShort() { return ruShortFromDate(new Date()); }
function dayNameFull(short) { const i = DAYS.indexOf(short); return i >= 0 ? DAYS_FULL[i] : short; }
function dayShortFromInput(s = "") {
  const n = normalize(s);
  if (n === "—Å–µ–≥–æ–¥–Ω—è") return todayRuShort();
  if (n === "–∑–∞–≤—Ç—Ä–∞") { const d = new Date(); d.setUTCMinutes(d.getUTCMinutes() + 24*60); return ruShortFromDate(d); }
  const map = {
    "–ø–Ω":"–ü–ù","–ø–æ–Ω":"–ü–ù","–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫":"–ü–ù","mon":"–ü–ù","monday":"–ü–ù",
    "–≤—Ç":"–í–¢","–≤—Ç–æ—Ä–Ω–∏–∫":"–í–¢","tue":"–í–¢","tuesday":"–í–¢",
    "—Å—Ä":"–°–†","—Å—Ä–µ–¥–∞":"–°–†","wed":"–°–†","wednesday":"–°–†",
    "—á—Ç":"–ß–¢","—á–µ—Ç–≤–µ—Ä–≥":"–ß–¢","thu":"–ß–¢","thursday":"–ß–¢",
    "–ø—Ç":"–ü–¢","–ø—è—Ç–Ω–∏—Ü–∞":"–ü–¢","fri":"–ü–¢","friday":"–ü–¢",
    "—Å–±":"–°–ë","—Å—É–±–±–æ—Ç–∞":"–°–ë","sat":"–°–ë","saturday":"–°–ë",
    "–≤—Å":"–í–°","–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ":"–í–°","sun":"–í–°","sunday":"–í–°",
  };
  return map[n] || null;
}
function pickClassFromChat(state, chatId) {
  for (const [k, v] of Object.entries(state.classes)) {
    if (v.general_chat_id === chatId || v.parents_chat_id === chatId) return k;
  }
  return null;
}
function formatPickupWeek(mapping) {
  const order = ["–ü–ù","–í–¢","–°–†","–ß–¢","–ü–¢","–°–ë","–í–°"];
  const rows = order.map(d => `${d} ‚Äî ${mapping?.[d] || "‚Äî"}`);
  return rows.join("\n");
}

/* ---------------- –ú–∏–Ω–∏-–∫–æ–Ω—Ç–µ–∫—Å—Ç (KV) ---------------- */
// –∫–ª—é—á = ctx::<chat_id>::<thread_or_0>
function ctxKey(msg) {
  const chat = msg.chat.id;
  const th = (msg.is_topic_message && msg.message_thread_id) ? msg.message_thread_id : 0;
  return `ctx::${chat}::${th}`;
}
async function rememberContext(env, msg, role, text) {
  const key = ctxKey(msg);
  const raw = await env.KV_BOT.get(key);
  let arr = [];
  if (raw) try { arr = JSON.parse(raw) || []; } catch { arr = []; }
  arr.push({ t: Date.now(), role, text: (text||"").slice(0, 800) });
  if (arr.length > 10) arr = arr.slice(arr.length - 10);
  await env.KV_BOT.put(key, JSON.stringify(arr));
}
async function getContext(env, msg) {
  const key = ctxKey(msg);
  const raw = await env.KV_BOT.get(key);
  if (!raw) return [];
  try { return JSON.parse(raw) || []; } catch { return []; }
}

/* ---------------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã FAQ ---------------- */
function kbCategories(cats) {
  return { inline_keyboard: cats.map(c => [{ text: `üìö ${c}`, callback_data: `faq_cat::${c}` }]) };
}
function kbFaqItems(items, page = 0, perPage = 8, cat = "") {
  const start = page * perPage;
  const slice = items.slice(start, start + perPage);
  const rows = slice.map((it, i) => [
    { text: `${start + i + 1}. ${it.q.slice(0, 32)}‚Ä¶`, callback_data: `faq_show::${start + i}::${cat}` },
  ]);
  const nav = [];
  if (start > 0) nav.push({ text: "‚óÄÔ∏è", callback_data: `faq_nav::prev::${cat}::${page - 1}` });
  if (start + perPage < items.length) nav.push({ text: "‚ñ∂Ô∏è", callback_data: `faq_nav::next::${cat}::${page + 1}` });
  if (nav.length) rows.push(nav);
  return { inline_keyboard: rows };
}

/* ---------------- –ö–æ–º–∞–Ω–¥—ã: –±–∞–∑–æ–≤—ã–µ/—Å–ª—É–∂–µ–±–Ω—ã–µ ---------------- */
async function cmdStart(token, chatId) {
  const text = [
    "–ö–æ–º–∞–Ω–¥—ã:",
    "/schedule ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
    "/buses ‚Äî —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å–æ–≤",
    "/pickup [–¥–µ–Ω—å|–∫–ª–∞—Å—Å] ‚Äî –≤–æ —Å–∫–æ–ª—å–∫–æ –∑–∞–±–∏—Ä–∞—Ç—å (–ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏)",
    "/pickup_week [–∫–ª–∞—Å—Å] ‚Äî –≤—Ä–µ–º—è –∑–∞–±–æ—Ä–∞ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é",
    "/ask –í–û–ü–†–û–° ‚Äî —Å–ø—Ä–æ—Å–∏—Ç—å –±–æ—Ç–∞ (FAQ + –ø–µ—Ä–µ—Å—ã–ª–∫–∞ —É—á–∏—Ç–µ–ª—é)",
    "/faq ‚Äî —Å–ø–∏—Å–æ–∫ —á–∞—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (–∫–Ω–æ–ø–∫–∏/–∫–∞—Ç–µ–≥–æ—Ä–∏–∏)",
    "",
    "–ê–¥–º–∏–Ω (—É—á–∏—Ç–µ–ª—å/—Ä–æ–¥–∫–æ–º):",
    "/iam_teacher ‚Äî –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è —É—á–∏—Ç–µ–ª–µ–º (–õ–°)",
    "/link_general <–ö–õ–ê–°–°> ‚Äî –ø—Ä–∏–≤—è–∑–∞—Ç—å –≠–¢–û–¢ —á–∞—Ç –∫–∞–∫ –æ–±—â–∏–π",
    "/link_parents <–ö–õ–ê–°–°> ‚Äî –ø—Ä–∏–≤—è–∑–∞—Ç—å –≠–¢–û–¢ —á–∞—Ç –∫–∞–∫ —á–∞—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π",
    "/pickup_set <–ö–õ–ê–°–°> –ü–ù=13:30,–í–¢=12:40,... –∏–ª–∏ /pickup_set <–ö–õ–ê–°–°> {JSON}",
    "/faq_add –í–æ–ø—Ä–æ—Å | –û—Ç–≤–µ—Ç | –∫–ª—é—á1, –∫–ª—é—á2 | –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
    "/faq_del <–Ω–æ–º–µ—Ä> /faq_list /faq_export",
    "/faq_import [append|replace] [JSON] /faq_clear",
    "/forward_unknown on|off ‚Äî –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —É—á–∏—Ç–µ–ª—é",
    "/persona_set –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ ‚Äî –∫–∞–∫ –±—É–¥–µ—Ç –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –±–æ—Ç",
    "/autoreply on|off ‚Äî –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã ¬´–∫–∞–∫ —É—á–∏—Ç–µ–ª—å¬ª",
    "/policy_absence_set –¢–µ–∫—Å—Ç ‚Äî —à–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –±–æ–ª–µ–∑–Ω–∏/–ø—Ä–æ–ø—É—Å–∫–µ",
    "",
    "–î–æ–æ–±—É—á–µ–Ω–∏–µ:",
    "/teach \"—à–∞–±–ª–æ–Ω\" => \"–æ—Ç–≤–µ—Ç\"",
    "/teach_list, /teach_del <‚Ññ>, /teach_clear",
    "",
    "–£—á–∏—Ç–µ–ª—å: —Ñ–æ—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ‚Äî –ø–æ–¥–ø–∏—Å—å: #5–ê —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é",
    "–£—á–∏—Ç–µ–ª—å: —Ñ–æ—Ç–æ –∞–≤—Ç–æ–±—É—Å–æ–≤ ‚Äî –ø–æ–¥–ø–∏—Å—å: #5–ê –∞–≤—Ç–æ–±—É—Å—ã ...",
  ].join("\n");
  await sendSafe("sendMessage", token, { chat_id: chatId, text });
}
async function cmdPing(token, msg) {
  await sendToSameThread("sendMessage", token, msg, { text: "pong ‚úÖ" });
}
async function cmdIamTeacher(env, token, msg, state) {
  if (msg.chat.type !== "private") return sendToSameThread("sendMessage", token, msg, { text: "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ." });
  state.teacher_id = msg.from.id; await saveState(env, state);
  await sendSafe("sendMessage", token, { chat_id: msg.chat.id, text: "–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã —É—á–∏—Ç–µ–ª–µ–º ‚úÖ" });
}
async function cmdLink(token, msg, state, args, kind) {
  const cls = parseClassFrom(args);
  if (!cls) return sendToSameThread("sendMessage", token, msg, { text: `–£–∫–∞–∂–∏—Ç–µ –∫–ª–∞—Å—Å, –ø—Ä–∏–º–µ—Ä: /${kind} 1–ë` });
  ensureClass(state, cls);
  state.classes[cls][kind === "link_general" ? "general_chat_id" : "parents_chat_id"] = msg.chat.id;
  await sendToSameThread("sendMessage", token, msg, { text: `–ü—Ä–∏–≤—è–∑–∞–Ω–æ: ${kind === "link_general" ? "–û–ë–©–ò–ô" : "–†–û–î–ò–¢–ï–õ–ò"} —á–∞—Ç –¥–ª—è –∫–ª–∞—Å—Å–∞ ${cls} ‚úÖ` });
}

/* ---------------- –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ/–∞–≤—Ç–æ–±—É—Å—ã/–∑–∞–±–æ—Ä ---------------- */
async function cmdSchedule(token, msg, state, args) {
  let cls = null;
  for (const [k, v] of Object.entries(state.classes)) {
    if (v.general_chat_id === msg.chat.id || v.parents_chat_id === msg.chat.id) { cls = k; break; }
  }
  if (!cls && msg.chat.type === "private") {
    const found = parseClassFrom(args);
    if (!found) return sendSafe("sendMessage", token, { chat_id: msg.chat.id, text: "–£–∫–∞–∂–∏—Ç–µ –∫–ª–∞—Å—Å: /schedule 1–ë" });
    cls = found;
  }
  if (!cls) return sendToSameThread("sendMessage", token, msg, { text: "–≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–ª–∞—Å—Å—É. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /link_general 1–ë –∏–ª–∏ /link_parents 1–ë." });

  const rec = state.classes[cls];
  if (!rec?.schedule_file_id) return sendToSameThread("sendMessage", token, msg, { text: `–î–ª—è ${cls} —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.` });

  await sendToSameThread("sendPhoto", token, msg, { photo: rec.schedule_file_id, caption: rec.schedule_caption || `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ${cls}` });
}
async function cmdBuses(token, msg, state, args) {
  let cls = pickClassFromChat(state, msg.chat.id);
  if (!cls && msg.chat.type === "private") {
    const found = parseClassFrom(args || "");
    if (!found) return sendSafe("sendMessage", token, { chat_id: msg.chat.id, text: "–£–∫–∞–∂–∏—Ç–µ –∫–ª–∞—Å—Å: /buses 1–ë" });
    cls = found;
  }
  if (!cls) return sendToSameThread("sendMessage", token, msg, { text: "–ß–∞—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–ª–∞—Å—Å—É. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /link_general 1–ë –∏–ª–∏ /link_parents 1–ë." });

  const rec = state.classes[cls];
  if (!rec?.bus_file_id) return sendToSameThread("sendMessage", token, msg, { text: `–î–ª—è ${cls} —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å–æ–≤ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.` });

  await sendToSameThread("sendPhoto", token, msg, { photo: rec.bus_file_id, caption: rec.bus_caption || `–ê–≤—Ç–æ–±—É—Å—ã ${cls}` });
}

/* ----- pickup ----- */
function parsePickupMapping(str) {
  const out = {};
  const parts = str.split(/[;,]/).map(s=>s.trim()).filter(Boolean);
  for (const p of parts) {
    const [kRaw, vRaw] = p.split("=").map(s=>s.trim());
    if (!kRaw || !vRaw) continue;
    const k = dayShortFromInput(kRaw) || kRaw.toUpperCase().slice(0,2);
    if (!DAYS.includes(k)) continue;
    if (!/^\d{1,2}:\d{2}$/.test(vRaw)) continue;
    out[k] = vRaw;
  }
  return Object.keys(out).length ? out : null;
}
async function cmdPickupSet(env, token, msg, state, args) {
  const isTeacher = state.teacher_id && state.teacher_id === msg.from.id;
  if (!isTeacher) return sendToSameThread("sendMessage", token, msg, { text: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—é." });

  const parts = args.trim().split(/\s+/);
  const cls = parseClassFrom(parts[0] || "");
  if (!cls) return sendToSameThread("sendMessage", token, msg, { text: "–§–æ—Ä–º–∞—Ç: /pickup_set 1–ë –ü–ù=13:30,–í–¢=12:40,..." });
  ensureClass(state, cls);

  const rest = args.trim().slice(args.indexOf(parts[0]) + parts[0].length).trim();
  let mapping = null;

  if (rest.startsWith("{")) {
    try {
      const obj = JSON.parse(rest);
      const m = {};
      for (const [k,v] of Object.entries(obj || {})) {
        const kk = dayShortFromInput(k) || k.toString().toUpperCase().slice(0,2);
        if (DAYS.includes(kk) && /^\d{1,2}:\d{2}$/.test(v)) m[kk]=v;
      }
      mapping = Object.keys(m).length ? m : null;
    } catch { mapping = null; }
  } else {
    mapping = parsePickupMapping(rest);
  }

  if (!mapping) return sendToSameThread("sendMessage", token, msg, { text: "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–µ–º–µ–Ω–∞. –ü—Ä–∏–º–µ—Ä: /pickup_set 1–ë –ü–ù=13:30,–í–¢=12:40" });

  state.classes[cls].pickup_times = mapping;
  await saveState(env, state);

  const pretty = Object.entries(mapping).map(([k,v])=>`${k}=${v}`).join(", ");
  await sendToSameThread("sendMessage", token, msg, { text: `–ì–æ—Ç–æ–≤–æ. –í—Ä–µ–º—è –∑–∞–±–æ—Ä–∞ –¥–ª—è ${cls}: ${pretty}` });

  const rec = state.classes[cls];
  const targets = [rec.general_chat_id, rec.parents_chat_id].filter(Boolean);
  if (targets.length) {
    const note = `–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –∑–∞–±–æ—Ä–∞ (${cls}):\n` + formatPickupWeek(mapping);
    for (const chatId of targets) await sendSafe("sendMessage", token, { chat_id: chatId, text: note });
  }
}
async function cmdPickup(token, msg, state, args) {
  let cls = pickClassFromChat(state, msg.chat.id);
  let day = null;

  if (args) {
    const maybeClass = parseClassFrom(args);
    if (maybeClass) cls = maybeClass;
    const maybeDay = dayShortFromInput(args) || (/—Å–µ–≥–æ–¥–Ω—è/.test(normalize(args)) ? todayRuShort() : null);
    if (maybeDay) day = maybeDay;
  }
  if (!cls && msg.chat.type === "private") return sendSafe("sendMessage", token, { chat_id: msg.chat.id, text: "–£–∫–∞–∂–∏—Ç–µ –∫–ª–∞—Å—Å: /pickup 1–ë" });
  if (!cls) return sendToSameThread("sendMessage", token, msg, { text: "–ß–∞—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–ª–∞—Å—Å—É. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /link_general 1–ë –∏–ª–∏ /link_parents 1–ë." });

  const rec = state.classes[cls] || {};
  if (!rec.pickup_times) return sendToSameThread("sendMessage", token, msg, { text: `–î–ª—è ${cls} –µ—â—ë –Ω–µ –∑–∞–¥–∞–Ω–æ –≤—Ä–µ–º—è –∑–∞–±–æ—Ä–∞. –ö–æ–º–∞–Ω–¥–∞ —É—á–∏—Ç–µ–ª—è: /pickup_set ${cls} –ü–ù=13:30,–í–¢=12:40,...` });

  const d = day || todayRuShort();
  const t = rec.pickup_times[d];
  if (!t) return sendToSameThread("sendMessage", token, msg, { text: `–î–ª—è ${cls} –Ω–∞ ${dayNameFull(d)} –≤—Ä–µ–º—è –Ω–µ –∑–∞–¥–∞–Ω–æ.` });
  await sendToSameThread("sendMessage", token, msg, { text: `${state.teacher_display_name}: ${cls}, ${dayNameFull(d)} ‚Äî –∑–∞–±–∏—Ä–∞–µ–º –≤ ${t}.` });
}

/* ---------------- FAQ/ASK + –î–æ–æ–±—É—á–µ–Ω–∏–µ ---------------- */
async function cmdAsk(env, token, msg, state, args) {
  const q = args || "";
  if (!q) return sendToSameThread("sendMessage", token, msg, { text: "–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /ask –ö–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —É—Ä–æ–∫–∏?" });

  // –±—ã—Å—Ç—Ä—ã–µ —Ö–∏—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
  const n = normalize(q);
  if (/(–∑–∞–±–∏—Ä–∞—Ç—å|–∑–∞–±—Ä–∞—Ç—å|–≤–æ —Å–∫–æ–ª—å–∫–æ.*–∑–∞–±)/.test(n)) {
    let cls = pickClassFromChat(state, msg.chat.id);
    if (!cls) return sendToSameThread("sendMessage", token, msg, { text: "–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å —Ç–æ—á–Ω–æ, —É–∫–∞–∂–∏—Ç–µ –∫–ª–∞—Å—Å: /pickup 1–ë" });
    const rec = state.classes[cls] || {};
    if (rec.pickup_times) {
      const d = todayRuShort();
      const t = rec.pickup_times[d];
      if (t) return sendToSameThread("sendMessage", token, msg, { text: `${state.teacher_display_name}: ${cls}: —Å–µ–≥–æ–¥–Ω—è (${dayNameFull(d)}) ‚Äî –∑–∞–±–∏—Ä–∞–µ–º –≤ ${t}.` });
    }
  }

  // teach-–ø—Ä–∞–≤–∏–ª–∞ —Å–Ω–∞—á–∞–ª–∞
  const taught = findTeachAnswer(state, q);
  if (taught) {
    await sendToSameThread("sendMessage", token, msg, { text: `${state.teacher_display_name}: ${taught}` });
    return;
  }

  const hit = bestFaqAnswer(state, q);
  if (hit) { await sendToSameThread("sendMessage", token, msg, { text: `${state.teacher_display_name}: ${hit.a}` }); return; }

  if (state.forward_unknown_to_teacher && state.teacher_id) {
    await sendSafe("sendMessage", token, { chat_id: state.teacher_id, text: `–í–æ–ø—Ä–æ—Å –∏–∑ —á–∞—Ç–∞ ${msg.chat.title || msg.chat.id}:\n${q}` });
  }
  await sendToSameThread("sendMessage", token, msg, { text: `${state.teacher_display_name}: —Å–µ–π—á–∞—Å —É—Ç–æ—á–Ω—é –∏ –≤–µ—Ä–Ω—É—Å—å —Å—é–¥–∞ üôå` });
}

async function cmdFaq(token, msg, state) {
  const faqs = state.faq || [];
  if (!faqs.length) return sendToSameThread("sendMessage", token, msg, { text: "FAQ –ø–æ–∫–∞ –ø—É—Å—Ç. –ê–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ /faq_add" });
  const cats = listCategories(state);
  if (cats.length) return sendToSameThread("sendMessage", token, msg, { text: "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup: kbCategories(cats) });
  await sendToSameThread("sendMessage", token, msg, { text: "–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:", reply_markup: kbFaqItems(faqs, 0) });
}
async function cmdFaqList(token, msg, state) {
  const faqs = state.faq || [];
  if (!faqs.length) return sendToSameThread("sendMessage", token, msg, { text: "FAQ –ø—É—Å—Ç." });
  const out = faqs.map((x, i) => `${i + 1}. ${x.q}${x.cat ? ` [${x.cat}]` : ""}`).join("\n");
  for (let i = 0; i < out.length; i += 3500) await sendToSameThread("sendMessage", token, msg, { text: out.slice(i, i + 3500) });
}
async function cmdFaqExport(token, msg, state) {
  const json = JSON.stringify(state.faq || [], null, 2);
  for (let i = 0; i < json.length; i += 3500) {
    await sendToSameThread("sendMessage", token, msg, { text: "```json\n" + json.slice(i, i + 3500) + "\n```", parse_mode: "Markdown" });
  }
}
async function cmdFaqAdd(env, token, msg, state, args) {
  const isTeacher = state.teacher_id && state.teacher_id === msg.from.id;
  if (!isTeacher) return sendToSameThread("sendMessage", token, msg, { text: "–¢–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å FAQ." });
  const parts = args.split("|").map(s => s.trim());
  if (parts.length < 2) return sendToSameThread("sendMessage", token, msg, { text: "–§–æ—Ä–º–∞—Ç: /faq_add –í–æ–ø—Ä–æ—Å | –û—Ç–≤–µ—Ç | –∫–ª—é—á1, –∫–ª—é—á2 | –∫–∞—Ç–µ–≥–æ—Ä–∏—è" });
  const [q, a] = [parts[0], parts[1]];
  const kw = (parts[2] || "").split(",").map(s => s.trim()).filter(Boolean);
  const cat = parts[3] || "";
  state.faq = state.faq || []; state.faq.push({ q, a, kw, cat }); await saveState(env, state);
  await sendToSameThread("sendMessage", token, msg, { text: "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ FAQ ‚úÖ" });
}
async function cmdFaqDel(env, token, msg, state, args) {
  const isTeacher = state.teacher_id && state.teacher_id === msg.from.id;
  if (!isTeacher) return sendToSameThread("sendMessage", token, msg, { text: "–¢–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å FAQ." });
  const idx = parseInt(args, 10);
  if (!state.faq || isNaN(idx) || idx < 1 || idx > state.faq.length) return sendToSameThread("sendMessage", token, msg, { text: "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏: /faq_del 2" });
  state.faq.splice(idx - 1, 1); await saveState(env, state);
  await sendToSameThread("sendMessage", token, msg, { text: "–£–¥–∞–ª–µ–Ω–æ ‚úÖ" });
}
function safeParseJson(s) { try { return [JSON.parse(s), null]; } catch (e) { return [null, e?.message || String(e)]; } }
async function cmdFaqImport(env, token, msg, state, args) {
  const isTeacher = state.teacher_id && state.teacher_id === msg.from.id;
  if (!isTeacher) return sendToSameThread("sendMessage", token, msg, { text: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—é." });
  let mode = "append";
  let payload = args.trim();
  if (payload.toLowerCase().startsWith("replace ")) { mode = "replace"; payload = payload.slice(8).trim(); }
  else if (payload.toLowerCase().startsWith("append ")) { payload = payload.slice(6).trim(); }
  if (!payload) return sendToSameThread("sendMessage", token, msg, { text: "–§–æ—Ä–º–∞—Ç: /faq_import [append|replace] [JSON]" });
  const [data, err] = safeParseJson(payload);
  if (err || !Array.isArray(data)) return sendToSameThread("sendMessage", token, msg, { text: "–û—à–∏–±–∫–∞ JSON –∏–ª–∏ –Ω–µ –º–∞—Å—Å–∏–≤." });
  const added = [];
  for (const raw of data) {
    const q = (raw?.q || "").toString().trim();
    const a = (raw?.a || "").toString().trim();
    const kw = Array.isArray(raw?.kw) ? raw.kw.map(x=>x.toString().trim()).filter(Boolean)
      : (typeof raw?.kw === "string" ? raw.kw.split(",").map(s=>s.trim()).filter(Boolean) : []);
    const cat = (raw?.cat || "").toString().trim();
    if (q && a) added.push({ q, a, kw, cat });
  }
  if (!added.length) return sendToSameThread("sendMessage", token, msg, { text: "–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–Ω—É–∂–Ω—ã q –∏ a)." });
  if (mode === "replace") state.faq = [];
  state.faq = (state.faq || []).concat(added);
  await saveState(env, state);
  await sendToSameThread("sendMessage", token, msg, { text: `–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω: ${added.length}. –†–µ–∂–∏–º: ${mode.toUpperCase()}. –í—Å–µ–≥–æ: ${(state.faq||[]).length}.` });
}
async function cmdFaqClear(env, token, msg, state) {
  const isTeacher = state.teacher_id && state.teacher_id === msg.from.id;
  if (!isTeacher) return sendToSameThread("sendMessage", token, msg, { text: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—é." });
  state.faq = []; await saveState(env, state);
  await sendToSameThread("sendMessage", token, msg, { text: "FAQ –æ—á–∏—â–µ–Ω ‚úÖ" });
}

/* ----- –î–æ–æ–±—É—á–µ–Ω–∏–µ (teach) ----- */
function findTeachAnswer(state, question) {
  const qn = normalize(question);
  for (const r of state.teach || []) {
    const pn = normalize(r.pat);
    if (pn && qn.includes(pn)) return r.ans;
  }
  return null;
}
async function cmdTeach(env, token, msg, state, args) {
  const isTeacher = state.teacher_id && state.teacher_id === msg.from.id;
  if (!isTeacher) return sendToSameThread("sendMessage", token, msg, { text: "–¢–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ–±—É—á–∞—Ç—å –æ—Ç–≤–µ—Ç—ã." });

  // –æ–∂–∏–¥–∞–µ–º: /teach "—à–∞–±–ª–æ–Ω" => "–æ—Ç–≤–µ—Ç"
  const m = args.match(/"([^"]+)"\s*=>\s*"([^"]+)"/);
  if (!m) return sendToSameThread("sendMessage", token, msg, { text: '–§–æ—Ä–º–∞—Ç: /teach "—à–∞–±–ª–æ–Ω" => "–æ—Ç–≤–µ—Ç"' });
  const pat = m[1].trim(), ans = m[2].trim();
  state.teach = state.teach || [];
  state.teach.push({ pat, ans });
  await saveState(env, state);
  await sendToSameThread("sendMessage", token, msg, { text: `–î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª–æ #${state.teach.length} ‚úÖ` });
}
async function cmdTeachList(token, msg, state) {
  const list = state.teach || [];
  if (!list.length) return sendToSameThread("sendMessage", token, msg, { text: "–ü—Ä–∞–≤–∏–ª–∞ –ø—É—Å—Ç—ã. –î–æ–±–∞–≤—å—Ç–µ: /teach \"—à–∞–±–ª–æ–Ω\" => \"–æ—Ç–≤–µ—Ç\"" });
  const out = list.map((r,i)=>`${i+1}. "${r.pat}" => "${r.ans.slice(0,80)}"`).join("\n");
  await sendToSameThread("sendMessage", token, msg, { text: out.slice(0,4000) });
}
async function cmdTeachDel(env, token, msg, state, args) {
  const isTeacher = state.teacher_id && state.teacher_id === msg.from.id;
  if (!isTeacher) return sendToSameThread("sendMessage", token, msg, { text: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—é." });
  const idx = parseInt(args, 10);
  const list = state.teach || [];
  if (isNaN(idx) || idx < 1 || idx > list.length) return sendToSameThread("sendMessage", token, msg, { text: "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª–∞: /teach_del 2" });
  list.splice(idx - 1, 1); state.teach = list; await saveState(env, state);
  await sendToSameThread("sendMessage", token, msg, { text: "–£–¥–∞–ª–µ–Ω–æ ‚úÖ" });
}
async function cmdTeachClear(env, token, msg, state) {
  const isTeacher = state.teacher_id && state.teacher_id === msg.from.id;
  if (!isTeacher) return sendToSameThread("sendMessage", token, msg, { text: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—é." });
  state.teach = []; await saveState(env, state);
  await sendToSameThread("sendMessage", token, msg, { text: "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –æ—á–∏—â–µ–Ω—ã ‚úÖ" });
}

/* ---------------- –ü–µ—Ä—Å–æ–Ω–∞/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---------------- */
async function cmdPersonaSet(env, token, msg, state, args) {
  const isTeacher = state.teacher_id && state.teacher_id === msg.from.id;
  if (!isTeacher) return sendToSameThread("sendMessage", token, msg, { text: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—é." });
  const name = args.trim();
  if (!name) return sendToSameThread("sendMessage", token, msg, { text: "–£–∫–∞–∂–∏—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è: /persona_set –ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–Ω–∞" });
  state.teacher_display_name = name; await saveState(env, state);
  return sendToSameThread("sendMessage", token, msg, { text: `–¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—á–∞—é –∫–∞–∫: ${name}` });
}
async function cmdAutoReply(env, token, msg, state, args) {
  const isTeacher = state.teacher_id && state.teacher_id === msg.from.id;
  if (!isTeacher) return sendToSameThread("sendMessage", token, msg, { text: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—é." });
  const v = (args||"").trim().toLowerCase();
  if (!["on","off"].includes(v)) return sendToSameThread("sendMessage", token, msg, { text: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /autoreply on|off" });
  state.autoreply_enabled = v === "on"; await saveState(env, state);
  return sendToSameThread("sendMessage", token, msg, { text: `–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã: ${state.autoreply_enabled?"–í–ö–õ":"–í–´–ö–õ"}` });
}
async function cmdPolicyAbsenceSet(env, token, msg, state, args) {
  const isTeacher = state.teacher_id && state.teacher_id === msg.from.id;
  if (!isTeacher) return sendToSameThread("sendMessage", token, msg, { text: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—é." });
  const txt = args.trim();
  if (!txt) return sendToSameThread("sendMessage", token, msg, { text: "–§–æ—Ä–º–∞—Ç: /policy_absence_set –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞" });
  state.policy_absence = txt; await saveState(env, state);
  return sendToSameThread("sendMessage", token, msg, { text: "–ü–æ–ª–∏—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ" });
}

/* ---------------- Small talk & —à–∫–æ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ–Ω—Ç—ã ---------------- */
function extractTimeHHMM(text) {
  const m = text.match(/(\b[01]?\d|2[0-3]):([0-5]\d)\b/);
  return m ? `${m[1].padStart(2,"0")}:${m[2]}` : null;
}
function extractTimeFlexible(text) {
  const m = text.match(/\b([01]?\d|2[0-3])[.: \-]?([0-5]\d)\b/);
  return m ? `${m[1].padStart(2,"0")}:${m[2]}` : null;
}
function extractDelayMinutes(text) {
  const m = normalize(text).match(/\b–Ω–∞\s+(\d{1,2})\s*–º–∏–Ω/);
  return m ? parseInt(m[1], 10) : null;
}
function guessChildName(text) {
  const m = text.match(/([–ê-–Ø–Å][–∞-—è—ë]+)(?=\s+(–∑–∞–±–æ–ª–µ–ª|–∑–∞–±–æ–ª–µ–ª–∞|–±–æ–ª–µ–µ—Ç|–Ω–µ\s+–ø—Ä–∏–¥[–µ—ë]—Ç|–æ–ø–æ–∑–¥–∞[–µ—ë]—Ç|–æ–ø–∞–∑–¥—ã–≤–∞|–∑–∞–¥–µ—Ä–∂–∏–≤–∞|—É–π–¥[–µ—ë]—Ç|–æ—Ç–ø—É—Å—Ç))/i);
  return m ? m[1] : null;
}

async function handleNaturalMessage(env, token, msg, state) {
  if (!state.autoreply_enabled) return false;
  const raw = (msg.text || "").trim();
  if (!raw) return false;
  const t = normalize(raw);

  // –∫–æ–Ω—Ç–µ–∫—Å—Ç: –∑–∞–ø–æ–º–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  rememberContext(env, msg, "user", raw);

  // teach ‚Äî –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ
  const taught = findTeachAnswer(state, raw);
  if (taught) {
    await sendToSameThread("sendMessage", token, msg, { text: `${state.teacher_display_name}: ${taught}` });
    await rememberContext(env, msg, "bot", taught);
    return true;
  }

  // small talk
  if (/(^| )(–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ|–¥–æ–±—Ä—ã–π –¥–µ–Ω—å|–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ|–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä)( |!|$)/.test(t)) {
    const txt = `${state.teacher_display_name}: –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?`;
    await sendToSameThread("sendMessage", token, msg, { text: txt });
    await rememberContext(env, msg, "bot", txt); return true;
  }
  if (/(^| )(—Å–ø–∞—Å–∏–±–æ|–±–ª–∞–≥–æ–¥–∞—Ä—é)( |!|$)/.test(t)) {
    const txt = `${state.teacher_display_name}: –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!`;
    await sendToSameThread("sendMessage", token, msg, { text: txt });
    await rememberContext(env, msg, "bot", txt); return true;
  }
  if (/(^| )(–ø–æ–∫–∞|–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è|–¥–æ—Å–≤–∏–¥–∞–Ω–∏—è|—Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è)( |!|$)/.test(t)) {
    const txt = `${state.teacher_display_name}: –¥–æ —Å–≤–∏–¥–∞–Ω–∏—è!`;
    await sendToSameThread("sendMessage", token, msg, { text: txt });
    await rememberContext(env, msg, "bot", txt); return true;
  }

  // –±–æ–ª–µ–∑–Ω—å / –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ
  if (/(–∑–∞–±–æ–ª–µ–ª|–∑–∞–±–æ–ª–µ–ª–∞|–±–æ–ª–µ–µ—Ç|—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä|–ø—Ä–æ—Å—Ç—É–¥|–æ—Ä–≤–∏|–Ω–µ\s+–±—É–¥–µ—Ç|–ø—Ä–æ–ø—É—Å—Ç–∏—Ç|–Ω–µ\s+–ø—Ä–∏–¥[–µ—ë]—Ç)/.test(t)) {
    const name = guessChildName(raw) || "–†–µ–±—ë–Ω–æ–∫";
    const txt = `${state.teacher_display_name}: ${name}, ${state.policy_absence}`;
    await sendToSameThread("sendMessage", token, msg, { text: txt });
    await rememberContext(env, msg, "bot", txt);
    if (state.teacher_id) await sendSafe("sendMessage", token, { chat_id: state.teacher_id, text: `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∏–∑ —á–∞—Ç–∞ ${msg.chat.title || msg.chat.id}:\n"${raw}"` });
    return true;
  }

  // –æ–ø–æ–∑–¥–∞–Ω–∏–µ
  if (/(–æ–ø–∞–∑–¥—ã–≤–∞|–æ–ø–æ–∑–¥–∞|–∑–∞–¥–µ—Ä–∂–∏–≤–∞|–±—É–¥–µ–º –ø–æ–∑–∂–µ|–±—É–¥—É –ø–æ–∑–∂–µ|–ø–æ–∑–∂–µ –Ω–∞)/.test(t)) {
    const tm = extractTimeHHMM(raw) || extractTimeFlexible(raw);
    const delay = extractDelayMinutes(raw);
    const when = tm ? `–∫ ${tm}` : (delay ? `–Ω–∞ ~${delay} –º–∏–Ω` : "–Ω–µ–º–Ω–æ–≥–æ");
    const txt = `${state.teacher_display_name}: –ø–æ–Ω—è–ª–∞, –ø–æ–¥–æ–∂–¥—ë–º ${when}.`;
    await sendToSameThread("sendMessage", token, msg, { text: txt });
    await rememberContext(env, msg, "bot", txt);
    if (state.teacher_id) await sendSafe("sendMessage", token, { chat_id: state.teacher_id, text: `–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–æ–∑–¥–∞–Ω–∏–∏:\n"${raw}"` });
    return true;
  }

  // —Ä–∞–Ω–Ω–∏–π —É—Ö–æ–¥
  if (/(–æ—Ç–ø—É—Å—Ç(–∏|–∏—Ç–µ)|—É–π–¥[–µ—ë]–º.*—Ä–∞–Ω—å—à–µ|—É–π–¥—É.*—Ä–∞–Ω—å—à–µ|–∑–∞–±–µ—Ä—É\s*–≤|–∑–∞–±–∏—Ä–∞—Ç—å\s*–≤|–∑–∞–±–µ—Ä[—É—ë]).*/.test(t)) {
    const tm = extractTimeHHMM(raw) || extractTimeFlexible(raw);
    const when = tm ? `–≤ ${tm}` : "—Ä–∞–Ω—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ";
    const txt = `${state.teacher_display_name}: —Ö–æ—Ä–æ—à–æ, –æ—Ç–ø—É—Å—Ç–∏–º ${when}.`;
    await sendToSameThread("sendMessage", token, msg, { text: txt });
    await rememberContext(env, msg, "bot", txt);
    if (state.teacher_id) await sendSafe("sendMessage", token, { chat_id: state.teacher_id, text: `–ü—Ä–æ—Å—å–±–∞ –æ—Ç–ø—É—Å—Ç–∏—Ç—å:\n"${raw}"` });
    return true;
  }

  // ¬´–≤–æ —Å–∫–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è/—É—Ä–æ–∫–∏/—É—Ä–æ–∫¬ª
  if (/(–≤–æ —Å–∫–æ–ª—å–∫–æ|–¥–æ —Å–∫–æ–ª—å–∫–∏).*(–∑–∞–∫–∞–Ω—á|–∫–æ–Ω—á–∞—Ç|—É—Ä–æ–∫)/.test(t)) {
    // –ü–µ—Ä–µ–∫–∏–¥—ã–≤–∞–µ–º –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∏–ª–∏ –∫ –∑–∞–±–æ—Ä—É (–¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π —à–∫–æ–ª—ã —ç—Ç–æ –±–ª–∏–∑–∫–æ)
    let cls = pickClassFromChat(state, msg.chat.id);
    const haveSchedule = cls && state.classes[cls]?.schedule_file_id;
    const txt = haveSchedule
      ? `${state.teacher_display_name}: –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ‚Äî —Å–º–æ—Ç—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—á–∫—É. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –Ω–∞–ø–∏—à—É —Ç–æ—á–Ω–µ–µ –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é —É—Ä–æ–∫–æ–≤.`
      : `${state.teacher_display_name}: —Å–µ–π—á–∞—Å –ø—Ä–∏—à–ª—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –∞ –ø–æ–∫–∞ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Ç–µ—Å—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–±–æ—Ä–∞ (/pickup).`;
    await sendToSameThread("sendMessage", token, msg, { text: txt });
    if (haveSchedule) await cmdSchedule(token, msg, state, "");
    await rememberContext(env, msg, "bot", txt);
    return true;
  }

  // ¬´–∫–∞–∫–∏–µ —É—Ä–æ–∫–∏ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞¬ª
  if (/(–∫–∞–∫–∏–µ|—á—Ç–æ –∑–∞).*(—É—Ä–æ–∫|–ø—Ä–µ–¥–º–µ—Ç).*—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞/.test(t)) {
    const txt = `${state.teacher_display_name}: —Å–µ–π—á–∞—Å —É—Ä–æ–∫–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é. –ï—Å–ª–∏ –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å ‚Äî —Å–æ–æ–±—â—É –∑–¥–µ—Å—å.`;
    await sendToSameThread("sendMessage", token, msg, { text: txt });
    await rememberContext(env, msg, "bot", txt);
    await cmdSchedule(token, msg, state, "");
    return true;
  }

  // ¬´–≤–æ —Å–∫–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è –∑–∞–±–∏—Ä–∞—Ç—å¬ª
  if (/(–≤–æ —Å–∫–æ–ª—å–∫–æ|—Å–∫–æ–ª—å–∫–æ)\s+(—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞|—Å–µ–≥–æ–Ω—è)?.*(–∑–∞–±–∏—Ä|–∑–∞–±—Ä–∞—Ç—å|–∑–∞–±–∏—Ä–∞—Ç—å)/.test(t)) {
    await cmdPickup(token, msg, state, "");
    return true;
  }

  // –ù–∏—á–µ–≥–æ –Ω–µ —É–∑–Ω–∞–ª–∏ ‚Äî –ø—Ä–æ–±—É–µ–º FAQ/teach —á–µ—Ä–µ–∑ /ask-–ø–æ—Ç–æ–∫
  const hit = bestFaqAnswer(state, raw);
  if (hit) {
    const txt = `${state.teacher_display_name}: ${hit.a}`;
    await sendToSameThread("sendMessage", token, msg, { text: txt });
    await rememberContext(env, msg, "bot", txt);
    return true;
  }

  if (state.forward_unknown_to_teacher && state.teacher_id) {
    await sendSafe("sendMessage", token, { chat_id: state.teacher_id, text: `–í–æ–ø—Ä–æ—Å –∏–∑ —á–∞—Ç–∞ ${msg.chat.title || msg.chat.id}:\n${raw}` });
  }
  const txt = `${state.teacher_display_name}: —Å–µ–π—á–∞—Å —É—Ç–æ—á–Ω—é –∏ –≤–µ—Ä–Ω—É—Å—å üôå`;
  await sendToSameThread("sendMessage", token, msg, { text: txt });
  await rememberContext(env, msg, "bot", txt);
  return true;
}

/* ---------------- –§–æ—Ç–æ –æ—Ç —É—á–∏—Ç–µ–ª—è ---------------- */
async function handlePhotoFromTeacher(env, token, msg, state) {
  if (msg.chat.type !== "private") return;
  if (!state.teacher_id || state.teacher_id !== msg.from.id) {
    await sendSafe("sendMessage", token, { chat_id: msg.chat.id, text: "–¢–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å: –≤–≤–µ–¥–∏—Ç–µ /iam_teacher –≤ –ª–∏—á–∫–µ." });
    return;
  }
  const caption = msg.caption || "";
  const cls = parseClassFrom(caption);
  if (!cls) { await sendSafe("sendMessage", token, { chat_id: msg.chat.id, text: "–î–æ–±–∞–≤—å—Ç–µ –≤ –ø–æ–¥–ø–∏—Å—å –∫–ª–∞—Å—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: #1–ë ..." }); return; }
  ensureClass(state, cls);
  const file_id = extractLargestPhotoId(msg.photo || []);
  const isBuses = /–∞–≤—Ç–æ–±—É—Å|bus/i.test(caption);

  if (isBuses) {
    state.classes[cls].bus_file_id = file_id;
    state.classes[cls].bus_caption = caption;
  } else {
    state.classes[cls].schedule_file_id = file_id;
    state.classes[cls].schedule_caption = caption;
    state.classes[cls].last_update_iso = new Date().toISOString();
  }
  await saveState(env, state);

  const rec = state.classes[cls];
  const targets = [rec.general_chat_id, rec.parents_chat_id].filter(Boolean);
  if (!targets.length) {
    await sendSafe("sendMessage", token, { chat_id: msg.chat.id, text: `–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è ${cls}, –Ω–æ —á–∞—Ç—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã. /link_general ${cls} –∏ /link_parents ${cls}` });
    return;
  }
  for (const chatId of targets) {
    await sendSafe("sendPhoto", token, { chat_id: chatId, photo: file_id, caption });
  }
  await sendSafe("sendMessage", token, { chat_id: msg.chat.id, text: `${isBuses ? "–ê–≤—Ç–æ–±—É—Å—ã" : "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"} –¥–ª—è ${cls} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ ‚úÖ` });
}

/* ---------------- Callback FAQ ---------------- */
function kbFaqItemsWrap(items, page, cat){ return kbFaqItems(items, page, 8, cat); }
async function handleCallback(env, token, cb, state) {
  const chatId = cb.message.chat.id;
  const data = cb.data || "";
  const [kind, ...rest] = data.split("::");

  if (kind === "faq_cat") {
    const cat = rest[0] || "";
    const items = (state.faq || []).filter(x => (x.cat || "") === cat);
    if (!items.length) { await sendSafe("answerCallbackQuery", token, { callback_query_id: cb.id, text: "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –ø—É—Å—Ç–æ" }); return; }
    await sendSafe("editMessageText", token, {
      chat_id: chatId, message_id: cb.message.message_id,
      text: `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${cat}\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:`,
      reply_markup: kbFaqItemsWrap(items, 0, cat),
    });
    return;
  }

  if (kind === "faq_nav") {
    const cat = rest[1] || "";
    const page = Math.max(0, parseInt(rest[2] || "0", 10));
    const items = cat ? (state.faq || []).filter(x => (x.cat || "") === cat) : (state.faq || []);
    await sendSafe("editMessageReplyMarkup", token, {
      chat_id: chatId, message_id: cb.message.message_id,
      reply_markup: kbFaqItemsWrap(items, page, cat),
    });
    await sendSafe("answerCallbackQuery", token, { callback_query_id: cb.id });
    return;
  }

  if (kind === "faq_show") {
    const idx = parseInt(rest[0] || "0", 10);
    const cat = rest[1] || "";
    const list = cat ? (state.faq || []).filter(x => (x.cat || "") === cat) : (state.faq || []);
    if (!list[idx]) { await sendSafe("answerCallbackQuery", token, { callback_query_id: cb.id, text: "–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" }); return; }
    const item = list[idx];
    await sendSafe("answerCallbackQuery", token, { callback_query_id: cb.id });
    await sendSafe("sendMessage", token, { chat_id: chatId, text: `${state.teacher_display_name}: ${item.a}` });
    return;
  }

  await sendSafe("answerCallbackQuery", token, { callback_query_id: cb.id });
}

/* ---------------- –†–æ—É—Ç–µ—Ä ---------------- */
async function handleCommand(env, token, msg, state) {
  const text = (msg.text || "").trim();
  const [cmd, ...rest] = text.split(/\s+/);
  const args = rest.join(" ").trim();

  switch (cmd) {
    case "/start": await cmdStart(token, msg.chat.id); return true;
    case "/ping": await cmdPing(token, msg); return true;

    case "/iam_teacher": await cmdIamTeacher(env, token, msg, state); return true;
    case "/link_general": await cmdLink(token, msg, state, args, "link_general"); await saveState(env, state); return true;
    case "/link_parents": await cmdLink(token, msg, state, args, "link_parents"); await saveState(env, state); return true;

    case "/schedule": await cmdSchedule(token, msg, state, args); return true;
    case "/buses": await cmdBuses(token, msg, state, args); return true;

    case "/pickup_set": await cmdPickupSet(env, token, msg, state, args); return true;
    case "/pickup": await cmdPickup(token, msg, state, args); return true;
    case "/pickup_week": await sendToSameThread("sendMessage", token, msg, {
                              text: (() => {
                                const cls = pickClassFromChat(state, msg.chat.id);
                                if (!cls || !state.classes[cls]?.pickup_times) return "–ù—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞—Ç—å —á–µ—Ä–µ–∑ /pickup_set";
                                return `–í—Ä–µ–º—è –∑–∞–±–æ—Ä–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é ‚Äî ${cls}:\n` + formatPickupWeek(state.classes[cls].pickup_times);
                              })()
                            }); return true;

    case "/ask": await cmdAsk(env, token, msg, state, args); return true;

    case "/faq": await cmdFaq(token, msg, state); return true;
    case "/faq_list": await cmdFaqList(token, msg, state); return true;
    case "/faq_export": await cmdFaqExport(token, msg, state); return true;
    case "/faq_add": await cmdFaqAdd(env, token, msg, state, args); return true;
    case "/faq_del": await cmdFaqDel(env, token, msg, state, args); return true;
    case "/faq_import": await cmdFaqImport(env, token, msg, state, args); return true;
    case "/faq_clear": await cmdFaqClear(env, token, msg, state); return true;

    case "/persona_set": await cmdPersonaSet(env, token, msg, state, args); return true;
    case "/autoreply": await cmdAutoReply(env, token, msg, state, args); return true;
    case "/policy_absence_set": await cmdPolicyAbsenceSet(env, token, msg, state, args); return true;

    case "/teach": await cmdTeach(env, token, msg, state, args); return true;
    case "/teach_list": await cmdTeachList(token, msg, state); return true;
    case "/teach_del": await cmdTeachDel(env, token, msg, state, args); return true;
    case "/teach_clear": await cmdTeachClear(env, token, msg, state); return true;

    default: return false;
  }
}

/* ---------------- Entry ---------------- */
export default {
  async fetch(request, env) {
    const url = new URL(request.url);
    const token = env.BOT_TOKEN;

    if (url.pathname === "/") return OK("ok");

    if (url.pathname === "/init" && request.method === "GET") {
      if (!token || !env.PUBLIC_URL) return NO(400, "Need BOT_TOKEN and PUBLIC_URL");
      const res = await tg("setWebhook", token, {
        url: `${env.PUBLIC_URL}/webhook/${token}`,
        allowed_updates: ["message","edited_message","callback_query","channel_post","my_chat_member","chat_member"]
      });
      return new Response(JSON.stringify(res), { status: 200, headers: { "content-type": "application/json" } });
    }

    if (url.pathname === `/webhook/${token}` && request.method === "POST") {
      const update = await request.json();
      console.log("UPDATE kind=", (update.message?"message": update.callback_query?"callback": Object.keys(update)[0] || "other"),
                  "ids=", JSON.stringify({chat: update.message?.chat?.id, from: update.message?.from?.id}));

      const state = await loadState(env);

      if (update.message?.text) {
        const handled = await handleCommand(env, token, update.message, state);
        if (handled) return OK();
        const human = await handleNaturalMessage(env, token, update.message, state);
        if (human) return OK();
        // –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ ‚Äî –º–æ–ª—á–∞ –û–ö
        return OK();
      }

      if (update.message?.photo?.length) {
        await handlePhotoFromTeacher(env, token, update.message, state);
        return OK();
      }

      if (update.callback_query) {
        await handleCallback(env, token, update.callback_query, state);
        return OK();
      }

      return OK();
    }

    return NO();
  },
};
