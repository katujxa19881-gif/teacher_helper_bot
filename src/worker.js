// Cloudflare Worker ‚Äî Telegram-–±–æ—Ç –¥–ª—è –∫–ª–∞—Å—Å–∞
// Bindings:
// - KV_BOT (KV Namespace)
// - BOT_TOKEN (Secret)
// - PUBLIC_URL (Text)

const OK = (body = "ok") => new Response(body, { status: 200 });
const NO = (code = 404, body = "not found") => new Response(body, { status: code });

/* ---------- Telegram API ---------- */
async function tg(method, token, payload) {
  const res = await fetch(`https://api.telegram.org/bot${token}/${method}`, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify(payload),
  });
  return res.json();
}
async function sendSafe(method, token, payload) {
  try {
    const res = await tg(method, token, payload);
    console.log("SEND", method, JSON.stringify(payload), "=>", JSON.stringify(res));
    return res;
  } catch (e) {
    console.log("SEND ERROR", method, e?.toString?.() || e);
    return null;
  }
}
// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ç–æ—Ç –∂–µ —á–∞—Ç/—Ç—É –∂–µ —Ç–µ–º—É
async function sendToSameThread(method, token, msg, payload = {}) {
  const p = { ...payload, chat_id: msg.chat.id };
  if ((msg.chat?.type === "supergroup" || msg.chat?.type === "group") && msg.is_topic_message && msg.message_thread_id) {
    p.message_thread_id = msg.message_thread_id;
  }
  return sendSafe(method, token, p);
}

/* ---------- KV state ---------- */
async function loadState(env) {
  const raw = await env.KV_BOT.get("state");
  if (!raw) {
    return {
      teacher_id: null,
      teacher_display_name: "–ò—Ä–∏–Ω–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞",
      autoreply_enabled: true,
      policy_absence: "–í—ã–∑–¥–æ—Ä–∞–≤–ª–∏–≤–∞–π—Ç–µ üôå –ü—Ä–∏–¥–∏—Ç–µ –≤ —à–∫–æ–ª—É —Å–æ —Å–ø—Ä–∞–≤–∫–æ–π –æ—Ç –≤—Ä–∞—á–∞.",
      classes: {
        // "1–ë": {...}
      },
      faq: [],
      forward_unknown_to_teacher: true,
    };
  }
  return JSON.parse(raw);
}
async function saveState(env, state) {
  await env.KV_BOT.put("state", JSON.stringify(state));
}
function ensureClass(state, cls) {
  if (!state.classes[cls]) {
    state.classes[cls] = {
      general_chat_id: null,
      parents_chat_id: null,

      // —É—Ä–æ–∫–∏
      schedule_file_id: null,
      schedule_caption: null,

      // –∞–≤—Ç–æ–±—É—Å—ã (–≥–æ—Ä–æ–¥/–æ–±—ã—á–Ω—ã–π)
      bus_file_id: null,
      bus_caption: null,

      // –ø–æ–¥–≤–æ–∑ (–ø–æ—Å—ë–ª–∫–∏)
      rural_bus_file_id: null,
      rural_bus_caption: null,

      // –∑–≤–æ–Ω–∫–∏
      rings_file_id: null,
      rings_caption: null,

      // –∫–∞—Ä—Ç–∞: –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ/–±–∞–ª–∞–Ω—Å (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∏–¥–µ–æ/–¥–æ–∫/—Ñ–æ—Ç–æ)
      card_topup_file_id: null,
      card_topup_caption: null,
      card_balance_file_id: null,
      card_balance_caption: null,

      pickup_times: null, // {"–ü–ù":"13:30",...}
      last_update_iso: null,
    };
  }
}

/* ---------- Utils ---------- */
function normalize(s = "") {
  return s.toLowerCase()
    .replace(/[—ë]/g, "–µ")
    .replace(/[^a-z–∞-—è0-9\s#:+.()-]/g, " ")
    .replace(/\s+/g, " ")
    .trim();
}
function parseClassFrom(text = "") {
  const m = text.match(/#?\s*([0-9]{1,2}\s*[–ê-–ØA-Z])/i);
  return m ? m[1].toUpperCase().replace(/\s+/g, "") : null;
}
function extractLargestPhotoId(photos = []) {
  if (!photos?.length) return null;
  const bySize = [...photos].sort((a, b) => (a.file_size || 0) - (b.file_size || 0));
  return bySize.at(-1)?.file_id || photos.at(-1)?.file_id || null;
}
function pickClassFromChat(state, chatId) {
  for (const [k, v] of Object.entries(state.classes)) {
    if (v.general_chat_id === chatId || v.parents_chat_id === chatId) return k;
  }
  return null;
}

/* ---------- Time helpers ---------- */
const TZ = "Europe/Kaliningrad";
const DAYS = ["–í–°","–ü–ù","–í–¢","–°–†","–ß–¢","–ü–¢","–°–ë"];
const DAYS_FULL = ["–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ","–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–í—Ç–æ—Ä–Ω–∏–∫","–°—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä–≥","–ü—è—Ç–Ω–∏—Ü–∞","–°—É–±–±–æ—Ç–∞"];
function ruShortFromDate(d) {
  const idx = Number(new Date(d.toLocaleString("en-US", { timeZone: TZ })).getDay());
  return DAYS[idx];
}
function todayRuShort() { return ruShortFromDate(new Date()); }
function dayNameFull(short) { const i = DAYS.indexOf(short); return i >= 0 ? DAYS_FULL[i] : short; }
function dayShortFromInput(s = "") {
  const n = normalize(s);
  if (n === "—Å–µ–≥–æ–¥–Ω—è") return todayRuShort();
  if (n === "–∑–∞–≤—Ç—Ä–∞") { const d = new Date(); d.setUTCMinutes(d.getUTCMinutes() + 24*60); return ruShortFromDate(d); }
  const map = {
    "–ø–Ω":"–ü–ù","–ø–æ–Ω":"–ü–ù","–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫":"–ü–ù","mon":"–ü–ù","monday":"–ü–ù",
    "–≤—Ç":"–í–¢","–≤—Ç–æ—Ä–Ω–∏–∫":"–í–¢","tue":"–í–¢","tuesday":"–í–¢",
    "—Å—Ä":"–°–†","—Å—Ä–µ–¥–∞":"–°–†","wed":"–°–†","wednesday":"–°–†",
    "—á—Ç":"–ß–¢","—á–µ—Ç–≤–µ—Ä–≥":"–ß–¢","thu":"–ß–¢","thursday":"–ß–¢",
    "–ø—Ç":"–ü–¢","–ø—è—Ç–Ω–∏—Ü–∞":"–ü–¢","fri":"–ü–¢","friday":"–ü–¢",
    "—Å–±":"–°–ë","—Å—É–±–±–æ—Ç–∞":"–°–ë","sat":"–°–ë","saturday":"–°–ë",
    "–≤—Å":"–í–°","–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ":"–í–°","sun":"–í–°","sunday":"–í–°",
  };
  return map[n] || null;
}

/* ---------- Keyboards (FAQ) ‚Äî –±–∞–∑–æ–≤—ã–µ –∑–∞–≥–æ—Ç–æ–≤–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –≤ –±—É–¥—É—â–µ–º ---------- */
function scoreMatch(text, kwList) {
  const t = " " + normalize(text) + " ";
  let score = 0;
  for (const kw of kwList || []) {
    const k = " " + normalize(kw) + " ";
    if (t.includes(k)) score += Math.min(k.length, 10);
  }
  return score;
}

/* ---------- –ö–æ–º–∞–Ω–¥—ã ---------- */
async function cmdStart(token, chatId) {
  const text = [
    "–ö–æ–º–∞–Ω–¥—ã:",
    "/ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏",
    "/schedule ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
    "/buses ‚Äî –∞–≤—Ç–æ–±—É—Å—ã (–≥–æ—Ä–æ–¥/–æ–±—ã—á–Ω—ã–π)",
    "/rural_buses ‚Äî –ø–æ–¥–≤–æ–∑ —Å –ø–æ—Å—ë–ª–∫–æ–≤",
    "/rings ‚Äî —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤",
    "/pickup [–¥–µ–Ω—å|–∫–ª–∞—Å—Å] ‚Äî –≤–æ —Å–∫–æ–ª—å–∫–æ –∑–∞–±–∏—Ä–∞—Ç—å (–ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏)",
    "/pickup_week [–∫–ª–∞—Å—Å] ‚Äî –≤—Ä–µ–º—è –∑–∞–±–æ—Ä–∞ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é",
    "",
    "–ê–¥–º–∏–Ω (—É—á–∏—Ç–µ–ª—å/—Ä–æ–¥–∫–æ–º):",
    "/iam_teacher ‚Äî –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è —É—á–∏—Ç–µ–ª–µ–º (–õ–° –±–æ—Ç—É)",
    "/link_general <–ö–õ–ê–°–°> ‚Äî –ø—Ä–∏–≤—è–∑–∞—Ç—å –≠–¢–û–¢ —á–∞—Ç –∫–∞–∫ –æ–±—â–∏–π",
    "/link_parents <–ö–õ–ê–°–°> ‚Äî –ø—Ä–∏–≤—è–∑–∞—Ç—å –≠–¢–û–¢ —á–∞—Ç –∫–∞–∫ —á–∞—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π",
    "/pickup_set <–ö–õ–ê–°–°> –ü–ù=13:30,–í–¢=12:40,... (–¥–æ–±–∞–≤—å 'silent' –≤ –∫–æ–Ω—Ü–µ, —á—Ç–æ–±—ã –Ω–µ –æ–ø–æ–≤–µ—â–∞—Ç—å —á–∞—Ç—ã)",
    "/persona_set –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ ‚Äî –ø–æ–¥–ø–∏—Å—å –±–æ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ò—Ä–∏–Ω–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞)",
    "/autoreply on|off ‚Äî –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã ¬´–∫–∞–∫ —É—á–∏—Ç–µ–ª—å¬ª",
    "/policy_absence_set –¢–µ–∫—Å—Ç ‚Äî —à–∞–±–ª–æ–Ω –¥–ª—è –±–æ–ª–µ–∑–Ω–∏",
    "",
    "–£—á–∏—Ç–µ–ª—å: –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –≤ –õ–° —Å –ø–æ–¥–ø–∏—Å—å—é:",
    " #1–ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é",
    " #1–ë –∞–≤—Ç–æ–±—É—Å—ã ...",
    " #1–ë –ø–æ–¥–≤–æ–∑ ...",
    " #1–ë –∑–≤–æ–Ω–∫–∏ ...",
    " #1–ë –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã ...",
    " #1–ë –±–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã ...",
  ].join("\n");
  await sendSafe("sendMessage", token, { chat_id: chatId, text });
}
async function cmdPing(token, msg) {
  await sendToSameThread("sendMessage", token, msg, { text: "pong ‚úÖ" });
}
async function cmdIamTeacher(env, token, msg, state) {
  if (msg.chat.type !== "private") {
    await sendToSameThread("sendMessage", token, msg, { text: "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ." });
    return;
  }
  state.teacher_id = msg.from.id;
  await saveState(env, state);
  await sendSafe("sendMessage", token, { chat_id: msg.chat.id, text: "–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã —É—á–∏—Ç–µ–ª–µ–º ‚úÖ" });
}
async function cmdLink(token, msg, state, args, kind) {
  const cls = parseClassFrom(args);
  if (!cls) { await sendToSameThread("sendMessage", token, msg, { text: `–£–∫–∞–∂–∏—Ç–µ –∫–ª–∞—Å—Å, –ø—Ä–∏–º–µ—Ä: /${kind} 1–ë` }); return; }
  ensureClass(state, cls);
  state.classes[cls][kind === "link_general" ? "general_chat_id" : "parents_chat_id"] = msg.chat.id;
  await sendToSameThread("sendMessage", token, msg, {
    text: `–ü—Ä–∏–≤—è–∑–∞–Ω–æ: ${kind === "link_general" ? "–û–ë–©–ò–ô" : "–†–û–î–ò–¢–ï–õ–ò"} —á–∞—Ç –¥–ª—è –∫–ª–∞—Å—Å–∞ ${cls} ‚úÖ`,
  });
}
async function cmdSchedule(token, msg, state, args) {
  const cls = pickClassFromChat(state, msg.chat.id) || parseClassFrom(args || "");
  if (!cls) { await sendToSameThread("sendMessage", token, msg, { text: "–£–∫–∞–∂–∏—Ç–µ –∫–ª–∞—Å—Å: /schedule 1–ë" }); return; }
  const rec = state.classes[cls];
  if (!rec?.schedule_file_id) { await sendToSameThread("sendMessage", token, msg, { text: `–î–ª—è ${cls} —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.` }); return; }
  await sendToSameThread("sendPhoto", token, msg, { photo: rec.schedule_file_id, caption: rec.schedule_caption || `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ${cls}` });
}
async function cmdBuses(token, msg, state, args) {
  const cls = pickClassFromChat(state, msg.chat.id) || parseClassFrom(args || "");
  if (!cls) { await sendToSameThread("sendMessage", token, msg, { text: "–£–∫–∞–∂–∏—Ç–µ –∫–ª–∞—Å—Å: /buses 1–ë" }); return; }
  const rec = state.classes[cls];
  if (!rec?.bus_file_id) { await sendToSameThread("sendMessage", token, msg, { text: `–î–ª—è ${cls} –∞–≤—Ç–æ–±—É—Å—ã –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.` }); return; }
  await sendToSameThread("sendPhoto", token, msg, { photo: rec.bus_file_id, caption: rec.bus_caption || `–ê–≤—Ç–æ–±—É—Å—ã ${cls}` });
}
async function cmdRuralBuses(token, msg, state, args) {
  const cls = pickClassFromChat(state, msg.chat.id) || parseClassFrom(args || "");
  if (!cls) { await sendToSameThread("sendMessage", token, msg, { text: "–£–∫–∞–∂–∏—Ç–µ –∫–ª–∞—Å—Å: /rural_buses 1–ë" }); return; }
  const rec = state.classes[cls];
  if (!rec?.rural_bus_file_id) { await sendToSameThread("sendMessage", token, msg, { text: `–î–ª—è ${cls} –ø–æ–¥–≤–æ–∑ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.` }); return; }
  await sendToSameThread("sendPhoto", token, msg, { photo: rec.rural_bus_file_id, caption: rec.rural_bus_caption || `–ü–æ–¥–≤–æ–∑ ${cls}` });
}
async function cmdRings(token, msg, state, args) {
  const cls = pickClassFromChat(state, msg.chat.id) || parseClassFrom(args || "");
  if (!cls) { await sendToSameThread("sendMessage", token, msg, { text: "–£–∫–∞–∂–∏—Ç–µ –∫–ª–∞—Å—Å: /rings 1–ë" }); return; }
  const rec = state.classes[cls];
  if (!rec?.rings_file_id) { await sendToSameThread("sendMessage", token, msg, { text: `–î–ª—è ${cls} —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.` }); return; }
  await sendToSameThread("sendPhoto", token, msg, { photo: rec.rings_file_id, caption: rec.rings_caption || `–ó–≤–æ–Ω–∫–∏ ${cls}` });
}

/* ---------- Pickup ---------- */
function parsePickupMapping(str) {
  const out = {};
  const parts = str.split(/[;,]/).map(s=>s.trim()).filter(Boolean);
  for (const p of parts) {
    const [kRaw, vRaw] = p.split("=").map(s=>s.trim());
    if (!kRaw || !vRaw) continue;
    const k = dayShortFromInput(kRaw) || kRaw.toUpperCase().slice(0,2);
    if (!DAYS.includes(k)) continue;
    if (!/^\d{1,2}:\d{2}$/.test(vRaw)) continue;
    out[k] = vRaw;
  }
  return Object.keys(out).length ? out : null;
}
function formatPickupWeek(mapping) {
  const order = ["–ü–ù","–í–¢","–°–†","–ß–¢","–ü–¢","–°–ë","–í–°"];
  return order.map(d => `${d} ‚Äî ${mapping?.[d] || "‚Äî"}`).join("\n");
}
async function cmdPickupSet(env, token, msg, state, args) {
  const isTeacher = state.teacher_id && state.teacher_id === msg.from.id;
  if (!isTeacher) { await sendToSameThread("sendMessage", token, msg, { text: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—é." }); return; }

  const parts = args.trim().split(/\s+/);
  const cls = parseClassFrom(parts[0] || "");
  if (!cls) { await sendToSameThread("sendMessage", token, msg, { text: "–§–æ—Ä–º–∞—Ç: /pickup_set 1–ë –ü–ù=13:30,–í–¢=12:40,..." }); return; }
  ensureClass(state, cls);

  const rest = args.trim().slice(args.indexOf(parts[0]) + parts[0].length).trim();
  let mapping = null;

  if (rest.startsWith("{")) {
    try {
      const obj = JSON.parse(rest);
      const m = {};
      for (const [k,v] of Object.entries(obj || {})) {
        const kk = dayShortFromInput(k) || k.toString().toUpperCase().slice(0,2);
        if (DAYS.includes(kk) && /^\d{1,2}:\d{2}$/.test(v)) m[kk]=v;
      }
      mapping = Object.keys(m).length ? m : null;
    } catch(e) { mapping = null; }
  } else {
    mapping = parsePickupMapping(rest);
  }

  if (!mapping) { await sendToSameThread("sendMessage", token, msg, { text: "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–µ–º–µ–Ω–∞. –ü—Ä–∏–º–µ—Ä: /pickup_set 1–ë –ü–ù=13:30,–í–¢=12:40" }); return; }

  state.classes[cls].pickup_times = mapping;
  await saveState(env, state);

  const pretty = Object.entries(mapping).map(([k,v])=>`${k}=${v}`).join(", ");
  await sendToSameThread("sendMessage", token, msg, { text: `–ì–æ—Ç–æ–≤–æ. –í—Ä–µ–º—è –∑–∞–±–æ—Ä–∞ –¥–ª—è ${cls}: ${pretty}` });

  const isSilent = /\bsilent\b/i.test(args);
  if (!isSilent) {
    const rec = state.classes[cls];
    const targets = [rec.general_chat_id, rec.parents_chat_id].filter(Boolean);
    const note = `–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –∑–∞–±–æ—Ä–∞ (${cls}):\n` + formatPickupWeek(mapping);
    for (const chatId of targets) await sendSafe("sendMessage", token, { chat_id: chatId, text: note });
  }
}
async function cmdPickup(token, msg, state, args) {
  let cls = pickClassFromChat(state, msg.chat.id);
  let day = null;

  if (args) {
    const maybeClass = parseClassFrom(args);
    if (maybeClass) cls = maybeClass;
    const maybeDay = dayShortFromInput(args) || (/—Å–µ–≥–æ–¥–Ω—è/.test(normalize(args)) ? todayRuShort() : null);
    if (maybeDay) day = maybeDay;
  }
  if (!cls && msg.chat.type === "private") { await sendSafe("sendMessage", token, { chat_id: msg.chat.id, text: "–£–∫–∞–∂–∏—Ç–µ –∫–ª–∞—Å—Å: /pickup 1–ë" }); return; }
  if (!cls) { await sendToSameThread("sendMessage", token, msg, { text: "–ß–∞—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–ª–∞—Å—Å—É. /link_general 1–ë" }); return; }

  const rec = state.classes[cls] || {};
  if (!rec.pickup_times) { await sendToSameThread("sendMessage", token, msg, { text: `–î–ª—è ${cls} –µ—â—ë –Ω–µ –∑–∞–¥–∞–Ω–æ –≤—Ä–µ–º—è –∑–∞–±–æ—Ä–∞. –ö–æ–º–∞–Ω–¥–∞ —É—á–∏—Ç–µ–ª—è: /pickup_set ${cls} –ü–ù=13:30,–í–¢=12:40,...` }); return; }

  const d = day || todayRuShort();
  const t = rec.pickup_times[d];
  if (!t) { await sendToSameThread("sendMessage", token, msg, { text: `–î–ª—è ${cls} –Ω–∞ ${dayNameFull(d)} –≤—Ä–µ–º—è –Ω–µ –∑–∞–¥–∞–Ω–æ.` }); return; }
  await sendToSameThread("sendMessage", token, msg, { text: `${cls}: ${dayNameFull(d)} ‚Äî –∑–∞–±–∏—Ä–∞—Ç—å –≤ ${t}` });
}
async function cmdPickupWeek(token, msg, state, args) {
  let cls = pickClassFromChat(state, msg.chat.id);
  if (!cls && msg.chat.type === "private") {
    const found = parseClassFrom(args || "");
    if (!found) { await sendSafe("sendMessage", token, { chat_id: msg.chat.id, text: "–£–∫–∞–∂–∏—Ç–µ –∫–ª–∞—Å—Å: /pickup_week 1–ë" }); return; }
    cls = found;
  }
  if (!cls) { await sendToSameThread("sendMessage", token, msg, { text: "–ß–∞—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–ª–∞—Å—Å—É. /link_general 1–ë" }); return; }

  const rec = state.classes[cls] || {};
  if (!rec.pickup_times) { await sendToSameThread("sendMessage", token, msg, { text: `–î–ª—è ${cls} –µ—â—ë –Ω–µ –∑–∞–¥–∞–Ω–æ –≤—Ä–µ–º—è –∑–∞–±–æ—Ä–∞. –ö–æ–º–∞–Ω–¥–∞ —É—á–∏—Ç–µ–ª—è: /pickup_set ${cls} –ü–ù=13:30,–í–¢=12:40,...` }); return; }

  const text = `–í—Ä–µ–º—è –∑–∞–±–æ—Ä–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é ‚Äî ${cls}:\n` + formatPickupWeek(rec.pickup_times);
  await sendToSameThread("sendMessage", token, msg, { text });
}

/* ---------- –ü–µ—Ä—Å–æ–Ω–∞/–∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã/–ø–æ–ª–∏—Ç–∏–∫–∞ ---------- */
async function cmdPersonaSet(env, token, msg, state, args) {
  const isTeacher = state.teacher_id && state.teacher_id === msg.from.id;
  if (!isTeacher) return sendToSameThread("sendMessage", token, msg, { text: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—é." });
  const name = args.trim();
  if (!name) return sendToSameThread("sendMessage", token, msg, { text: "–£–∫–∞–∂–∏—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è: /persona_set –ò—Ä–∏–Ω–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞" });
  state.teacher_display_name = name; await saveState(env, state);
  return sendToSameThread("sendMessage", token, msg, { text: `–¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—á–∞—é –∫–∞–∫: ${name}` });
}
async function cmdAutoReply(env, token, msg, state, args) {
  const isTeacher = state.teacher_id && state.teacher_id === msg.from.id;
  if (!isTeacher) return sendToSameThread("sendMessage", token, msg, { text: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—é." });
  const v = (args||"").trim().toLowerCase();
  if (!["on","off"].includes(v)) return sendToSameThread("sendMessage", token, msg, { text: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /autoreply on|off" });
  state.autoreply_enabled = v === "on"; await saveState(env, state);
  return sendToSameThread("sendMessage", token, msg, { text: `–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã: ${state.autoreply_enabled?"–í–ö–õ":"–í–´–ö–õ"}` });
}
async function cmdPolicyAbsenceSet(env, token, msg, state, args) {
  const isTeacher = state.teacher_id && state.teacher_id === msg.from.id;
  if (!isTeacher) return sendToSameThread("sendMessage", token, msg, { text: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—é." });
  const txt = args.trim();
  if (!txt) return sendToSameThread("sendMessage", token, msg, { text: "–§–æ—Ä–º–∞—Ç: /policy_absence_set –¢–µ–∫—Å—Ç" });
  state.policy_absence = txt; await saveState(env, state);
  return sendToSameThread("sendMessage", token, msg, { text: "–ü–æ–ª–∏—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ" });
}

/* ---------- ¬´–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ¬ª –æ—Ç–≤–µ—Ç—ã (–±–µ–∑ –∫–æ–º–∞–Ω–¥) ---------- */
function hasAny(text, arr){ const t = normalize(text); return arr.some(k=>t.includes(normalize(k))); }
function mentionName(msg){ return msg?.from?.username ? `@${msg.from.username}, ` : ""; }

function extractTimeHHMM(text) { const m = text.match(/(\b[01]?\d|2[0-3]):([0-5]\d)\b/); return m ? `${m[1].padStart(2,"0")}:${m[2]}` : null; }
function extractTimeFlexible(text) { const m = text.match(/\b([01]?\d|2[0-3])[.: \-]?([0-5]\d)\b/); return m ? `${m[1].padStart(2,"0")}:${m[2]}` : null; }
function extractDelayMinutes(text) { const m = normalize(text).match(/\b–Ω–∞\s+(\d{1,2})\s*–º–∏–Ω/); return m ? parseInt(m[1], 10) : null; }
function guessChildName(text) {
  const m = text.match(/([–ê-–Ø–Å][–∞-—è—ë]+)(?=\s+(–∑–∞–±–æ–ª–µ–ª|–∑–∞–±–æ–ª–µ–ª–∞|–±–æ–ª–µ–µ—Ç|–Ω–µ\s+–ø—Ä–∏–¥[–µ—ë]—Ç|–æ–ø–æ–∑–¥–∞[–µ—ë]—Ç|–æ–ø–∞–∑–¥—ã–≤–∞|–∑–∞–¥–µ—Ä–∂–∏–≤–∞|—É–π–¥[–µ—ë]—Ç|–æ—Ç–ø—É—Å—Ç|–Ω–µ\s+–±—É–¥–µ—Ç|–ø—Ä–æ–ø—É—Å—Ç–∏—Ç))/i);
  return m ? m[1] : null;
}

async function handleNaturalMessage(env, token, msg, state) {
  const textRaw = (msg.text || "").trim();
  if (!textRaw) return false;
  const t = normalize(textRaw);
  const prefix = `${mentionName(msg)}${state.teacher_display_name}: `;

  // –ü—Ä–∏–≤–µ—Ç/—Å–ø–∞—Å–∏–±–æ/–ø–æ–∫–∞
  if (state.autoreply_enabled) {
    if (/(^| )(–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ|–¥–æ–±—Ä—ã–π –¥–µ–Ω—å|–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ|–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä)( |!|$)/.test(t)) {
      await sendToSameThread("sendMessage", token, msg, { text: `${prefix}–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!` });
      return true;
    }
    if (/(^| )(—Å–ø–∞—Å–∏–±–æ|–±–ª–∞–≥–æ–¥–∞—Ä—é)( |!|$)/.test(t)) {
      await sendToSameThread("sendMessage", token, msg, { text: `${prefix}–ø–æ–∂–∞–ª—É–π—Å—Ç–∞!` });
      return true;
    }
    if (/(^| )(–ø–æ–∫–∞|–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è|–¥–æ—Å–≤–∏–¥–∞–Ω–∏—è|—Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è)( |!|$)/.test(t)) {
      await sendToSameThread("sendMessage", token, msg, { text: `${prefix}–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è!` });
      return true;
    }
  }

  // ====== –ú–µ–¥–∏–∞-–æ—Ç–≤–µ—Ç—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º ======
  const cls = pickClassFromChat(state, msg.chat.id);
  const rec = cls ? (state.classes[cls] || {}) : null;

  // –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤
  if (rec && hasAny(t, ["—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤","—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é","–∫–∞–∫–∏–µ –∑–∞–≤—Ç—Ä–∞ —É—Ä–æ–∫–∏","—É—Ä–æ–∫–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞","–∫–∞–∫–∏–µ —É—Ä–æ–∫–∏"])) {
    if (rec.schedule_file_id) {
      await sendToSameThread("sendMessage", token, msg, { text: `${prefix}–≤–æ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è ‚Äî –¥–æ–ø–æ–ª–Ω—é.` });
      await sendToSameThread("sendPhoto", token, msg, { photo: rec.schedule_file_id, caption: rec.schedule_caption || `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ${cls}` });
      return true;
    }
  }

  // –ê–≤—Ç–æ–±—É—Å—ã (–≥–æ—Ä–æ–¥/–æ–±—ã—á–Ω—ã–π)
  if (rec && hasAny(t, ["–∞–≤—Ç–æ–±—É—Å","–∞–≤—Ç–æ–±—É—Å—ã","—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å–æ–≤"])) {
    if (rec.bus_file_id) {
      await sendToSameThread("sendMessage", token, msg, { text: `${prefix}–≤–æ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å–æ–≤. –ï—Å–ª–∏ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ ‚Äî —Å–æ–æ–±—â—É –∑–∞—Ä–∞–Ω–µ–µ.` });
      await sendToSameThread("sendPhoto", token, msg, { photo: rec.bus_file_id, caption: rec.bus_caption || `–ê–≤—Ç–æ–±—É—Å—ã ${cls}` });
      return true;
    }
  }

  // –ü–æ–¥–≤–æ–∑ —Å –ø–æ—Å—ë–ª–∫–æ–≤
  if (rec && hasAny(t, ["–ø–æ–¥–≤–æ–∑","–ø–æ—Å–µ–ª–∫","–ø–æ—Å—ë–ª–∫","—Å –ø–æ—Å—ë–ª–∫–æ–≤","—Å –ø–æ—Å–µ–ª–∫–æ–≤","—Å –¥–µ—Ä–µ–≤–Ω–∏"])) {
    if (rec.rural_bus_file_id) {
      await sendToSameThread("sendMessage", token, msg, { text: `${prefix}–≤–æ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–≤–æ–∑–∞. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è ‚Äî —Å–æ–æ–±—â—É –∑–∞—Ä–∞–Ω–µ–µ.` });
      await sendToSameThread("sendPhoto", token, msg, { photo: rec.rural_bus_file_id, caption: rec.rural_bus_caption || `–ü–æ–¥–≤–æ–∑ ${cls}` });
      return true;
    }
  }

  // –ó–≤–æ–Ω–∫–∏ / –ø–µ—Ä–µ–º–µ–Ω—ã / –≤–æ —Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è 1/2/3 —É—Ä–æ–∫
  if (rec && (hasAny(t, ["–∑–≤–æ–Ω–∫–∏","—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤","–ø–µ—Ä–µ–º–µ–Ω–∞","–∫–æ–≥–¥–∞ –ø–µ—Ä–µ–º–µ–Ω–∞","–∫–æ–≥–¥–∞ –∑–≤–æ–Ω–æ–∫"]) || /\b(1|2|3|4|5|6|7)\s*—É—Ä–æ–∫(–∞|–æ–≤|)\b.*(–∫–æ–Ω—á–∞|–∑–∞–∫–∞–Ω—á)/.test(t))) {
    if (rec.rings_file_id) {
      await sendToSameThread("sendMessage", token, msg, { text: `${prefix}–≤–æ—Ç –≥—Ä–∞—Ñ–∏–∫ –∑–≤–æ–Ω–∫–æ–≤. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–º–µ–Ω—è–µ—Ç—Å—è ‚Äî —Å–æ–æ–±—â—É.` });
      await sendToSameThread("sendPhoto", token, msg, { photo: rec.rings_file_id, caption: rec.rings_caption || `–ó–≤–æ–Ω–∫–∏ ${cls}` });
      return true;
    }
  }

  // –ö–∞—Ä—Ç–∞: –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
  if (rec && (hasAny(t, ["–ø–æ–ø–æ–ª–Ω","–ø–æ–ø–ª–∞—Ç","–∫–∞–∫ –ø–æ–ª–æ–∂–∏—Ç—å","–∫–∞–∫ –∑–∞—á–∏—Å–ª–∏—Ç—å"]) && hasAny(t, ["–∫–∞—Ä—Ç–∞","—à–∫–æ–ª—å–Ω"])) ) {
    if (rec.card_topup_file_id) {
      await sendToSameThread("sendMessage", token, msg, { text: `${prefix}–≤–æ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é –∫–∞—Ä—Ç—ã. –ï—Å–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ.` });
      await sendToSameThread("sendVideo", token, msg, { video: rec.card_topup_file_id, caption: rec.card_topup_caption || `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã ${cls}` }).then(async r=>{
        if(!r || r?.ok===false) {
          // –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª –Ω–µ video (–Ω–∞–ø—Ä–∏–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Ñ–æ—Ç–æ)
          await sendToSameThread("sendDocument", token, msg, { document: rec.card_topup_file_id, caption: rec.card_topup_caption || `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã ${cls}` });
        }
      });
      return true;
    }
  }

  // –ö–∞—Ä—Ç–∞: –±–∞–ª–∞–Ω—Å
  if (rec && (hasAny(t, ["–±–∞–ª–∞–Ω—Å","–æ—Å—Ç–∞—Ç–æ–∫","—Å–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥"]) && hasAny(t, ["–∫–∞—Ä—Ç–∞","—à–∫–æ–ª—å–Ω"])) ) {
    if (rec.card_balance_file_id) {
      await sendToSameThread("sendMessage", token, msg, { text: `${prefix}–≤–æ—Ç –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å —à–∫–æ–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã.` });
      await sendToSameThread("sendVideo", token, msg, { video: rec.card_balance_file_id, caption: rec.card_balance_caption || `–ë–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã ${cls}` }).then(async r=>{
        if(!r || r?.ok===false) {
          await sendToSameThread("sendDocument", token, msg, { document: rec.card_balance_file_id, caption: rec.card_balance_caption || `–ë–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã ${cls}` });
        }
      });
      return true;
    }
  }

  // –ë–æ–ª–µ–∑–Ω—å / –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ
  const isIll = /(–∑–∞–±–æ–ª–µ–ª|–∑–∞–±–æ–ª–µ–ª–∞|–±–æ–ª–µ–µ—Ç|–ø—Ä–æ—Å—Ç—É–¥|–æ—Ä–≤–∏|—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä|–Ω–∞—Å–º–æ—Ä–∫|—Å–æ–ø–ª|–∫–∞—à–µ–ª)/.test(t);
  const isAbsent = /(–Ω–µ –±—É–¥–µ—Ç|–ø—Ä–æ–ø—É—Å—Ç–∏—Ç|–Ω–µ –ø—Ä–∏–¥[–µ—ë]–º|–Ω–µ –ø—Ä–∏–¥–µ—Ç|–Ω–µ –ø—Ä–∏–π–¥–µ–º|–æ—Ç—Å—É—Ç—Å—Ç–≤|–ø—Ä–æ–ø—É—Å–∫)/.test(t);

  if (isIll) {
    const name = guessChildName(textRaw) || "–†–µ–±—ë–Ω–æ–∫";
    await sendToSameThread("sendMessage", token, msg, { text: `${prefix}${name}, ${state.policy_absence}` });
    if (state.teacher_id) await sendSafe("sendMessage", token, { chat_id: state.teacher_id, text: `üîî –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –±–æ–ª–µ–∑–Ω–∏: –∏–∑ —á–∞—Ç–∞ ${msg.chat.title || msg.chat.id}\n"${textRaw}"` });
    return true;
  }
  if (isAbsent) {
    await sendToSameThread("sendMessage", token, msg, { text: `${prefix}–ü—Ä–∏–Ω—è–ª–∞. –°–æ–æ–±—â–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—á–∏–Ω—É –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.` });
    if (state.teacher_id) await sendSafe("sendMessage", token, { chat_id: state.teacher_id, text: `üîî –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏: –∏–∑ —á–∞—Ç–∞ ${msg.chat.title || msg.chat.id}\n"${textRaw}"` });
    return true;
  }

  // –û–ø–æ–∑–¥–∞–Ω–∏–µ
  if (/(–æ–ø–∞–∑–¥—ã–≤–∞|–æ–ø–æ–∑–¥–∞|–∑–∞–¥–µ—Ä–∂–∏–≤–∞|–±—É–¥–µ–º –ø–æ–∑–∂–µ|–±—É–¥—É –ø–æ–∑–∂–µ|–ø–æ–∑–∂–µ –Ω–∞)/.test(t)) {
    const tm = extractTimeHHMM(textRaw) || extractTimeFlexible(textRaw);
    const delay = extractDelayMinutes(textRaw);
    const when = tm ? `–∫ ${tm}` : (delay ? `–Ω–∞ ~${delay} –º–∏–Ω` : "–Ω–µ–º–Ω–æ–≥–æ");
    await sendToSameThread("sendMessage", token, msg, { text: `${prefix}–ø—Ä–∏–Ω—è–ª–∞, –ø–æ–¥–æ–∂–¥—ë–º ${when}.` });
    if (state.teacher_id) await sendSafe("sendMessage", token, { chat_id: state.teacher_id, text: `–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–æ–∑–¥–∞–Ω–∏–∏:\n"${textRaw}"` });
    return true;
  }

  // –í–æ —Å–∫–æ–ª—å–∫–æ –∑–∞–±–∏—Ä–∞—Ç—å ‚Äî –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º pickup, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–æ
  if (/(–≤–æ —Å–∫–æ–ª—å–∫–æ|—Å–∫–æ–ª—å–∫–æ)\s+(—Å–µ–≥–æ–¥–Ω—è|—Å–µ–≥–æ–Ω—è)?.*(–∑–∞–±–∏—Ä|–∑–∞–±—Ä–∞—Ç—å|–∑–∞–±–∏—Ä–∞—Ç—å)/.test(t)) {
    if (cls && state.classes[cls]?.pickup_times) {
      await cmdPickup(token, msg, state, "");
      return true;
    }
  }

  // –ù–ò–ß–ï–ì–û –Ω–µ –∑–Ω–∞–µ–º ‚Äî –º–æ–ª—á–∏–º (–Ω–µ –æ—Ç–≤–µ—á–∞–µ–º).
  return false;
}

/* ---------- –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞ –æ—Ç —É—á–∏—Ç–µ–ª—è ---------- */
function hasWord(s, w){ return normalize(s).includes(normalize(w)); }

async function saveMediaRef(rec, kind, fileId, caption) {
  switch (kind) {
    case "schedule": rec.schedule_file_id = fileId; rec.schedule_caption = caption; break;
    case "buses": rec.bus_file_id = fileId; rec.bus_caption = caption; break;
    case "rural": rec.rural_bus_file_id = fileId; rec.rural_bus_caption = caption; break;
    case "rings": rec.rings_file_id = fileId; rec.rings_caption = caption; break;
    case "card_topup": rec.card_topup_file_id = fileId; rec.card_topup_caption = caption; break;
    case "card_balance": rec.card_balance_file_id = fileId; rec.card_balance_caption = caption; break;
  }
}

async function handleMediaFromTeacher(env, token, msg, state) {
  if (msg.chat.type !== "private") return;

  if (!state.teacher_id || state.teacher_id !== msg.from.id) {
    await sendSafe("sendMessage", token, { chat_id: msg.chat.id, text: "–¢–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å: –≤–≤–µ–¥–∏—Ç–µ /iam_teacher –≤ –ª–∏—á–∫–µ." });
    return;
  }
  const caption = msg.caption || "";
  const cls = parseClassFrom(caption);
  if (!cls) { await sendSafe("sendMessage", token, { chat_id: msg.chat.id, text: "–î–æ–±–∞–≤—å—Ç–µ –≤ –ø–æ–¥–ø–∏—Å—å –∫–ª–∞—Å—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: #1–ë ..." }); return; }
  ensureClass(state, cls);
  const rec = state.classes[cls];

  // —Ñ–æ—Ç–æ
  let fileId = null;
  if (msg.photo?.length) fileId = extractLargestPhotoId(msg.photo);
  // –≤–∏–¥–µ–æ/–∞–Ω–∏–º–∞—Ü–∏—è/–¥–æ–∫—É–º–µ–Ω—Ç
  if (!fileId && msg.video) fileId = msg.video.file_id;
  if (!fileId && msg.animation) fileId = msg.animation.file_id;
  if (!fileId && msg.document) fileId = msg.document.file_id;

  if (!fileId) {
    await sendSafe("sendMessage", token, { chat_id: msg.chat.id, text: "–ù–µ –Ω–∞—à—ë–ª —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–≥–∏—Ñ/–¥–æ–∫)." });
    return;
  }

  // –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –ø–æ–¥–ø–∏—Å–∏
  const n = normalize(caption);
  let kind = null;
  if (hasWord(n, "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ") && hasWord(n, "–Ω–µ–¥–µ–ª")) kind = "schedule";
  else if (hasWord(n, "–ø–æ–¥–≤–æ–∑")) kind = "rural";
  else if (hasWord(n, "–∑–≤–æ–Ω–∫")) kind = "rings";
  else if (hasWord(n, "–∞–≤—Ç–æ–±—É—Å")) kind = "buses";
  else if (hasWord(n, "–ø–æ–ø–æ–ª–Ω") && hasWord(n, "–∫–∞—Ä—Ç")) kind = "card_topup";
  else if (hasWord(n, "–±–∞–ª–∞–Ω—Å") && hasWord(n, "–∫–∞—Ä—Ç")) kind = "card_balance";

  if (!kind) {
    await sendSafe("sendMessage", token, { chat_id: msg.chat.id, text: "–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª —Ç–∏–ø. –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –ø–æ–¥–ø–∏—Å–∏: ¬´—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é¬ª, ¬´–∞–≤—Ç–æ–±—É—Å—ã¬ª, ¬´–ø–æ–¥–≤–æ–∑¬ª, ¬´–∑–≤–æ–Ω–∫–∏¬ª, ¬´–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã¬ª, ¬´–±–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã¬ª." });
    return;
  }

  await saveMediaRef(rec, kind, fileId, caption);
  await saveState(env, state);

  // –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ —á–∞—Ç—ã, –µ—Å–ª–∏ —ç—Ç–æ ¬´–ø—É–±–ª–∏—á–Ω—ã–π¬ª —Ç–∏–ø
  const targets = [rec.general_chat_id, rec.parents_chat_id].filter(Boolean);
  const isPublic = ["schedule","buses","rural","rings"].includes(kind);
  if (!targets.length || !isPublic) {
    await sendSafe("sendMessage", token, { chat_id: msg.chat.id, text: `–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ (${cls} ‚Äî ${kind}).${isPublic ? " –ß–∞—Ç—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã." : ""}` });
    return;
  }

  for (const chatId of targets) {
    if (["schedule","buses","rural","rings"].includes(kind)) {
      await sendSafe("sendPhoto", token, { chat_id: chatId, photo: fileId, caption });
    } else {
      await sendSafe("sendMessage", token, { chat_id: chatId, text: caption || "–ú–∞—Ç–µ—Ä–∏–∞–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω." });
    }
  }
  await sendSafe("sendMessage", token, { chat_id: msg.chat.id, text: `–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ ${targets.length} —á–∞—Ç(–∞/–æ–≤) ‚úÖ` });
}

/* ---------- –†–æ—É—Ç–µ—Ä –∫–æ–º–∞–Ω–¥ ---------- */
async function handleCommand(env, token, msg, state) {
  const text = (msg.text || "").trim();
  const [cmd, ...rest] = text.split(/\s+/);
  const args = rest.join(" ").trim();

  switch (cmd) {
    case "/start": await cmdStart(token, msg.chat.id); return true;
    case "/ping": await cmdPing(token, msg); return true;

    case "/iam_teacher": await cmdIamTeacher(env, token, msg, state); return true;
    case "/link_general": await cmdLink(token, msg, state, args, "link_general"); await saveState(env, state); return true;
    case "/link_parents": await cmdLink(token, msg, state, args, "link_parents"); await saveState(env, state); return true;

    case "/schedule": await cmdSchedule(token, msg, state, args); return true;
    case "/buses": await cmdBuses(token, msg, state, args); return true;
    case "/rural_buses": await cmdRuralBuses(token, msg, state, args); return true;
    case "/rings": await cmdRings(token, msg, state, args); return true;

    case "/pickup_set": await cmdPickupSet(env, token, msg, state, args); return true;
    case "/pickup": await cmdPickup(token, msg, state, args); return true;
    case "/pickup_week": await cmdPickupWeek(token, msg, state, args); return true;

    case "/persona_set": await cmdPersonaSet(env, token, msg, state, args); return true;
    case "/autoreply": await cmdAutoReply(env, token, msg, state, args); return true;
    case "/policy_absence_set": await cmdPolicyAbsenceSet(env, token, msg, state, args); return true;

    default: return false;
  }
}

/* ---------- Worker entry ---------- */
export default {
  async fetch(request, env) {
    const url = new URL(request.url);
    const token = env.BOT_TOKEN;

    if (url.pathname === "/") return OK("ok");

    if (url.pathname === "/init" && request.method === "GET") {
      if (!token || !env.PUBLIC_URL) return NO(400, "Need BOT_TOKEN and PUBLIC_URL");
      const res = await tg("setWebhook", token, { url: `${env.PUBLIC_URL}/webhook/${token}`, allowed_updates: ["message","edited_message","callback_query","channel_post","my_chat_member","chat_member"] });
      return new Response(JSON.stringify(res), { status: 200, headers: { "content-type": "application/json" } });
    }

    if (url.pathname === `/webhook/${token}` && request.method === "POST") {
      const update = await request.json();
      const state = await loadState(env);

      // –õ–æ–≥–∏ –∫–ª—é—á–µ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
      if (update.message?.message_id) {
        console.log("UPDATE kind= message ids=", JSON.stringify({ chat: update.message.chat?.id, from: update.message.from?.id }));
      }

      // –ö–æ–º–∞–Ω–¥—ã/—Ç–µ–∫—Å—Ç
      if (update.message?.text) {
        const handled = await handleCommand(env, token, update.message, state);
        if (handled) return OK();

        const human = await handleNaturalMessage(env, token, update.message, state);
        if (human) return OK();

        // –Ω–∏—á–µ–≥–æ –Ω–µ –∑–Ω–∞–µ–º ‚Äî –º–æ–ª—á–∏–º
        return OK();
      }

      // –ú–µ–¥–∏–∞: —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–¥–æ–∫/–≥–∏—Ñ ‚Äî —Ç–æ–ª—å–∫–æ –æ—Ç —É—á–∏—Ç–µ–ª—è –≤ –õ–°
      if (update.message && (update.message.photo || update.message.video || update.message.animation || update.message.document)) {
        await handleMediaFromTeacher(env, token, update.message, state);
        return OK();
      }

      // (–Ω–∞ –±—É–¥—É—â–µ–µ) callback_query
      if (update.callback_query) {
        await sendSafe("answerCallbackQuery", token, { callback_query_id: update.callback_query.id });
        return OK();
      }

      return OK();
    }

    return NO();
  },
};
