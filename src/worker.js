// Cloudflare Worker: Telegram-–±–æ—Ç "–ò—Ä–∏–Ω–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞" (–∫–ª–∞—Å—Å/—à–∫–æ–ª–∞)
// Bindings (Dashboard ‚Üí Workers ‚Üí Settings):
// - Secret: BOT_TOKEN
// - Variable (plain text): PUBLIC_URL (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://teacher-helper.<account>.workers.dev) ‚Äî –ë–ï–ó –∑–∞–≤–µ—Ä—à–∞—é—â–µ–≥–æ "/"
// - KV Namespace: KV_BOT
//
// –í @BotFather: /setprivacy ‚Üí Disable
//
// –ß—Ç–æ –≤–Ω—É—Ç—Ä–∏:
// ‚Ä¢ Small talk ¬´–∫–∞–∫ —É—á–∏—Ç–µ–ª—å¬ª + —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∏—Ç–µ–ª—é –ø–æ –≤–∞–∂–Ω—ã–º –ø–æ–≤–æ–¥–∞–º
// ‚Ä¢ /teach (—Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞) + –º–∏–Ω–∏-–∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞ 10 —Ä–µ–ø–ª–∏–∫
// ‚Ä¢ –†–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: —Ç—Ä–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö ‚Äî —É—Ä–æ–∫–∏ (main), –ø—Ä–æ–¥–ª—ë–Ω–∫–∞/–ì–ü–î (gpd), –ø–æ–ª–¥–Ω–∏–∫ (snack)
// ‚Ä¢ –¢—Ä–∏–≥–≥–µ—Ä—ã –ø–æ —Å–≤–æ–±–æ–¥–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É –¥–ª—è —Ñ–æ—Ç–æ: —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ / –∞–≤—Ç–æ–±—É—Å—ã / –∑–≤–æ–Ω–∫–∏
// ‚Ä¢ –ú–µ–¥–∏–∞—Ç–µ–∫–∞ (—Å–∫—Ä–∏–Ω–∫–∞—Å—Ç—ã): —Ç–µ–º—ã topup (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã), balance (–ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞)
// ‚Ä¢ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: –º–æ–ª—á–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç; –ø–æ–¥–ø–∏—Å—å —É—á–∏—Ç–µ–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∞ (–º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å /prefix on)

const OK = (b = "ok") => new Response(b, { status: 200 });
const NO = (code = 404, b = "not found") => new Response(b, { status: code });

/* ---------------- Telegram API ---------------- */
async function tg(method, token, payload) {
  const res = await fetch(`https://api.telegram.org/bot${token}/${method}`, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify(payload ?? {}),
  });
  return res.json();
}
async function sendSafe(method, token, payload) {
  try {
    const r = await tg(method, token, payload);
    console.log("SEND", method, JSON.stringify(payload), "=>", JSON.stringify(r));
    return r;
  } catch (e) {
    console.log("SEND ERROR", method, e?.message || String(e));
    return null;
  }
}
async function sendToSameThread(method, token, msg, payload = {}) {
  const p = { ...payload, chat_id: msg.chat.id };
  if (
    (msg.chat?.type === "supergroup" || msg.chat?.type === "group") &&
    msg.is_topic_message &&
    msg.message_thread_id
  ) {
    p.message_thread_id = msg.message_thread_id;
  }
  return sendSafe(method, token, p);
}

/* ---------------- KV: —Å–æ—Å—Ç–æ—è–Ω–∏–µ ---------------- */
async function loadState(env) {
  const raw = await env.KV_BOT.get("state");
  if (!raw) {
    return {
      teacher_id: null,
      teacher_display_name: "–ò—Ä–∏–Ω–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞",
      prefix_enabled: false, // –ø–æ–¥–ø–∏—Å—å –≤ –æ—Ç–≤–µ—Ç–∞—Ö –≤—ã–∫–ª—é—á–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      autoreply_enabled: true,
      forward_unknown_to_teacher: false, // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ù–ï –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
      policy_absence: "–í—ã–∑–¥–æ—Ä–∞–≤–ª–∏–≤–∞–π—Ç–µ üôå –ü—Ä–∏–¥–∏—Ç–µ –≤ —à–∫–æ–ª—É —Å–æ —Å–ø—Ä–∞–≤–∫–æ–π –æ—Ç –≤—Ä–∞—á–∞.",
      classes: {}, // "1–ë": {...}
      faq: [], // [{q,a,kw,cat}]
      teach: [], // [{pat, ans}]
      // –º–µ–¥–∏–∞—Ç–µ–∫–∞ –ø–æ –∫–ª–∞—Å—Å–∞–º: media["1–ë"] = { topup:[{kind,file_id,caption}], balance:[...] }
      media: {}
    };
  }
  try {
    const s = JSON.parse(raw);
    s.teacher_display_name ||= "–ò—Ä–∏–Ω–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞";
    if (typeof s.prefix_enabled === "undefined") s.prefix_enabled = false;
    if (typeof s.autoreply_enabled === "undefined") s.autoreply_enabled = true;
    if (typeof s.forward_unknown_to_teacher === "undefined") s.forward_unknown_to_teacher = false;
    s.policy_absence ||= "–í—ã–∑–¥–æ—Ä–∞–≤–ª–∏–≤–∞–π—Ç–µ üôå –ü—Ä–∏–¥–∏—Ç–µ –≤ —à–∫–æ–ª—É —Å–æ —Å–ø—Ä–∞–≤–∫–æ–π –æ—Ç –≤—Ä–∞—á–∞.";
    s.classes ||= {};
    s.faq ||= [];
    s.teach ||= [];
    s.media ||= {};
    return s;
  } catch {
    return {
      teacher_id: null,
      teacher_display_name: "–ò—Ä–∏–Ω–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞",
      prefix_enabled: false,
      autoreply_enabled: true,
      forward_unknown_to_teacher: false,
      policy_absence: "–í—ã–∑–¥–æ—Ä–∞–≤–ª–∏–≤–∞–π—Ç–µ üôå –ü—Ä–∏–¥–∏—Ç–µ –≤ —à–∫–æ–ª—É —Å–æ —Å–ø—Ä–∞–≤–∫–æ–π –æ—Ç –≤—Ä–∞—á–∞.",
      classes: {},
      faq: [],
      teach: [],
      media: {}
    };
  }
}
async function saveState(env, state) { await env.KV_BOT.put("state", JSON.stringify(state)); }

ffunction ensureClass(state, cls) {
if (!state.classes) state.classes = {};

// –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const defaults = {
// –ø—Ä–∏–≤—è–∑–∫–∏ —á–∞—Ç–æ–≤
    general_chat_id: null,
// –º–µ–¥–∏–∞: —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤, –∑–≤–æ–Ω–∫–æ–≤, –∞–≤—Ç–æ–±—É—Å
    schedule_file_id: null,
    schedule_caption: null,
    bells_file_id: null,
    bells_caption: null,
    bus_file_id: null,
    bus_caption: null,
// —Ç—Ä–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö –Ω–∞–±–æ—Ä–∞ "–≤—Ä–µ–º—ë–Ω"
    pickup_times: null, // —É—Ä–æ–∫–∏ (–æ—Å–Ω–æ–≤–Ω–æ–µ)
    aftercare_times: null, // –ø—Ä–æ–¥–ª—ë–Ω–∫–∞ / –ì–ü–î
    snack_times: null // –ø–æ–ª–¥–Ω–∏–∫

// —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –∫–ª–∞—Å—Å–∞, –Ω–µ –∑–∞—Ç–∏—Ä–∞—è —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–æ–ª—è
  state.classes[cls] = Object.assign({}, defaults, state.classes[cls] || {});

/* ---------------- –£—Ç–∏–ª–∏—Ç—ã ---------------- */
const DAYS = ["–í–°","–ü–ù","–í–¢","–°–†","–ß–¢","–ü–¢","–°–ë"];
const DAYS_FULL = ["–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ","–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–í—Ç–æ—Ä–Ω–∏–∫","–°—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä–≥","–ü—è—Ç–Ω–∏—Ü–∞","–°—É–±–±–æ—Ç–∞"];
const TZ = "Europe/Kaliningrad";

function normalize(s = "") {
  return s.toLowerCase()
    .replace(/—ë/g, "–µ")
    .replace(/[^a-z–∞-—è0-9\s#:+.()\-]/g, " ")
    .replace(/\s+/g, " ")
    .trim();
}
function parseClassFrom(text = "") {
  const m = text.match(/#?\s*([0-9]{1,2}\s*[–ê-–ØA-Z])/i);
  return m ? m[1].toUpperCase().replace(/\s+/g, "") : null;
}
function extractLargestPhotoId(photos = []) {
  if (!photos?.length) return null;
  const by = [...photos].sort((a, b) => (a.file_size || 0) - (b.file_size || 0));
  return by.at(-1)?.file_id || photos.at(-1)?.file_id || null;
}
function extractMediaFromMessage(msg) {
  if (msg.photo?.length) return { kind: "photo", file_id: extractLargestPhotoId(msg.photo) };
  if (msg.video?.file_id) return { kind: "video", file_id: msg.video.file_id };
  if (msg.document?.file_id) return { kind: "document", file_id: msg.document.file_id };
  if (msg.animation?.file_id) return { kind: "animation", file_id: msg.animation.file_id };
  return null;
}
function ruShortFromDate(d) {
  const idx = Number(new Date(d.toLocaleString("en-US", { timeZone: TZ })).getDay());
  return DAYS[idx];
}
function todayRuShort() { return ruShortFromDate(new Date()); }
function dayNameFull(short) { const i = DAYS.indexOf(short); return i >= 0 ? DAYS_FULL[i] : short; }
function dayShortFromInput(s = "") {
  const n = normalize(s);
  if (n === "—Å–µ–≥–æ–¥–Ω—è") return todayRuShort();
  if (n === "–∑–∞–≤—Ç—Ä–∞") { const d = new Date(); d.setUTCMinutes(d.getUTCMinutes() + 24*60); return ruShortFromDate(d); }
  const map = {
    "–ø–Ω":"–ü–ù","–ø–æ–Ω":"–ü–ù","–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫":"–ü–ù","mon":"–ü–ù",
    "–≤—Ç":"–í–¢","–≤—Ç–æ—Ä–Ω–∏–∫":"–í–¢","tue":"–í–¢",
    "—Å—Ä":"–°–†","—Å—Ä–µ–¥–∞":"–°–†","wed":"–°–†",
    "—á—Ç":"–ß–¢","—á–µ—Ç–≤–µ—Ä–≥":"–ß–¢","thu":"–ß–¢",
    "–ø—Ç":"–ü–¢","–ø—è—Ç–Ω–∏—Ü–∞":"–ü–¢","fri":"–ü–¢",
    "—Å–±":"–°–ë","—Å—É–±–±–æ—Ç–∞":"–°–ë","sat":"–°–ë",
    "–≤—Å":"–í–°","–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ":"–í–°","sun":"–í–°",
  };
  return map[n] || null;
}
function pickClassFromChat(state, chatId) {
  for (const [k, v] of Object.entries(state.classes || {})) {
    if (v.general_chat_id === chatId || v.parents_chat_id === chatId) return k;
  }
  return "1–ë"; // –∫–ª–∞—Å—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
}
function formatPickupWeek(mapping) {
  const order = ["–ü–ù","–í–¢","–°–†","–ß–¢","–ü–¢","–°–ë","–í–°"];
  return order.map(d => `${d} ‚Äî ${mapping?.[d] || "‚Äî"}`).join("\n");
}
// –û–ø—Ä–µ–¥–µ–ª—è–µ–º ¬´—Å—Ü–µ–Ω–∞—Ä–∏–π¬ª –ø–æ —Ç–µ–∫—Å—Ç—É: —É—Ä–æ–∫–∏ / –ø—Ä–æ–¥–ª—ë–Ω–∫–∞ / –ø–æ–ª–¥–Ω–∏–∫
function detectScope(raw = "") {
  const n = normalize(raw);
  if (/\b(–ø—Ä–æ–¥–ª[–µ—ë]–Ω–∫|–≥–ø–¥)\b/.test(n)) return "aftercare"; // –ø—Ä–æ–¥–ª—ë–Ω–∫–∞ / –ì–ü–î
  if (/\b(–ø–æ–ª–¥–Ω–∏–∫)\b/.test(n)) return "snack"; // –ø–æ–ª–¥–Ω–∏–∫
  return "main"; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî —É—Ä–æ–∫–∏
}

// –ö—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ state.classes[cls]
function mappingFieldByScope(scope) {
  if (scope === "aftercare") return "aftercare_times";
  if (scope === "snack") return "snack_times";
  return "pickup_times";
}

// –ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –∏–º—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function prettyNameByScope(scope) {
  if (scope === "aftercare") return "–ø—Ä–æ–¥–ª—ë–Ω–∫–∞";
  if (scope === "snack") return "–ø–æ–ª–¥–Ω–∏–∫";
  return "—É—Ä–æ–∫–∏";
}

/* ---- –ê–¥—Ä–µ—Å–∞—Ü–∏—è –∫ —Ä–æ–¥–∏—Ç–µ–ª—é ---- */
function userDisplay(u) {
  if (!u) return "";
  if (u.username) return `@${u.username}`;
  const name = [u.first_name, u.last_name].filter(Boolean).join(" ").trim();
  return name || "";
}
function prefixText(state, msg) {
  if (!state.prefix_enabled) return ""; // –ø–æ–¥–ø–∏—Å—å –≤—ã–∫–ª—é—á–µ–Ω–∞
  const disp = userDisplay(msg.from || null);
  const who = state.teacher_display_name || "–£—á–∏—Ç–µ–ª—å";
  return (disp ? `${disp}, ` : "") + `${who}: `;
}

/* ---------------- –ú–∏–Ω–∏-–∫–æ–Ω—Ç–µ–∫—Å—Ç (KV) ---------------- */
function ctxKey(msg) {
  const chat = msg.chat.id;
  const th = (msg.is_topic_message && msg.message_thread_id) ? msg.message_thread_id : 0;
  return `ctx::${chat}::${th}`;
}
async function rememberContext(env, msg, role, text) {
  const key = ctxKey(msg);
  const raw = await env.KV_BOT.get(key);
  let arr = [];
  if (raw) try { arr = JSON.parse(raw) || []; } catch { arr = []; }
  arr.push({ t: Date.now(), role, text: (text||"").slice(0, 800) });
  if (arr.length > 10) arr = arr.slice(arr.length - 10);
  await env.KV_BOT.put(key, JSON.stringify(arr));
}
async function getContext(env, msg) {
  const key = ctxKey(msg);
  const raw = await env.KV_BOT.get(key);
  if (!raw) return [];
  try { return JSON.parse(raw) || []; } catch { return []; }
}

/* ---------------- –ü–∞—Ä—Å–µ—Ä—ã –≤—Ä–µ–º–µ–Ω–∏ ---------------- */
function parsePickupMapping(str) {
  const out = {};
  const parts = str.split(/[;,]/).map(s=>s.trim()).filter(Boolean);
  for (const p of parts) {
    const [kRaw, vRaw] = p.split("=").map(s=>s.trim());
    if (!kRaw || !vRaw) continue;
    const k = dayShortFromInput(kRaw) || kRaw.toUpperCase().slice(0,2);
    if (!DAYS.includes(k)) continue;
    if (!/^\d{1,2}:\d{2}$/.test(vRaw)) continue;
    out[k] = vRaw;
  }
  return Object.keys(out).length ? out : null;
}
function resolvePickupKindByText(text="") {
  const n = normalize(text);
  if (/(–≥–ø–¥|–ø—Ä–æ–¥–ª[–µ—ë]–Ω–∫)/.test(n)) return "gpd";
  if (/–ø–æ–ª–¥–Ω–∏–∫/.test(n)) return "snack";
  return "main";
}
function pickupLabel(kind) {
  return kind==="gpd" ? "–ø—Ä–æ–¥–ª—ë–Ω–∫–∞" : kind==="snack" ? "–ø–æ–ª–¥–Ω–∏–∫" : "—É—Ä–æ–∫–∏";
}

/* ---------------- FAQ/Teach ---------------- */
function scoreMatch(text, kwList) {
  const t = " " + normalize(text) + " ";
  let score = 0;
  for (const kw of kwList || []) {
    const k = " " + normalize(kw) + " ";
    if (t.includes(k)) score += Math.min(k.length, 10);
  }
  return score;
}
function bestFaqAnswer(state, question) {
  if (!state.faq?.length) return null;
  const ranked = state.faq
    .map(it => ({ it, s: scoreMatch(question, it.kw || []) }))
    .sort((a, b) => b.s - a.s);
  if (!ranked[0] || ranked[0].s < 5) return null;
  return ranked[0].it;
}
function findTeachAnswer(state, question) {
  const qn = normalize(question);
  for (const r of state.teach || []) {
    const pn = normalize(r.pat);
    if (pn && qn.includes(pn)) return r.ans;
  }
  return null;
}

/* ---------------- –ö–æ–º–∞–Ω–¥—ã ---------------- */
async function cmdStart(token, chatId) {
  const text = [
    "–ö–æ–º–∞–Ω–¥—ã:",
    "‚Ä¢ /pickup_set <–ö–õ–ê–°–°> [—É—Ä–æ–∫–∏|–ø—Ä–æ–¥–ª—ë–Ω–∫–∞|–ø–æ–ª–¥–Ω–∏–∫] –ü–ù=13:30,–í–¢=12:40,... ‚Äî –∑–∞–¥–∞—Ç—å –≤—Ä–µ–º—è",
    "‚Ä¢ /pickup_week [–ö–õ–ê–°–°] [—É—Ä–æ–∫–∏|–ø—Ä–æ–¥–ª—ë–Ω–∫–∞|–ø–æ–ª–¥–Ω–∏–∫] ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –Ω–µ–¥–µ–ª—é",
    "‚Ä¢ /teach \"—à–∞–±–ª–æ–Ω\" => \"–æ—Ç–≤–µ—Ç\", /teach_list, /teach_del <‚Ññ>, /teach_clear",
    "‚Ä¢ /media_list [–ö–õ–ê–°–°], /media_del <—Ç–µ–º–∞> <‚Ññ|all> [–ö–õ–ê–°–°], /media_clear [–ö–õ–ê–°–°]",
    "",
    "–ê–¥–º–∏–Ω (—É—á–∏—Ç–µ–ª—å/—Ä–æ–¥–∫–æ–º):",
    "‚Ä¢ /iam_teacher ‚Äî –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è —É—á–∏—Ç–µ–ª–µ–º (–õ–°)",
    "‚Ä¢ /link_general <–ö–õ–ê–°–°> ‚Äî –ø—Ä–∏–≤—è–∑–∞—Ç—å –≠–¢–û–¢ —á–∞—Ç –∫–∞–∫ –æ–±—â–∏–π",
    "‚Ä¢ /link_parents <–ö–õ–ê–°–°> ‚Äî –ø—Ä–∏–≤—è–∑–∞—Ç—å –≠–¢–û–¢ —á–∞—Ç –∫–∞–∫ —á–∞—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π",
    "‚Ä¢ /persona_set –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ ‚Äî –æ—Ç —á—å–µ–≥–æ –∏–º–µ–Ω–∏ –æ—Ç–≤–µ—á–∞—Ç—å",
    "‚Ä¢ /prefix on|off ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å/—Å–∫—Ä—ã–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—å –≤ –æ—Ç–≤–µ—Ç–∞—Ö",
    "‚Ä¢ /autoreply on|off ‚Äî –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã ¬´–∫–∞–∫ —É—á–∏—Ç–µ–ª—å¬ª",
    "‚Ä¢ /forward_unknown on|off ‚Äî –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —É—á–∏—Ç–µ–ª—é",
    "‚Ä¢ /policy_absence_set –¢–µ–∫—Å—Ç ‚Äî –æ—Ç–≤–µ—Ç –ø—Ä–∏ –±–æ–ª–µ–∑–Ω–∏/–ø—Ä–æ–ø—É—Å–∫–µ",
    "",
    "–ó–∞–≥—Ä—É–∑–∫–∞ –≤ –õ–° –±–æ—Ç–∞:",
    "‚Ä¢ –§–æ—Ç–æ: #1–ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é ‚Äî —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ (—Ñ–æ—Ç–æ)",
    "‚Ä¢ –§–æ—Ç–æ: #1–ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ ‚Äî —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ (—Ñ–æ—Ç–æ)",
    "‚Ä¢ –§–æ—Ç–æ: #1–ë –∞–≤—Ç–æ–±—É—Å—ã ‚Äî —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å–æ–≤/–ø–æ–¥–≤–æ–∑ (—Ñ–æ—Ç–æ)",
    "‚Ä¢ –§–æ—Ç–æ/–≤–∏–¥–µ–æ: #1–ë –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–∞—Ä—Ç—É ‚Ä¶ ‚Äî —Ç–µ–º–∞ topup",
    "‚Ä¢ –§–æ—Ç–æ/–≤–∏–¥–µ–æ: #1–ë –±–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã ‚Ä¶ ‚Äî —Ç–µ–º–∞ balance",
  ].join("\n");
  await sendSafe("sendMessage", token, { chat_id: chatId, text });
}
async function cmdPing(token, msg) { await sendToSameThread("sendMessage", token, msg, { text: "pong ‚úÖ" }); }
async function cmdIamTeacher(env, token, msg, state) {
  if (msg.chat.type !== "private")
    return sendToSameThread("sendMessage", token, msg, { text: "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ." });
  state.teacher_id = msg.from.id; await saveState(env, state);
  await sendSafe("sendMessage", token, { chat_id: msg.chat.id, text: "–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã —É—á–∏—Ç–µ–ª–µ–º ‚úÖ" });
}
async function cmdLink(token, msg, state, args, kind) {
  const cls = parseClassFrom(args);
  if (!cls) return sendToSameThread("sendMessage", token, msg, { text: `–£–∫–∞–∂–∏—Ç–µ –∫–ª–∞—Å—Å, –ø—Ä–∏–º–µ—Ä: /${kind} 1–ë` });
  ensureClass(state, cls);
  state.classes[cls][kind === "link_general" ? "general_chat_id" : "parents_chat_id"] = msg.chat.id;
  await sendToSameThread("sendMessage", token, msg, { text: `–ü—Ä–∏–≤—è–∑–∞–Ω–æ: ${kind === "link_general" ? "–û–ë–©–ò–ô" : "–†–û–î–ò–¢–ï–õ–ò"} —á–∞—Ç –¥–ª—è ${cls} ‚úÖ` });
}

async function cmdPickupSet(env, token, msg, state, args) {
  const isTeacher = state.teacher_id && state.teacher_id === msg.from.id;
  if (!isTeacher)
    return sendToSameThread("sendMessage", token, msg, { text: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—é." });

  // 1) –ö–ª–∞—Å—Å ‚Äî –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤—ã–π ¬´—Ç–æ–∫–µ–Ω¬ª
  const parts = (args || "").trim().split(/\s+/).filter(Boolean);
  const cls = parseClassFrom(parts[0] || "");
  if (!cls)
    return sendToSameThread("sendMessage", token, msg, {
      text: '–§–æ—Ä–º–∞—Ç: /pickup_set 1–ë [–ø—Ä–æ–¥–ª—ë–Ω–∫–∞|–ø–æ–ª–¥–Ω–∏–∫] –ü–ù=13:30,–í–¢=12:40,... –∏–ª–∏ JSON',
    });

  ensureClass(state, cls);

  // 2) –í—Ç–æ—Ä–æ–π —Ç–æ–∫–µ–Ω ‚Äî –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π ¬´—Ç–∏–ø¬ª (–ø—Ä–æ–¥–ª—ë–Ω–∫–∞ / –ø–æ–ª–¥–Ω–∏–∫)
  let scope = "main";
  if (parts[1]) {
    const cand = detectScope(parts[1]);
    if (cand !== "main") scope = cand;
  }

  // 3) ¬´–•–≤–æ—Å—Ç¬ª (–ø–∞—Ä—ã –ü–ù=.. –∏–ª–∏ JSON) ‚Äî —ç—Ç–æ –≤—Å—ë –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ +,
  // –µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ (–ø—Ä–æ–¥–ª—ë–Ω–∫–∞/–ø–æ–ª–¥–Ω–∏–∫), —Ç–æ –∏ –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–≥–æ.
  const restStart =
    scope === "main" ? args.indexOf(parts[0]) + parts[0].length
                     : args.indexOf(parts[1]) + parts[1].length;
  const rest = args.slice(restStart).trim().replace(/^,/, "").trim();

  // 4) –†–∞–∑–±–æ—Ä –≤ mapping { –ü–ù: "12:15", –í–¢: "11:40", ... }
  let mapping = null;

  if (rest.startsWith("{")) {
    // JSON-—Ñ–æ—Ä–º–∞—Ç
    try {
      const obj = JSON.parse(rest);
      const m = {};
      for (const [k, v] of Object.entries(obj || {})) {
        const kk = dayShortFromInput(k) || k.toString().toUpperCase().slice(0, 2);
        if (DAYS.includes(kk) && /^\d{1,2}:\d{2}$/.test(String(v))) m[kk] = String(v);
      }
      mapping = Object.keys(m).length ? m : null;
    } catch {
      mapping = null;
    }
  } else {
    // –ü–∞—Ä—ã –≤–∏–¥–∞ "–ü–ù=12:15, –í–¢=11:40, ..."
    mapping = parsePickupMapping(rest);
  }

  if (!mapping)
    return sendToSameThread("sendMessage", token, msg, {
      text:
        '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–µ–º–µ–Ω–∞.\n–ü—Ä–∏–º–µ—Ä—ã:\n' +
        '/pickup_set 1–ë –ü–ù=12:15,–í–¢=11:40\n' +
        '/pickup_set 1–ë –ø—Ä–æ–¥–ª—ë–Ω–∫–∞ {"–ø–Ω":"13:40","–≤—Ç":"13:40"}',
    });

  // 5) –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω—É–∂–Ω–æ–µ –ø–æ–ª–µ –ø–æ ¬´—Å—Ü–µ–Ω–∞—Ä–∏—é¬ª
  const field = mappingFieldByScope(scope);
  const pretty = prettyNameByScope(scope);

  state.classes[cls][field] = mapping;
  await saveState(env, state);

  // 6) –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –∞–≤—Ç–æ-–ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ —á–∞—Ç—ã
  const pairs = Object.entries(mapping).map(([k, v]) => `${k}=${v}`).join(", ");
  await sendToSameThread("sendMessage", token, msg, {
    text: `–ì–æ—Ç–æ–≤–æ, ${pretty} –¥–ª—è ${cls}: ${pairs}`,
  });

  const rec = state.classes[cls];
  const label =
    scope === "aftercare" ? "–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è (–ø—Ä–æ–¥–ª—ë–Ω–∫–∞, " + cls + "):\n"
    : scope === "snack" ? "–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è (–ø–æ–ª–¥–Ω–∏–∫, " + cls + "):\n"
                           : "–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è (—É—Ä–æ–∫–∏, " + cls + "):\n";
  for (const chatId of [rec.general_chat_id, rec.parents_chat_id].filter(Boolean)) {
    await sendSafe("sendMessage", token, {
      chat_id: chatId,
      text: label + formatPickupWeek(mapping),
    });
  }
}

  ensureClass(state, cls);

  // —Ç–∏–ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî —É—Ä–æ–∫–∏ (main)
  let kind = "main";
  if (/^—É—Ä–æ–∫–∏$/i.test(parts[1])) kind = "main";
  else if (/^(–≥–ø–¥|–ø—Ä–æ–¥–ª[–µ—ë]–Ω–∫–∞)$/i.test(parts[1])) kind = "gpd";
  else if (/^–ø–æ–ª–¥–Ω–∏–∫$/i.test(parts[1])) kind = "snack";

  const restStart = (kind === "main") ? parts[0].length : (parts[0] + " " + parts[1]).length;
  const rest = args.trim().slice(args.indexOf(parts[0]) + restStart - parts[0].length).trim();

  let mapping = null;
  if (rest.startsWith("{")) {
    try {
      const obj = JSON.parse(rest);
      const m = {};
      for (const [k, v] of Object.entries(obj || {})) {
        const kk = dayShortFromInput(k) || k.toString().toUpperCase().slice(0,2);
        if (DAYS.includes(kk) && /^\d{1,2}:\d{2}$/.test(String(v))) m[kk] = String(v);
      }
      mapping = Object.keys(m).length ? m : null;
    } catch { mapping = null; }
  } else {
    mapping = parsePickupMapping(rest);
  }

  if (!mapping) return sendToSameThread("sendMessage", token, msg, { text: "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–µ–º–µ–Ω–∞. –ü—Ä–∏–º–µ—Ä: /pickup_set 1–ë –ø—Ä–æ–¥–ª—ë–Ω–∫–∞ –ü–ù=15:30,–í–¢=16:00" });

  state.classes[cls].pickup ||= { main:null, gpd:null, snack:null };
  state.classes[cls].pickup[kind] = mapping;
  await saveState(env, state);

  const pretty = Object.entries(mapping).map(([k,v])=>`${k}=${v}`).join(", ");
  await sendToSameThread("sendMessage", token, msg, { text: `–ì–æ—Ç–æ–≤–æ. ${pickupLabel(kind)} –¥–ª—è ${cls}: ${pretty}` });

  const rec = state.classes[cls];
  for (const chatId of [rec.general_chat_id, rec.parents_chat_id].filter(Boolean)) {
    await sendSafe("sendMessage", token, { chat_id: chatId, text: `–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è (${pickupLabel(kind)}, ${cls}):\n` + formatPickupWeek(mapping) });
  }
}

async function cmdPickupWeek(token, msg, state, args) {
  let cls = pickClassFromChat(state, msg.chat.id);
  if (!cls && msg.chat.type === "private") {
    const found = parseClassFrom(args || "");
    if (found) cls = found;
  }
  if (!cls) return sendToSameThread("sendMessage", token, msg, { text: "–ß–∞—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–ª–∞—Å—Å—É. /link_general 1–ë –∏–ª–∏ /link_parents 1–ë." });

  const kind = resolvePickupKindByText(args || "");
  const mapping = state.classes[cls]?.pickup?.[kind];
  if (!mapping) return sendToSameThread("sendMessage", token, msg, { text: `–î–ª—è ${cls} –Ω–∞ ¬´${pickupLabel(kind)}¬ª –≤—Ä–µ–º—è –µ—â—ë –Ω–µ –∑–∞–¥–∞–Ω–æ.` });

  const text = `–í—Ä–µ–º—è (${pickupLabel(kind)}) –Ω–∞ –Ω–µ–¥–µ–ª—é ‚Äî ${cls}:\n` + formatPickupWeek(mapping);
  await sendToSameThread("sendMessage", token, msg, { text });
}

/* ---------------- Natural helpers ---------------- */
function extractTimeHHMM(text) { const m = text.match(/(\b[01]?\d|2[0-3]):([0-5]\d)\b/); return m ? `${m[1].padStart(2,"0")}:${m[2]}` : null; }
function extractTimeFlexible(text) { const m = text.match(/\b([01]?\d|2[0-3])[.: \-]?([0-5]\d)\b/); return m ? `${m[1].padStart(2,"0")}:${m[2]}` : null; }
function extractDelayMinutes(text) { const m = normalize(text).match(/\b–Ω–∞\s+(\d{1,2})\s*–º–∏–Ω/); return m ? parseInt(m[1], 10) : null; }
function guessChildName(text) { const m = text.match(/([–ê-–Ø–Å][–∞-—è—ë]+)(?=\s+(–∑–∞–±–æ–ª–µ–ª|–∑–∞–±–æ–ª–µ–ª–∞|–±–æ–ª–µ–µ—Ç|–Ω–µ\s+–ø—Ä–∏–¥[–µ—ë]—Ç|–æ–ø–∞–∑–¥—ã–≤–∞|–æ–ø–æ–∑–¥–∞|–∑–∞–¥–µ—Ä–∂–∏–≤–∞|—É–π–¥[–µ—ë]—Ç|–∑–∞–±–µ—Ä—É|–∑–∞–±–∏—Ä–∞—Ç—å|–ø—Ä–æ–ø—É—Å—Ç–∏—Ç|–Ω–µ\s+–±—É–¥–µ—Ç))/i); return m ? m[1] : null; }

function resolvePickupNatural(state, msg, freeText) {
  const raw = (freeText || "").trim();
  const n = normalize(raw);

  // –ö–ª–∞—Å—Å
  let cls = pickClassFromChat(state, msg.chat.id);
  if (!cls && msg.chat.type === "private") {
    const m = parseClassFrom(raw);
    if (m) cls = m;
  }
  if (!cls) return { ok:false, text: "–≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–ª–∞—Å—Å—É. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /link_general 1–ë –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –∫–ª–∞—Å—Å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏." };

  const kind = resolvePickupKindByText(raw);
  const mapping = (state.classes[cls]?.pickup || {})[kind];
  if (!mapping) return { ok:false, text: `–î–ª—è ${cls} –Ω–∞ ${pickupLabel(kind)} –µ—â—ë –Ω–µ –∑–∞–¥–∞–Ω–æ –≤—Ä–µ–º—è.` };

  // –î–µ–Ω—å
  let d = dayShortFromInput(raw);
  if (!d) {
    if (/\b–∑–∞–≤—Ç—Ä–∞\b/.test(n)) {
      const now = new Date(); now.setUTCMinutes(now.getUTCMinutes() + 24*60);
      d = ruShortFromDate(now);
    } else {
      d = todayRuShort();
    }
  }

  const t = mapping[d];
  if (!t) return { ok:false, text: `${cls}: –Ω–∞ ${dayNameFull(d)} –¥–ª—è ¬´${pickupLabel(kind)}¬ª –≤—Ä–µ–º—è –Ω–µ –∑–∞–¥–∞–Ω–æ.` };

  const pref = ""; // –ø–æ–¥–ø–∏—Å—å –¥–æ–±–∞–≤–∏–º –≤—ã—à–µ –ø–æ –º–µ—Å—Ç—É
  return { ok:true, text: `${pref}${cls}, ${dayNameFull(d)} ‚Äî ${pickupLabel(kind)} –≤ ${t}.` };
}

/* ---------------- –ú–µ–¥–∏–∞—Ç–µ–∫–∞ (—Å–∫—Ä–∏–Ω–∫–∞—Å—Ç—ã) ---------------- */
function ensureMediaClass(state, cls) {
  if (!state.media[cls]) state.media[cls] = { topup: [], balance: [] };
}
function topicFromCaption(caption="") {
  const n = normalize(caption);
  if (/–±–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç/.test(n) || /\b–±–∞–ª–∞–Ω—Å\b/.test(n)) return "balance";
  if (/–ø–æ–ø–æ–ª–Ω–∏(—Ç—å|–º)\s*–∫–∞—Ä—Ç/.test(n) || /–ø–æ–ø–æ–ª–Ω–µ–Ω/.test(n)) return "topup";
  return null;
}
async function sendMediaTopic(token, msg, items) {
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–µ–º—ã –≤ –ø–æ—Ä—è–¥–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
  for (const it of items) {
    if (it.kind === "photo") await sendToSameThread("sendPhoto", token, msg, { photo: it.file_id, caption: it.caption || "" });
    else if (it.kind === "video") await sendToSameThread("sendVideo", token, msg, { video: it.file_id, caption: it.caption || "" });
    else if (it.kind === "document") await sendToSameThread("sendDocument", token, msg, { document: it.file_id, caption: it.caption || "" });
    else if (it.kind === "animation") await sendToSameThread("sendAnimation", token, msg, { animation: it.file_id, caption: it.caption || "" });
  }
}

/* ---------------- Small talk & intents ---------------- */
async function handleNaturalMessage(env, token, msg, state) {
  if (state.autoreply_enabled === false) return false;
  const raw = (msg.text || "").trim();
  if (!raw) return false;
  const t = normalize(raw);
  const pref = prefixText(state, msg);

  await rememberContext(env, msg, "user", raw);

  // teach-–ø—Ä–∞–≤–∏–ª–∞ ‚Äî –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
  const taught = findTeachAnswer(state, raw);
  if (taught) {
    const txt = `${pref}${taught}`;
    await sendToSameThread("sendMessage", token, msg, { text: txt });
    await rememberContext(env, msg, "bot", txt);
    return true;
  }

  // —Ç—Ä–∏–≥–≥–µ—Ä—ã –º–µ–¥–∏–∞ —Ç–µ–º: topup / balance
  const clsForMedia = pickClassFromChat(state, msg.chat.id);
  ensureClass(state, clsForMedia);
  ensureMediaClass(state, clsForMedia);
  if (/(–∫–∞–∫\s+–ø–æ–ø–æ–ª–Ω–∏(—Ç—å|–º)\s*–∫–∞—Ä—Ç|–ø–æ–ø–æ–ª–Ω–µ–Ω[–∏–µ]|–ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–∞—Ä—Ç—É)/.test(t)) {
    const arr = state.media[clsForMedia]?.topup || [];
    if (arr.length) {
      await sendToSameThread("sendMessage", token, msg, { text: `${pref}–ü–æ—à–∞–≥–æ–≤–æ –ø—Ä–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã:` });
      await sendMediaTopic(token, msg, arr);
      return true;
    }
  }
  if (/(–±–∞–ª–∞–Ω—Å\s*–∫–∞—Ä—Ç|–∫–∞–∫\s+–ø—Ä–æ–≤–µ—Ä–∏—Ç—å\s+–±–∞–ª–∞–Ω—Å|–ø—Ä–æ–≤–µ—Ä–∏—Ç—å\s+–±–∞–ª–∞–Ω—Å|–±–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã)/.test(t)) {
    const arr = state.media[clsForMedia]?.balance || [];
    if (arr.length) {
      await sendToSameThread("sendMessage", token, msg, { text: `${pref}–ì–¥–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã:` });
      await sendMediaTopic(token, msg, arr);
      return true;
    }
  }

  // —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: —Ñ–æ—Ç–æ
  if (/(—Ä–∞—Å–ø–∏—Å–∞–Ω|–∫–∞–∫–∏–µ.*—É—Ä–æ–∫–∏|—á—Ç–æ.*–ø–æ.*—Ä–∞—Å–ø–∏—Å–∞–Ω)/.test(t) && !/(–∑–≤–æ–Ω–∫|–ø–µ—Ä–µ–º–µ–Ω)/.test(t) && !/(–∞–≤—Ç–æ–±—É—Å|–ø–æ–¥–≤–æ–∑)/.test(t)) {
    const cls = pickClassFromChat(state, msg.chat.id);
    const rec = state.classes[cls] || {};
    if (rec.schedule_file_id) {
      await sendToSameThread("sendMessage", token, msg, { text: `${pref}–í–æ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤.` });
      await sendToSameThread("sendPhoto", token, msg, { photo: rec.schedule_file_id, caption: rec.schedule_caption || `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ${cls}` });
      return true;
    }
  }
  if (/(–∞–≤—Ç–æ–±—É—Å|–ø–æ–¥–≤–æ–∑)/.test(t)) {
    const cls = pickClassFromChat(state, msg.chat.id);
    const rec = state.classes[cls] || {};
    if (rec.bus_file_id) {
      await sendToSameThread("sendMessage", token, msg, { text: `${pref}–í–æ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å–æ–≤. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è ‚Äî —Å–æ–æ–±—â—É –∑–∞—Ä–∞–Ω–µ–µ.` });
      await sendToSameThread("sendPhoto", token, msg, { photo: rec.bus_file_id, caption: rec.bus_caption || `–ê–≤—Ç–æ–±—É—Å—ã ${cls}` });
      return true;
    }
  }
  if (/(–∑–≤–æ–Ω–∫|–ø–µ—Ä–µ–º–µ–Ω)/.test(t)) {
    const cls = pickClassFromChat(state, msg.chat.id);
    const rec = state.classes[cls] || {};
    if (rec.bells_file_id) {
      await sendToSameThread("sendMessage", token, msg, { text: `${pref}–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤:` });
      await sendToSameThread("sendPhoto", token, msg, { photo: rec.bells_file_id, caption: rec.bells_caption || `–ó–≤–æ–Ω–∫–∏ ${cls}` });
      return true;
    }
  }

  // —Ç–æ—á–Ω–æ–µ ¬´–≤–æ —Å–∫–æ–ª—å–∫–æ –∑–∞–±—Ä–∞—Ç—å¬ª (—É—Ä–æ–∫–∏/–ø—Ä–æ–¥–ª—ë–Ω–∫–∞/–ø–æ–ª–¥–Ω–∏–∫)
  if (/(–≤–æ —Å–∫–æ–ª—å–∫–æ|—Å–∫–æ–ª—å–∫–æ|–∫–æ–≥–¥–∞).*(–∑–∞–±–∏—Ä|–∑–∞–±—Ä–∞—Ç—å|–∑–∞–±–∏—Ä–∞—Ç—å|–∑–∞–∫–∞–Ω—á|–∫–æ–Ω—á–∞—Ç|—É—Ä–æ–∫|–ø—Ä–æ–¥–ª|–≥–ø–¥|–ø–æ–ª–¥–Ω–∏–∫)/.test(t)) {
    const r = resolvePickupNatural(state, msg, raw);
    if (r.ok) {
      const txt = pref + r.text.replace(/^,?\s*/, "");
      await sendToSameThread("sendMessage", token, msg, { text: txt });
      await rememberContext(env, msg, "bot", txt);
      return true;
    }
  }

  // –±–æ–ª–µ–∑–Ω—å / –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ ‚Äî —Ä–∞–∑–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
  if (/(–∫–∞—à–µ–ª|–Ω–∞—Å–º–æ—Ä–∫|—Å–æ–ø–ª|—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä|–æ—Ä–≤–∏|–≥—Ä–∏–ø–ø|–∑–∞–±–æ–ª–µ–ª|–∑–∞–±–æ–ª–µ–ª–∞|–±–æ–ª–µ–µ—Ç)/.test(t)) {
    const nameChild = guessChildName(raw) || "–†–µ–±—ë–Ω–æ–∫";
    const txt = `${pref}${nameChild}, ${state.policy_absence}`;
    await sendToSameThread("sendMessage", token, msg, { text: txt });
    await rememberContext(env, msg, "bot", txt);
    if (state.teacher_id) await sendSafe("sendMessage", token, { chat_id: state.teacher_id, text: `‚öïÔ∏è –ë–æ–ª–µ–∑–Ω—å/—Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ:\n–ò–∑ —á–∞—Ç–∞ ${msg.chat.title || msg.chat.id}\n"${raw}"` });
    return true;
  }
  if (/(–Ω–µ\s+–±—É–¥–µ—Ç|–ø—Ä–æ–ø—É—Å—Ç–∏—Ç|–Ω–µ\s+–ø—Ä–∏–¥[–µ—ë]—Ç|–æ—Ç—Å—É—Ç—Å—Ç–≤|—Å–µ–≥–æ–¥–Ω—è –Ω–µ —Å–º–æ–∂–µ–º)/.test(t)) {
    const txt = `${pref}–ü—Ä–∏–Ω—è—Ç–æ. –°–æ–æ–±—â–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—á–∏–Ω—É –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.`;
    await sendToSameThread("sendMessage", token, msg, { text: txt });
    await rememberContext(env, msg, "bot", txt);
    if (state.teacher_id) await sendSafe("sendMessage", token, { chat_id: state.teacher_id, text: `üìù –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ:\n–ò–∑ —á–∞—Ç–∞ ${msg.chat.title || msg.chat.id}\n"${raw}"` });
    return true;
  }

  // –æ–ø–æ–∑–¥–∞–Ω–∏—è/–∑–∞–¥–µ—Ä–∂–∫–∏
  if (/(–æ–ø–∞–∑–¥—ã–≤–∞|–æ–ø–æ–∑–¥–∞|–∑–∞–¥–µ—Ä–∂–∏–≤–∞|–±—É–¥–µ–º –ø–æ–∑–∂–µ|–±—É–¥—É –ø–æ–∑–∂–µ|–±–µ–∂–∏–º)/.test(t)) {
    const tm = extractTimeHHMM(raw) || extractTimeFlexible(raw);
    const delay = extractDelayMinutes(raw);
    const when = tm ? `–∫ ${tm}` : (delay ? `–Ω–∞ ~${delay} –º–∏–Ω` : "–Ω–µ–º–Ω–æ–≥–æ");
    const txt = `${pref}–ü–æ–Ω—è–ª–∞, –ø–æ–¥–æ–∂–¥—ë–º ${when}.`;
    await sendToSameThread("sendMessage", token, msg, { text: txt });
    await rememberContext(env, msg, "bot", txt);
    if (state.teacher_id) await sendSafe("sendMessage", token, { chat_id: state.teacher_id, text: `‚è± –û–ø–æ–∑–¥–∞–Ω–∏–µ/–∑–∞–¥–µ—Ä–∂–∫–∞:\n–ò–∑ —á–∞—Ç–∞ ${msg.chat.title || msg.chat.id}\n"${raw}"` });
    return true;
  }

  // —Ä–∞–Ω–Ω–∏–π —É—Ö–æ–¥ / –æ—Ç–ø—É—Å—Ç–∏—Ç—å
  if (/(–æ—Ç–ø—É—Å—Ç(–∏|–∏—Ç–µ)|—É–π–¥[–µ—ë]–º.*—Ä–∞–Ω—å—à–µ|—É–π–¥—É.*—Ä–∞–Ω—å—à–µ|–∑–∞–±–µ—Ä—É\s*–≤|–∑–∞–±–∏—Ä–∞—Ç—å\s*–≤|–∑–∞–±–µ—Ä[—É—ë]).*/.test(t)) {
    const tm = extractTimeHHMM(raw) || extractTimeFlexible(raw);
    const when = tm ? `–≤ ${tm}` : "—Ä–∞–Ω—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ";
    const txt = `${pref}–•–æ—Ä–æ—à–æ, –æ—Ç–ø—É—Å—Ç–∏–º ${when}.`;
    await sendToSameThread("sendMessage", token, msg, { text: txt });
    await rememberContext(env, msg, "bot", txt);
    if (state.teacher_id) await sendSafe("sendMessage", token, { chat_id: state.teacher_id, text: `üö™ –ü—Ä–æ—Å—å–±–∞ –æ—Ç–ø—É—Å—Ç–∏—Ç—å:\n–ò–∑ —á–∞—Ç–∞ ${msg.chat.title || msg.chat.id}\n"${raw}"` });
    return true;
  }

  // small talk
  if (/(^| )(–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ|–¥–æ–±—Ä—ã–π –¥–µ–Ω—å|–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ|–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä)( |!|$)/.test(t)) {
    const txt = `${pref}–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!`;
    await sendToSameThread("sendMessage", token, msg, { text: txt });
    await rememberContext(env, msg, "bot", txt); return true;
  }
  if (/(^| )(—Å–ø–∞—Å–∏–±–æ|–±–ª–∞–≥–æ–¥–∞—Ä—é)( |!|$)/.test(t)) {
    const txt = `${pref}–ü–æ–∂–∞–ª—É–π—Å—Ç–∞!`;
    await sendToSameThread("sendMessage", token, msg, { text: txt });
    await rememberContext(env, msg, "bot", txt); return true;
  }
  if (/(^| )(–ø–æ–∫–∞|–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è|–¥–æ—Å–≤–∏–¥–∞–Ω–∏—è|—Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è)( |!|$)/.test(t)) {
    const txt = `${pref}–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!`;
    await sendToSameThread("sendMessage", token, msg, { text: txt });
    await rememberContext(env, msg, "bot", txt); return true;
  }

  // FAQ
  const hit = bestFaqAnswer(state, raw);
  if (hit) {
    const txt = `${pref}${hit.a}`;
    await sendToSameThread("sendMessage", token, msg, { text: txt });
    await rememberContext(env, msg, "bot", txt);
    return true;
  }

  // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ ‚Äî –º–æ–ª—á–∏–º (–Ω–µ –æ—Ç–≤–µ—á–∞–µ–º –≤–æ–æ–±—â–µ)
  if (state.forward_unknown_to_teacher && state.teacher_id) {
    await sendSafe("sendMessage", token, { chat_id: state.teacher_id, text: `‚ùì –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ —á–∞—Ç–∞ ${msg.chat.title || msg.chat.id}:\n"${raw}"` });
  }
  return false;
}

/* ---------------- –§–æ—Ç–æ/–º–µ–¥–∏–∞ –æ—Ç —É—á–∏—Ç–µ–ª—è (–õ–°) ---------------- */
async function handleMediaFromTeacher(env, token, msg, state) {
  if (msg.chat.type !== "private") return;

  if (!state.teacher_id || state.teacher_id !== msg.from.id) {
    await sendSafe("sendMessage", token, { chat_id: msg.chat.id, text: "–¢–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã: –≤–≤–µ–¥–∏—Ç–µ /iam_teacher –≤ –ª–∏—á–∫–µ." });
    return;
  }

  const cap = msg.caption || "";
  const cls = parseClassFrom(cap) || "1–ë";
  ensureClass(state, cls);

  const media = extractMediaFromMessage(msg);
  if (!media) {
    await sendSafe("sendMessage", token, { chat_id: msg.chat.id, text: "–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∞ –º–µ–¥–∏–∞. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–¥–ø–∏—Å—å—é #1–ë ..." });
    return;
  }

  // –¢–µ–º—ã –º–µ–¥–∏–∞—Ç–µ–∫–∏ (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ/–±–∞–ª–∞–Ω—Å)
  const topic = topicFromCaption(cap);
  if (topic) {
    const entry = { kind: media.kind, file_id: media.file_id, caption: cap };
    ensureMediaClass(state, cls);
    state.media[cls][topic].push(entry);
    await saveState(env, state);
    await sendSafe("sendMessage", token, { chat_id: msg.chat.id, text: `–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ç–µ–º—É ${topic} –¥–ª—è ${cls} ‚úÖ (–≤—Å–µ–≥–æ: ${state.media[cls][topic].length})` });
    return;
  }

  // –§–æ—Ç–æ-—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
  const ncap = normalize(cap);
  let handledPhoto = false;

  if (/—Ä–∞—Å–ø–∏—Å–∞–Ω.*–∑–≤–æ–Ω–∫/.test(ncap) || /\b–∑–≤–æ–Ω–∫(–∏)?\b/.test(ncap) || /–ø–µ—Ä–µ–º–µ–Ω/.test(ncap)) {
    state.classes[cls].bells_file_id = media.file_id;
    state.classes[cls].bells_caption = cap;
    await saveState(env, state);
    const rec = state.classes[cls];
    const targets = [rec.general_chat_id, rec.parents_chat_id].filter(Boolean);
    if (targets.length) {
      for (const chatId of targets) await sendSafe("sendPhoto", token, { chat_id: chatId, photo: media.file_id, caption: cap });
    }
    await sendSafe("sendMessage", token, { chat_id: msg.chat.id, text: `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è ${cls} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ ‚úÖ` });
    handledPhoto = true;
  }

  if (!handledPhoto && (/–∞–≤—Ç–æ–±—É—Å|–ø–æ–¥–≤–æ–∑/.test(ncap))) {
    state.classes[cls].bus_file_id = media.file_id;
    state.classes[cls].bus_caption = cap;
    await saveState(env, state);
    const rec = state.classes[cls];
    const targets = [rec.general_chat_id, rec.parents_chat_id].filter(Boolean);
    if (targets.length) {
      for (const chatId of targets) await sendSafe("sendPhoto", token, { chat_id: chatId, photo: media.file_id, caption: cap });
    }
    await sendSafe("sendMessage", token, { chat_id: msg.chat.id, text: `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å–æ–≤ –¥–ª—è ${cls} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ ‚úÖ` });
    handledPhoto = true;
  }

  if (!handledPhoto && (/—Ä–∞—Å–ø–∏—Å–∞–Ω/.test(ncap) || /—É—Ä–æ–∫/.test(ncap))) {
    state.classes[cls].schedule_file_id = media.file_id;
    state.classes[cls].schedule_caption = cap;
    state.classes[cls].last_update_iso = new Date().toISOString();
    await saveState(env, state);
    const rec = state.classes[cls];
    const targets = [rec.general_chat_id, rec.parents_chat_id].filter(Boolean);
    if (targets.length) {
      for (const chatId of targets) await sendSafe("sendPhoto", token, { chat_id: chatId, photo: media.file_id, caption: cap });
    }
    await sendSafe("sendMessage", token, { chat_id: msg.chat.id, text: `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –¥–ª—è ${cls} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ ‚úÖ` });
    handledPhoto = true;
  }

  if (!handledPhoto) {
    await sendSafe("sendMessage", token, { chat_id: msg.chat.id, text: "–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω, –Ω–æ –ø–æ –ø–æ–¥–ø–∏—Å–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∞ —Ç–∏–ø. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n#1–ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é\n#1–ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤\n#1–ë –∞–≤—Ç–æ–±—É—Å—ã\n–∏–ª–∏ #1–ë –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–∞—Ä—Ç—É / #1–ë –±–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã" });
  }
}

/* ---------------- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞—Ç–µ–∫–æ–π ---------------- */
async function cmdMediaList(token, msg, state, args) {
  const cls = parseClassFrom(args) || pickClassFromChat(state, msg.chat.id);
  ensureClass(state, cls);
  ensureMediaClass(state, cls);
  const top = state.media[cls].topup.length;
  const bal = state.media[cls].balance.length;
  const txt = `–ú–µ–¥–∏–∞—Ç–µ–∫–∞ –¥–ª—è ${cls}:\n‚Ä¢ topup: ${top} —Ñ–∞–π–ª(–æ–≤)\n‚Ä¢ balance: ${bal} —Ñ–∞–π–ª(–æ–≤)`;
  await sendToSameThread("sendMessage", token, msg, { text: txt });
}
async function cmdMediaDel(env, token, msg, state, args) {
  const isTeacher = state.teacher_id && state.teacher_id === msg.from.id;
  if (!isTeacher) return sendToSameThread("sendMessage", token, msg, { text: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—é." });

  const p = args.trim().split(/\s+/);
  const topic = (p[0] || "").toLowerCase();
  const num = p[1] || "all";
  const cls = parseClassFrom(args) || pickClassFromChat(state, msg.chat.id);

  if (!["topup","balance"].includes(topic)) return sendToSameThread("sendMessage", token, msg, { text: "–¢–µ–º–∞: topup | balance. –ü—Ä–∏–º–µ—Ä: /media_del topup 2" });
  ensureClass(state, cls);
  ensureMediaClass(state, cls);

  if (num === "all") {
    state.media[cls][topic] = [];
  } else {
    const i = parseInt(num, 10);
    if (isNaN(i) || i < 1 || i > state.media[cls][topic].length)
      return sendToSameThread("sendMessage", token, msg, { text: "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞." });
    state.media[cls][topic].splice(i-1, 1);
  }
  await saveState(env, state);
  await sendToSameThread("sendMessage", token, msg, { text: "–ì–æ—Ç–æ–≤–æ." });
}
async function cmdMediaClear(env, token, msg, state, args) {
  const isTeacher = state.teacher_id && state.teacher_id === msg.from.id;
  if (!isTeacher) return sendToSameThread("sendMessage", token, msg, { text: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—é." });
  const cls = parseClassFrom(args) || pickClassFromChat(state, msg.chat.id);
  ensureClass(state, cls); ensureMediaClass(state, cls);
  state.media[cls] = { topup: [], balance: [] };
  await saveState(env, state);
  await sendToSameThread("sendMessage", token, msg, { text: `–ú–µ–¥–∏–∞—Ç–µ–∫–∞ –¥–ª—è ${cls} –æ—á–∏—â–µ–Ω–∞ ‚úÖ` });
}

/* ---------------- FAQ mgmt (–º–∏–Ω–∏–º—É–º) ---------------- */
async function cmdFaqImport(env, token, msg, state, args) {
  const isTeacher = state.teacher_id && state.teacher_id === msg.from.id;
  if (!isTeacher) return sendToSameThread("sendMessage", token, msg, { text: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—é." });
  let mode = "append";
  let payload = args.trim();
  if (payload.toLowerCase().startsWith("replace ")) { mode = "replace"; payload = payload.slice(8).trim(); }
  else if (payload.toLowerCase().startsWith("append ")) { payload = payload.slice(6).trim(); }
  if (!payload) return sendToSameThread("sendMessage", token, msg, { text: "–§–æ—Ä–º–∞—Ç: /faq_import [append|replace] [JSON]" });
  let data;
  try { data = JSON.parse(payload); } catch { return sendToSameThread("sendMessage", token, msg, { text: "–û—à–∏–±–∫–∞ JSON." }); }
  if (!Array.isArray(data)) return sendToSameThread("sendMessage", token, msg, { text: "–ù—É–∂–µ–Ω –º–∞—Å—Å–∏–≤." });

  const added = [];
  for (const raw of data) {
    const q = (raw?.q || "").toString().trim();
    const a = (raw?.a || "").toString().trim();
    const kw = Array.isArray(raw?.kw) ? raw.kw.map(x=>x.toString().trim()).filter(Boolean)
      : (typeof raw?.kw === "string" ? raw.kw.split(",").map(s=>s.trim()).filter(Boolean) : []);
    const cat = (raw?.cat || "").toString().trim();
    if (q && a) added.push({ q, a, kw, cat });
  }
  if (!added.length) return sendToSameThread("sendMessage", token, msg, { text: "–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–Ω—É–∂–Ω—ã q –∏ a)." });
  if (mode === "replace") state.faq = [];
  state.faq = (state.faq || []).concat(added);
  await saveState(env, state);
  await sendToSameThread("sendMessage", token, msg, { text: `–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω: ${added.length}. –í—Å–µ–≥–æ: ${(state.faq||[]).length}.` });
}

/* ---------------- –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º ---------------- */
async function cmdPersonaSet(env, token, msg, state, args) {
  const isTeacher = state.teacher_id && state.teacher_id === msg.from.id;
  if (!isTeacher) return sendToSameThread("sendMessage", token, msg, { text: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—é." });
  const name = args.trim();
  if (!name) return sendToSameThread("sendMessage", token, msg, { text: "–£–∫–∞–∂–∏—Ç–µ –∏–º—è: /persona_set –ò—Ä–∏–Ω–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞" });
  state.teacher_display_name = name; await saveState(env, state);
  return sendToSameThread("sendMessage", token, msg, { text: `–¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—á–∞—é –∫–∞–∫: ${name}` });
}
async function cmdPrefix(env, token, msg, state, args) {
  const isTeacher = state.teacher_id && state.teacher_id === msg.from.id;
  if (!isTeacher) return sendToSameThread("sendMessage", token, msg, { text: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—é." });
  const v = (args||"").trim().toLowerCase();
  if (!["on","off"].includes(v)) return sendToSameThread("sendMessage", token, msg, { text: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /prefix on|off" });
  state.prefix_enabled = (v === "on"); await saveState(env, state);
  return sendToSameThread("sendMessage", token, msg, { text: `–ü–æ–¥–ø–∏—Å—å –≤ –æ—Ç–≤–µ—Ç–∞—Ö: ${state.prefix_enabled ? "–í–ö–õ" : "–í–´–ö–õ"}` });
}
async function cmdAutoReply(env, token, msg, state, args) {
  const isTeacher = state.teacher_id && state.teacher_id === msg.from.id;
  if (!isTeacher) return sendToSameThread("sendMessage", token, msg, { text: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—é." });
  const v = (args||"").trim().toLowerCase();
  if (!["on","off"].includes(v)) return sendToSameThread("sendMessage", token, msg, { text: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /autoreply on|off" });
  state.autoreply_enabled = (v === "on"); await saveState(env, state);
  return sendToSameThread("sendMessage", token, msg, { text: `–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã: ${state.autoreply_enabled?"–í–ö–õ":"–í–´–ö–õ"}` });
}
async function cmdPolicyAbsenceSet(env, token, msg, state, args) {
  const isTeacher = state.teacher_id && state.teacher_id === msg.from.id;
  if (!isTeacher) return sendToSameThread("sendMessage", token, msg, { text: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—é." });
  const txt = args.trim();
  if (!txt) return sendToSameThread("sendMessage", token, msg, { text: "–§–æ—Ä–º–∞—Ç: /policy_absence_set –¢–µ–∫—Å—Ç" });
  state.policy_absence = txt; await saveState(env, state);
  return sendToSameThread("sendMessage", token, msg, { text: "–ü–æ–ª–∏—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ" });
}
async function cmdForwardUnknown(env, token, msg, state, args) {
  const isTeacher = state.teacher_id && state.teacher_id === msg.from.id;
  if (!isTeacher) return sendToSameThread("sendMessage", token, msg, { text: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—é." });
  const v = (args||"").trim().toLowerCase();
  if (!["on","off"].includes(v)) return sendToSameThread("sendMessage", token, msg, { text: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /forward_unknown on|off" });
  state.forward_unknown_to_teacher = (v === "on"); await saveState(env, state);
  return sendToSameThread("sendMessage", token, msg, { text: `–ü–µ—Ä–µ—Å—ã–ª–∞—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —É—á–∏—Ç–µ–ª—é: ${state.forward_unknown_to_teacher?"–î–ê":"–ù–ï–¢"}` });
}

/* ---------------- /teach ---------------- */
async function cmdTeach(env, token, msg, state, args) {
  const isTeacher = state.teacher_id && state.teacher_id === msg.from.id;
  if (!isTeacher) return sendToSameThread("sendMessage", token, msg, { text: "–¢–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ–±—É—á–∞—Ç—å –æ—Ç–≤–µ—Ç—ã." });
  const m = args.match(/"([^"]+)"\s*=>\s*"([^"]+)"/);
  if (!m) return sendToSameThread("sendMessage", token, msg, { text: '–§–æ—Ä–º–∞—Ç: /teach "—à–∞–±–ª–æ–Ω" => "–æ—Ç–≤–µ—Ç"' });
  const [_, pat, ans] = m;
  state.teach = state.teach || [];
  state.teach.push({ pat: pat.trim(), ans: ans.trim() });
  await saveState(env, state);
  await sendToSameThread("sendMessage", token, msg, { text: `–î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª–æ #${state.teach.length} ‚úÖ` });
}
async function cmdTeachList(token, msg, state) {
  const list = state.teach || [];
  if (!list.length) return sendToSameThread("sendMessage", token, msg, { text: "–ü—Ä–∞–≤–∏–ª–∞ –ø—É—Å—Ç—ã. –î–æ–±–∞–≤—å—Ç–µ: /teach \"—à–∞–±–ª–æ–Ω\" => \"–æ—Ç–≤–µ—Ç\"" });
  const out = list.map((r,i)=>`${i+1}. "${r.pat}" => "${r.ans.slice(0,120)}"`).join("\n");
  await sendToSameThread("sendMessage", token, msg, { text: out.slice(0,4000) });
}
async function cmdTeachDel(env, token, msg, state, args) {
  const isTeacher = state.teacher_id && state.teacher_id === msg.from.id;
  if (!isTeacher) return sendToSameThread("sendMessage", token, msg, { text: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—é." });
  const idx = parseInt(args, 10);
  const list = state.teach || [];
  if (isNaN(idx) || idx < 1 || idx > list.length) return sendToSameThread("sendMessage", token, msg, { text: "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª–∞: /teach_del 2" });
  list.splice(idx-1, 1); state.teach = list; await saveState(env, state);
  await sendToSameThread("sendMessage", token, msg, { text: "–£–¥–∞–ª–µ–Ω–æ ‚úÖ" });
}
async function cmdTeachClear(env, token, msg, state) {
  const isTeacher = state.teacher_id && state.teacher_id === msg.from.id;
  if (!isTeacher) return sendToSameThread("sendMessage", token, msg, { text: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—é." });
  state.teach = []; await saveState(env, state);
  await sendToSameThread("sendMessage", token, msg, { text: "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –æ—á–∏—â–µ–Ω—ã ‚úÖ" });
}

/* ---------------- –†–æ—É—Ç–µ—Ä –∫–æ–º–∞–Ω–¥ ---------------- */
async function handleCommand(env, token, msg, state) {
  const text = (msg.text || "").trim();
  const [cmd, ...rest] = text.split(/\s+/);
  const args = rest.join(" ").trim();

  switch (cmd) {
    case "/start": await cmdStart(token, msg.chat.id); return true;
    case "/ping": await cmdPing(token, msg); return true;

    case "/iam_teacher": await cmdIamTeacher(env, token, msg, state); return true;
    case "/link_general": await cmdLink(token, msg, state, args, "link_general"); await saveState(env, state); return true;
    case "/link_parents": await cmdLink(token, msg, state, args, "link_parents"); await saveState(env, state); return true;

    case "/pickup_set": await cmdPickupSet(env, token, msg, state, args); return true;
    case "/pickup_week": await cmdPickupWeek(token, msg, state, args); return true;

    case "/persona_set": await cmdPersonaSet(env, token, msg, state, args); return true;
    case "/prefix": await cmdPrefix(env, token, msg, state, args); return true;
    case "/autoreply": await cmdAutoReply(env, token, msg, state, args); return true;
    case "/policy_absence_set": await cmdPolicyAbsenceSet(env, token, msg, state, args); return true;
    case "/forward_unknown": await cmdForwardUnknown(env, token, msg, state, args); return true;

    case "/teach": await cmdTeach(env, token, msg, state, args); return true;
    case "/teach_list": await cmdTeachList(token, msg, state); return true;
    case "/teach_del": await cmdTeachDel(env, token, msg, state, args); return true;
    case "/teach_clear": await cmdTeachClear(env, token, msg, state); return true;

    case "/media_list": await cmdMediaList(token, msg, state, args); return true;
    case "/media_del": await cmdMediaDel(env, token, msg, state, args); return true;
    case "/media_clear": await cmdMediaClear(env, token, msg, state, args); return true;

    case "/faq_import": await cmdFaqImport(env, token, msg, state, args); return true;

    default: return false;
  }
}

/* ---------------- Entry ---------------- */
export default {
  async fetch(request, env) {
    const url = new URL(request.url);
    const token = env.BOT_TOKEN;

    if (url.pathname === "/") return OK("ok");

    // –ë—ã—Å—Ç—Ä–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞/–ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
    if (url.pathname === "/init" && (request.method === "GET" || request.method === "POST")) {
      if (!token || !env.PUBLIC_URL) return NO(400, "Need BOT_TOKEN and PUBLIC_URL");
      const res = await tg("setWebhook", token, {
        url: `${env.PUBLIC_URL}/webhook/${token}`,
        allowed_updates: ["message","edited_message","callback_query","channel_post","my_chat_member","chat_member"],
        max_connections: 40,
        drop_pending_updates: false,
      });
      return new Response(JSON.stringify(res), { status: 200, headers: { "content-type": "application/json" } });
    }

    if (url.pathname === `/webhook/${token}` && request.method === "POST") {
      let update;
      try { update = await request.json(); } catch { return NO(400, "bad json"); }

      console.log("UPDATE kind=", (update.message?"message": update.callback_query?"callback": Object.keys(update)[0] || "other"),
                  "ids=", JSON.stringify({chat: update.message?.chat?.id, from: update.message?.from?.id}),
                  "text=", update.message?.text?.slice(0,80)||"",
                  "hasMedia=", !!(update.message?.photo||update.message?.video||update.message?.document||update.message?.animation));

      const state = await loadState(env);

      if (update.message?.text) {
        const handled = await handleCommand(env, token, update.message, state);
        if (handled) return OK();
        const human = await handleNaturalMessage(env, token, update.message, state);
        if (human) return OK();
        return OK(); // –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ ‚Äî –º–æ–ª—á–∏–º
      }

      if (update.message && (update.message.photo || update.message.video || update.message.document || update.message.animation)) {
        await handleMediaFromTeacher(env, token, update.message, state);
        return OK();
      }

      // inline callbacks (FAQ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –±—É–¥—É—Ç)
      if (update.callback_query) {
        await sendSafe("answerCallbackQuery", token, { callback_query_id: update.callback_query.id });
        return OK();
      }

      return OK();
    }

    return NO();
  },
};
