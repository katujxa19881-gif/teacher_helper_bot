// Cloudflare Worker ‚Äî Telegram –±–æ—Ç ¬´–£—á–∏—Ç–µ–ª—å¬ª
// –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ Worker bindings:
//   - Secret: BOT_TOKEN
//   - Plaintext: PUBLIC_URL   (–±–µ–∑ –∑–∞–≤–µ—Ä—à–∞—é—â–µ–≥–æ /)
//   - KV namespace: KV_BOT
//
// –ü—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ: –∞–¥–º–∏–Ω (—Ö–æ—Ç—è –±—ã –ø—Ä–∞–≤–æ —á–∏—Ç–∞—Ç—å/–ø–∏—Å–∞—Ç—å).
// –£ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–ª—é—á—ë–Ω Privacy Mode: /setprivacy ‚Üí Disable.

const OK = (body = "ok") => new Response(body, { status: 200 });
const NO = (code = 404, body = "not found") => new Response(body, { status: code });

/* -------------------- Telegram API -------------------- */
async function tg(method, token, payload) {
  const r = await fetch(`https://api.telegram.org/bot${token}/${method}`, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify(payload ?? {}),
  });
  return r.json();
}
async function sendSafe(method, token, payload) {
  try {
    const res = await tg(method, token, payload);
    console.log("SEND", method, JSON.stringify(payload), "‚áí", JSON.stringify(res));
    return res;
  } catch (e) {
    console.log("SEND ERROR", method, e?.message || String(e));
    return null;
  }
}
// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ç–æ—Ç –∂–µ —á–∞—Ç/—Ç—É –∂–µ —Ç–µ–º—É (–µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ —Ç–µ–º—ã)
async function sendToSameThread(method, token, msg, payload = {}) {
  const p = { ...payload, chat_id: msg.chat.id };
  if (
    (msg.chat?.type === "supergroup" || msg.chat?.type === "group") &&
    msg.is_topic_message &&
    msg.message_thread_id
  ) {
    p.message_thread_id = msg.message_thread_id;
  }
  return sendSafe(method, token, p);
}

/* -------------------- KV: state -------------------- */
async function loadState(env) {
  const raw = await env.KV_BOT.get("state");
  if (!raw) {
    return {
      teacher_id: null,
      teacher_display_name: "–£—á–∏—Ç–µ–ª—å",
      autoreply_enabled: true,
      forward_unknown_to_teacher: true,
      policy_absence: "–í—ã–∑–¥–æ—Ä–∞–≤–ª–∏–≤–∞–π—Ç–µ üôå –ü—Ä–∏–¥–∏—Ç–µ –≤ —à–∫–æ–ª—É —Å–æ —Å–ø—Ä–∞–≤–∫–æ–π –æ—Ç –≤—Ä–∞—á–∞.",
      // classes["1–ë"] = { general_chat_id, parents_chat_id, schedule_file_id, schedule_caption, bus_file_id, bus_caption, pickup_times{–ü–ù:"12:00",...}, last_update_iso }
      classes: {},
      // faq: [{ q, a, kw:[], cat:"" }]
      faq: [],
    };
  }
  return JSON.parse(raw);
}
async function saveState(env, state) {
  await env.KV_BOT.put("state", JSON.stringify(state));
}
function ensureClass(state, cls) {
  if (!state.classes[cls]) {
    state.classes[cls] = {
      general_chat_id: null,
      parents_chat_id: null,
      schedule_file_id: null,
      schedule_caption: null,
      last_update_iso: null,
      bus_file_id: null,
      bus_caption: null,
      pickup_times: null,
    };
  }
}

/* -------------------- Utils -------------------- */
function normalize(s = "") {
  return s
    .toLowerCase()
    .replace(/—ë/g, "–µ")
    .replace(/[^a-z–∞-—è0-9\s#:+.()\-]/g, " ")
    .replace(/\s+/g, " ")
    .trim();
}
function parseClassFrom(text = "") {
  const m = text.match(/#?\s*([0-9]{1,2}\s*[–ê-–ØA-Z])/i);
  return m ? m[1].toUpperCase().replace(/\s+/g, "") : null;
}
function extractLargestPhotoId(photos = []) {
  if (!photos?.length) return null;
  const by = [...photos].sort((a, b) => (a.file_size || 0) - (b.file_size || 0));
  return by.at(-1)?.file_id || photos.at(-1)?.file_id || null;
}
function scoreMatch(text, kws) {
  const t = " " + normalize(text) + " ";
  let s = 0;
  for (const k of kws || []) {
    const kk = " " + normalize(k) + " ";
    if (t.includes(kk)) s += Math.min(kk.length, 10);
  }
  return s;
}
function bestFaqAnswer(state, question) {
  if (!state.faq?.length) return null;
  const arr = state.faq
    .map((it) => ({ it, s: scoreMatch(question, it.kw || []) }))
    .sort((a, b) => b.s - a.s);
  if (!arr[0] || arr[0].s < 5) return null;
  return arr[0].it;
}
function listCategories(state) {
  const s = new Set();
  for (const f of state.faq || []) if (f.cat) s.add(f.cat);
  return [...s].sort();
}

/* -------------------- Time helpers -------------------- */
const TZ = "Europe/Kaliningrad";
const DAYS = ["–í–°", "–ü–ù", "–í–¢", "–°–†", "–ß–¢", "–ü–¢", "–°–ë"];
const DAYS_FULL = [
  "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
  "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
  "–í—Ç–æ—Ä–Ω–∏–∫",
  "–°—Ä–µ–¥–∞",
  "–ß–µ—Ç–≤–µ—Ä–≥",
  "–ü—è—Ç–Ω–∏—Ü–∞",
  "–°—É–±–±–æ—Ç–∞",
];
function ruShortFromDate(d) {
  const idx = Number(
    new Date(d.toLocaleString("en-US", { timeZone: TZ })).getDay()
  );
  return DAYS[idx];
}
function todayRuShort() {
  return ruShortFromDate(new Date());
}
function dayFull(short) {
  const i = DAYS.indexOf(short);
  return i >= 0 ? DAYS_FULL[i] : short;
}
function dayShortFromInput(s = "") {
  const n = normalize(s);
  if (n === "—Å–µ–≥–æ–¥–Ω—è") return todayRuShort();
  if (n === "–∑–∞–≤—Ç—Ä–∞") {
    const d = new Date();
    d.setUTCMinutes(d.getUTCMinutes() + 24 * 60);
    return ruShortFromDate(d);
  }
  const map = {
    –ø–Ω: "–ü–ù",
    –ø–æ–Ω: "–ü–ù",
    –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫: "–ü–ù",
    mon: "–ü–ù",
    monday: "–ü–ù",
    –≤—Ç: "–í–¢",
    –≤—Ç–æ—Ä–Ω–∏–∫: "–í–¢",
    tue: "–í–¢",
    tuesday: "–í–¢",
    —Å—Ä: "–°–†",
    —Å—Ä–µ–¥–∞: "–°–†",
    wed: "–°–†",
    wednesday: "–°–†",
    —á—Ç: "–ß–¢",
    —á–µ—Ç–≤–µ—Ä–≥: "–ß–¢",
    thu: "–ß–¢",
    thursday: "–ß–¢",
    –ø—Ç: "–ü–¢",
    –ø—è—Ç–Ω–∏—Ü–∞: "–ü–¢",
    fri: "–ü–¢",
    friday: "–ü–¢",
    —Å–±: "–°–ë",
    —Å—É–±–±–æ—Ç–∞: "–°–ë",
    sat: "–°–ë",
    saturday: "–°–ë",
    –≤—Å: "–í–°",
    –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: "–í–°",
    sun: "–í–°",
    sunday: "–í–°",
  };
  return map[n] || null;
}

/* -------------------- Keyboards -------------------- */
function kbCategories(cats) {
  return {
    inline_keyboard: cats.map((c) => [
      { text: `üìö ${c}`, callback_data: `faq_cat::${c}` },
    ]),
  };
}
function kbFaqItems(items, page = 0, perPage = 8, cat = "") {
  const start = page * perPage;
  const part = items.slice(start, start + perPage);
  const rows = part.map((it, i) => [
    {
      text: `${start + i + 1}. ${it.q.slice(0, 32)}‚Ä¶`,
      callback_data: `faq_show::${start + i}::${cat}`,
    },
  ]);
  const nav = [];
  if (start > 0)
    nav.push({
      text: "‚óÄÔ∏è",
      callback_data: `faq_nav::prev::${cat}::${page - 1}`,
    });
  if (start + perPage < items.length)
    nav.push({
      text: "‚ñ∂Ô∏è",
      callback_data: `faq_nav::next::${cat}::${page + 1}`,
    });
  if (nav.length) rows.push(nav);
  return { inline_keyboard: rows };
}

/* -------------------- Small helpers -------------------- */
function pickClassFromChat(state, chatId) {
  for (const [k, v] of Object.entries(state.classes || {})) {
    if (v.general_chat_id === chatId || v.parents_chat_id === chatId) return k;
  }
  return null;
}
function parsePickupMapping(str) {
  const out = {};
  const parts = str.split(/[;,]/).map((s) => s.trim()).filter(Boolean);
  for (const p of parts) {
    const [kRaw, vRaw] = p.split("=").map((s) => s.trim());
    if (!kRaw || !vRaw) continue;
    const k = dayShortFromInput(kRaw) || kRaw.toUpperCase().slice(0, 2);
    if (!DAYS.includes(k)) continue;
    if (!/^\d{1,2}:\d{2}$/.test(vRaw)) continue;
    out[k] = vRaw;
  }
  return Object.keys(out).length ? out : null;
}
function formatPickupWeek(mapping) {
  const order = ["–ü–ù", "–í–¢", "–°–†", "–ß–¢", "–ü–¢", "–°–ë", "–í–°"];
  return order.map((d) => `${d} ‚Äî ${mapping?.[d] || "‚Äî"}`).join("\n");
}

/* -------------------- –ö–æ–º–∞–Ω–¥—ã -------------------- */
async function cmdStart(token, chatId) {
  const text = [
    "–ö–æ–º–∞–Ω–¥—ã:",
    "/schedule ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
    "/buses ‚Äî —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å–æ–≤",
    "/pickup [–¥–µ–Ω—å|–∫–ª–∞—Å—Å] ‚Äî –≤–æ —Å–∫–æ–ª—å–∫–æ –∑–∞–±–∏—Ä–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è/–¥–µ–Ω—å",
    "/pickup_week [–∫–ª–∞—Å—Å] ‚Äî –≤—Ä–µ–º—è –∑–∞–±–æ—Ä–∞ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é",
    "/ask –í–û–ü–†–û–° ‚Äî —Å–ø—Ä–æ—Å–∏—Ç—å –±–æ—Ç–∞ (FAQ ‚Üí –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É—á–∏—Ç–µ–ª—é)",
    "/faq ‚Äî —Å–ø–∏—Å–æ–∫ —á–∞—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤",
    "",
    "–ê–¥–º–∏–Ω (—É—á–∏—Ç–µ–ª—å/—Ä–æ–¥–∫–æ–º):",
    "/iam_teacher ‚Äî –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è —É—á–∏—Ç–µ–ª–µ–º (—Ç–æ–ª—å–∫–æ –õ–° –±–æ—Ç—É)",
    "/link_general <–ö–õ–ê–°–°> ‚Äî –ø—Ä–∏–≤—è–∑–∞—Ç—å –≠–¢–û–¢ —á–∞—Ç –∫–∞–∫ –æ–±—â–∏–π",
    "/link_parents <–ö–õ–ê–°–°> ‚Äî –ø—Ä–∏–≤—è–∑–∞—Ç—å –≠–¢–û–¢ —á–∞—Ç –∫–∞–∫ —á–∞—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π",
    "/pickup_set <–ö–õ–ê–°–°> –ü–ù=13:30,–í–¢=12:40,...  –∏–ª–∏ JSON",
    "/faq_add –í–æ–ø—Ä–æ—Å | –û—Ç–≤–µ—Ç | –∫–ª—é—á1, –∫–ª—é—á2 | –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
    "/faq_del <–Ω–æ–º–µ—Ä>   /faq_list   /faq_export",
    "/faq_import [append|replace] [JSON]   /faq_clear",
    "/forward_unknown on|off ‚Äî –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —É—á–∏—Ç–µ–ª—é",
    "/persona_set –ò–º—è –§–∞–º–∏–ª–∏—è ‚Äî –∫–∞–∫ –±—É–¥–µ—Ç –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –±–æ—Ç",
    "/autoreply on|off ‚Äî –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã ¬´–∫–∞–∫ —É—á–∏—Ç–µ–ª—å¬ª",
    "/policy_absence_set –¢–µ–∫—Å—Ç ‚Äî –æ—Ç–≤–µ—Ç –ø—Ä–∏ –±–æ–ª–µ–∑–Ω–∏/–ø—Ä–æ–ø—É—Å–∫–µ",
    "",
    "–£—á–∏—Ç–µ–ª—å: —Ñ–æ—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ‚Äî –ø–æ–¥–ø–∏—Å—å: #5–ê —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é",
    "–£—á–∏—Ç–µ–ª—å: —Ñ–æ—Ç–æ –∞–≤—Ç–æ–±—É—Å–æ–≤ ‚Äî –ø–æ–¥–ø–∏—Å—å: #5–ê –∞–≤—Ç–æ–±—É—Å—ã ...",
  ].join("\n");
  await sendSafe("sendMessage", token, { chat_id: chatId, text });
}
async function cmdPing(token, msg) {
  await sendToSameThread("sendMessage", token, msg, { text: "pong ‚úÖ" });
}
async function cmdIamTeacher(env, token, msg, state) {
  if (msg.chat.type !== "private") {
    await sendToSameThread("sendMessage", token, msg, {
      text: "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ –±–æ—Ç—É.",
    });
    return;
  }
  state.teacher_id = msg.from.id;
  await saveState(env, state);
  await sendSafe("sendMessage", token, {
    chat_id: msg.chat.id,
    text: "–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã —É—á–∏—Ç–µ–ª–µ–º ‚úÖ",
  });
}
async function cmdLink(token, msg, state, args, kind) {
  const cls = parseClassFrom(args);
  if (!cls) {
    await sendToSameThread("sendMessage", token, msg, {
      text: `–£–∫–∞–∂–∏—Ç–µ –∫–ª–∞—Å—Å, –ø—Ä–∏–º–µ—Ä: /${kind} 1–ë`,
    });
    return;
  }
  ensureClass(state, cls);
  state.classes[cls][
    kind === "link_general" ? "general_chat_id" : "parents_chat_id"
  ] = msg.chat.id;
  await sendToSameThread("sendMessage", token, msg, {
    text: `–ü—Ä–∏–≤—è–∑–∞–Ω–æ: ${kind === "link_general" ? "–û–ë–©–ò–ô" : "–†–û–î–ò–¢–ï–õ–ò"} —á–∞—Ç –¥–ª—è –∫–ª–∞—Å—Å–∞ ${cls} ‚úÖ`,
  });
}
async function cmdSchedule(token, msg, state, args) {
  let cls = pickClassFromChat(state, msg.chat.id);
  if (!cls && msg.chat.type === "private") cls = parseClassFrom(args || "");
  if (!cls) {
    await sendToSameThread("sendMessage", token, msg, {
      text: "–ß–∞—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–ª–∞—Å—Å—É. /link_general 1–ë",
    });
    return;
  }
  const rec = state.classes[cls];
  if (!rec?.schedule_file_id) {
    await sendToSameThread("sendMessage", token, msg, {
      text: `–î–ª—è ${cls} –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.`,
    });
    return;
  }
  await sendToSameThread("sendPhoto", token, msg, {
    photo: rec.schedule_file_id,
    caption: rec.schedule_caption || `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ${cls}`,
  });
}
async function cmdBuses(token, msg, state, args) {
  let cls = pickClassFromChat(state, msg.chat.id);
  if (!cls && msg.chat.type === "private") cls = parseClassFrom(args || "");
  if (!cls) {
    await sendToSameThread("sendMessage", token, msg, {
      text: "–ß–∞—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–ª–∞—Å—Å—É. /link_general 1–ë",
    });
    return;
  }
  const rec = state.classes[cls];
  if (!rec?.bus_file_id) {
    await sendToSameThread("sendMessage", token, msg, {
      text: `–î–ª—è ${cls} –∞–≤—Ç–æ–±—É—Å—ã –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.`,
    });
    return;
  }
  await sendToSameThread("sendPhoto", token, msg, {
    photo: rec.bus_file_id,
    caption: rec.bus_caption || `–ê–≤—Ç–æ–±—É—Å—ã ${cls}`,
  });
}
async function cmdPickupSet(env, token, msg, state, args) {
  const isTeacher = state.teacher_id && state.teacher_id === msg.from.id;
  if (!isTeacher) {
    await sendToSameThread("sendMessage", token, msg, { text: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—é." });
    return;
  }

  const parts = args.trim().split(/\s+/);
  const cls = parseClassFrom(parts[0] || "");
  if (!cls) {
    await sendToSameThread("sendMessage", token, msg, {
      text: "–§–æ—Ä–º–∞—Ç: /pickup_set 1–ë –ü–ù=13:30,–í–¢=12:40,...  –∏–ª–∏ JSON",
    });
    return;
  }
  ensureClass(state, cls);

  const rest = args.slice(args.indexOf(parts[0]) + parts[0].length).trim();
  let mapping = null;

  if (rest.startsWith("{")) {
    try {
      const obj = JSON.parse(rest);
      const m = {};
      for (const [k, v] of Object.entries(obj || {})) {
        const kk = dayShortFromInput(k) || k.toString().toUpperCase().slice(0, 2);
        if (DAYS.includes(kk) && /^\d{1,2}:\d{2}$/.test(String(v))) m[kk] = String(v);
      }
      mapping = Object.keys(m).length ? m : null;
    } catch (_) {
      mapping = null;
    }
  } else {
    mapping = parsePickupMapping(rest);
  }
  if (!mapping) {
    await sendToSameThread("sendMessage", token, msg, {
      text: "–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –≤—Ä–µ–º—è. –ü—Ä–∏–º–µ—Ä: –ü–ù=13:30,–í–¢=12:40",
    });
    return;
  }

  state.classes[cls].pickup_times = mapping;
  await saveState(env, state);

  const pretty = Object.entries(mapping)
    .map(([k, v]) => `${k}=${v}`)
    .join(", ");
  await sendToSameThread("sendMessage", token, msg, {
    text: `–ì–æ—Ç–æ–≤–æ. –í—Ä–µ–º—è –∑–∞–±–æ—Ä–∞ –¥–ª—è ${cls}: ${pretty}`,
  });

  if (!/\bsilent\b/i.test(args)) {
    const rec = state.classes[cls];
    for (const chatId of [rec.general_chat_id, rec.parents_chat_id].filter(Boolean)) {
      await sendSafe("sendMessage", token, {
        chat_id: chatId,
        text: `–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –∑–∞–±–æ—Ä–∞ (${cls}):\n` + formatPickupWeek(mapping),
      });
    }
  }
}
async function cmdPickup(token, msg, state, args) {
  let cls = pickClassFromChat(state, msg.chat.id);
  let day = null;
  if (args) {
    const maybeClass = parseClassFrom(args);
    if (maybeClass) cls = maybeClass;
    const maybeDay =
      dayShortFromInput(args) ||
      (/—Å–µ–≥–æ–¥–Ω—è/.test(normalize(args)) ? todayRuShort() : null);
    if (maybeDay) day = maybeDay;
  }
  if (!cls && msg.chat.type === "private") {
    await sendSafe("sendMessage", token, {
      chat_id: msg.chat.id,
      text: "–£–∫–∞–∂–∏—Ç–µ –∫–ª–∞—Å—Å: /pickup 1–ë",
    });
    return;
  }
  if (!cls) {
    await sendToSameThread("sendMessage", token, msg, {
      text: "–ß–∞—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–ª–∞—Å—Å—É. /link_general 1–ë",
    });
    return;
  }
  const rec = state.classes[cls] || {};
  if (!rec.pickup_times) {
    await sendToSameThread("sendMessage", token, msg, {
      text: `–î–ª—è ${cls} –µ—â—ë –Ω–µ –∑–∞–¥–∞–Ω–æ –≤—Ä–µ–º—è. /pickup_set ${cls} ...`,
    });
    return;
  }
  const d = day || todayRuShort();
  const t = rec.pickup_times[d];
  if (!t) {
    await sendToSameThread("sendMessage", token, msg, {
      text: `–î–ª—è ${cls} –Ω–∞ ${dayFull(d)} –≤—Ä–µ–º—è –Ω–µ –∑–∞–¥–∞–Ω–æ.`,
    });
    return;
  }
  await sendToSameThread("sendMessage", token, msg, {
    text: `${cls}: ${dayFull(d)} ‚Äî –∑–∞–±–∏—Ä–∞—Ç—å –≤ ${t}`,
  });
}
async function cmdPickupWeek(token, msg, state, args) {
  let cls = pickClassFromChat(state, msg.chat.id);
  if (!cls && msg.chat.type === "private") cls = parseClassFrom(args || "");
  if (!cls) {
    await sendToSameThread("sendMessage", token, msg, {
      text: "–ß–∞—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–ª–∞—Å—Å—É. /link_general 1–ë",
    });
    return;
  }
  const rec = state.classes[cls] || {};
  if (!rec.pickup_times) {
    await sendToSameThread("sendMessage", token, msg, {
      text: `–î–ª—è ${cls} –µ—â—ë –Ω–µ –∑–∞–¥–∞–Ω–æ –≤—Ä–µ–º—è. /pickup_set ${cls} ...`,
    });
    return;
  }
  await sendToSameThread("sendMessage", token, msg, {
    text: `–í—Ä–µ–º—è –∑–∞–±–æ—Ä–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é ‚Äî ${cls}:\n` + formatPickupWeek(rec.pickup_times),
  });
}
async function cmdAsk(env, token, msg, state, args) {
  const q = args?.trim();
  if (!q) {
    await sendToSameThread("sendMessage", token, msg, {
      text: "–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /ask –ö–æ–≥–¥–∞ –±—É–¥—É—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ?",
    });
    return;
  }
  // –±—ã—Å—Ç—Ä—ã–π —Ö—É–∫ ¬´–≤–æ —Å–∫–æ–ª—å–∫–æ –∑–∞–±–∏—Ä–∞—Ç—å¬ª
  if (/(–∑–∞–±–∏—Ä–∞—Ç—å|–∑–∞–±—Ä–∞—Ç—å|–≤–æ —Å–∫–æ–ª—å–∫–æ.*–∑–∞–±)/i.test(q)) {
    await cmdPickup(token, msg, state, "");
    return;
  }
  const hit = bestFaqAnswer(state, q);
  if (hit) {
    await sendToSameThread("sendMessage", token, msg, { text: `–û—Ç–≤–µ—Ç:\n${hit.a}` });
    return;
  }
  if (state.forward_unknown_to_teacher && state.teacher_id) {
    await sendSafe("sendMessage", token, {
      chat_id: state.teacher_id,
      text: `–í–æ–ø—Ä–æ—Å –∏–∑ —á–∞—Ç–∞ ${msg.chat.title || msg.chat.id}:\n${q}`,
    });
  }
  await sendToSameThread("sendMessage", token, msg, {
    text: "–ü–æ–∫–∞ –Ω–µ –Ω–∞—à—ë–ª –≥–æ—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. –ü–µ—Ä–µ–¥–∞–ª —É—á–∏—Ç–µ–ª—é üôå",
  });
}
async function cmdFaq(token, msg, state) {
  const faqs = state.faq || [];
  if (!faqs.length) {
    await sendToSameThread("sendMessage", token, msg, { text: "FAQ –ø–æ–∫–∞ –ø—É—Å—Ç." });
    return;
  }
  const cats = listCategories(state);
  if (cats.length) {
    await sendToSameThread("sendMessage", token, msg, {
      text: "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:",
      reply_markup: kbCategories(cats),
    });
    return;
  }
  await sendToSameThread("sendMessage", token, msg, {
    text: "–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:",
    reply_markup: kbFaqItems(faqs, 0),
  });
}
async function cmdFaqList(token, msg, state) {
  const faqs = state.faq || [];
  if (!faqs.length) {
    await sendToSameThread("sendMessage", token, msg, { text: "FAQ –ø—É—Å—Ç." });
    return;
  }
  const out = faqs
    .map((x, i) => `${i + 1}. ${x.q}${x.cat ? ` [${x.cat}]` : ""}`)
    .join("\n");
  for (let i = 0; i < out.length; i += 3500)
    await sendToSameThread("sendMessage", token, msg, { text: out.slice(i, i + 3500) });
}
async function cmdFaqExport(token, msg, state) {
  const json = JSON.stringify(state.faq || [], null, 2);
  for (let i = 0; i < json.length; i += 3500)
    await sendToSameThread("sendMessage", token, msg, {
      text: "```json\n" + json.slice(i, i + 3500) + "\n```",
      parse_mode: "Markdown",
    });
}
async function cmdFaqAdd(env, token, msg, state, args) {
  const isTeacher = state.teacher_id && state.teacher_id === msg.from.id;
  if (!isTeacher) {
    await sendToSameThread("sendMessage", token, msg, { text: "–¢–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å FAQ." });
    return;
  }
  const parts = args.split("|").map((s) => s.trim());
  if (parts.length < 2) {
    await sendToSameThread("sendMessage", token, msg, {
      text: "–§–æ—Ä–º–∞—Ç: /faq_add –í–æ–ø—Ä–æ—Å | –û—Ç–≤–µ—Ç | –∫–ª—é—á1, –∫–ª—é—á2 | –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
    });
    return;
  }
  const [q, a] = [parts[0], parts[1]];
  const kw = (parts[2] || "").split(",").map((s) => s.trim()).filter(Boolean);
  const cat = parts[3] || "";
  state.faq = state.faq || [];
  state.faq.push({ q, a, kw, cat });
  await saveState(env, state);
  await sendToSameThread("sendMessage", token, msg, { text: "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ FAQ ‚úÖ" });
}
async function cmdFaqDel(env, token, msg, state, args) {
  const isTeacher = state.teacher_id && state.teacher_id === msg.from.id;
  if (!isTeacher) {
    await sendToSameThread("sendMessage", token, msg, { text: "–¢–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å FAQ." });
    return;
  }
  const idx = parseInt(args, 10);
  if (isNaN(idx) || idx < 1 || idx > (state.faq?.length || 0)) {
    await sendToSameThread("sendMessage", token, msg, { text: "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏: /faq_del 2" });
    return;
  }
  state.faq.splice(idx - 1, 1);
  await saveState(env, state);
  await sendToSameThread("sendMessage", token, msg, { text: "–£–¥–∞–ª–µ–Ω–æ ‚úÖ" });
}
function safeParseJson(s) {
  try {
    return [JSON.parse(s), null];
  } catch (e) {
    return [null, e?.message || String(e)];
  }
}
async function cmdFaqImport(env, token, msg, state, args) {
  const isTeacher = state.teacher_id && state.teacher_id === msg.from.id;
  if (!isTeacher) {
    await sendToSameThread("sendMessage", token, msg, { text: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—é." });
    return;
  }
  let mode = "append";
  let payload = args.trim();
  if (payload.toLowerCase().startsWith("replace ")) {
    mode = "replace";
    payload = payload.slice(8).trim();
  } else if (payload.toLowerCase().startsWith("append ")) {
    payload = payload.slice(6).trim();
  }
  if (!payload) {
    await sendToSameThread("sendMessage", token, msg, { text: "–§–æ—Ä–º–∞—Ç: /faq_import [append|replace] [JSON]" });
    return;
  }
  const [data, err] = safeParseJson(payload);
  if (err || !Array.isArray(data)) {
    await sendToSameThread("sendMessage", token, msg, { text: "–û—à–∏–±–∫–∞ JSON –∏–ª–∏ –Ω–µ –º–∞—Å—Å–∏–≤." });
    return;
  }
  const added = [];
  for (const raw of data) {
    const q = (raw?.q || "").toString().trim();
    const a = (raw?.a || "").toString().trim();
    const kw = Array.isArray(raw?.kw)
      ? raw.kw.map((x) => x.toString().trim()).filter(Boolean)
      : typeof raw?.kw === "string"
      ? raw.kw.split(",").map((s) => s.trim()).filter(Boolean)
      : [];
    const cat = (raw?.cat || "").toString().trim();
    if (q && a) added.push({ q, a, kw, cat });
  }
  if (!added.length) {
    await sendToSameThread("sendMessage", token, msg, { text: "–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–Ω—É–∂–Ω—ã q –∏ a)." });
    return;
  }
  if (mode === "replace") state.faq = [];
  state.faq = (state.faq || []).concat(added);
  await saveState(env, state);
  await sendToSameThread("sendMessage", token, msg, {
    text: `–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω: ${added.length}. –†–µ–∂–∏–º: ${mode.toUpperCase()}. –í—Å–µ–≥–æ: ${(state.faq || []).length}.`,
  });
}
async function cmdFaqClear(env, token, msg, state) {
  const isTeacher = state.teacher_id && state.teacher_id === msg.from.id;
  if (!isTeacher) {
    await sendToSameThread("sendMessage", token, msg, { text: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—é." });
    return;
  }
  state.faq = [];
  await saveState(env, state);
  await sendToSameThread("sendMessage", token, msg, { text: "FAQ –æ—á–∏—â–µ–Ω ‚úÖ" });
}
async function cmdForwardUnknown(env, token, msg, state, args) {
  const isTeacher = state.teacher_id && state.teacher_id === msg.from.id;
  if (!isTeacher) {
    await sendToSameThread("sendMessage", token, msg, { text: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—é." });
    return;
  }
  const v = (args || "").trim().toLowerCase();
  if (!["on", "off"].includes(v)) {
    await sendToSameThread("sendMessage", token, msg, { text: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /forward_unknown on|off" });
    return;
  }
  state.forward_unknown_to_teacher = v === "on";
  await saveState(env, state);
  await sendToSameThread("sendMessage", token, msg, {
    text: `–ü–µ—Ä–µ—Å—ã–ª–∞—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —É—á–∏—Ç–µ–ª—é: ${state.forward_unknown_to_teacher ? "–î–ê" : "–ù–ï–¢"}`,
  });
}

/* -------------------- Persona & –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã -------------------- */
function extractTimeHHMM(text) {
  const m = text.match(/(\b[01]?\d|2[0-3]):([0-5]\d)\b/);
  return m ? `${m[1].padStart(2, "0")}:${m[2]}` : null;
}
function extractTimeFlexible(text) {
  const m = text.match(/\b([01]?\d|2[0-3])[.: \-]?([0-5]\d)\b/);
  return m ? `${m[1].padStart(2, "0")}:${m[2]}` : null;
}
function extractDelayMinutes(text) {
  const m = normalize(text).match(/\b–Ω–∞\s+(\d{1,2})\s*–º–∏–Ω/);
  return m ? parseInt(m[1], 10) : null;
}
function guessChildName(text) {
  const m = text.match(
    /([–ê-–Ø–Å][–∞-—è—ë]+)(?=\s+(–∑–∞–±–æ–ª–µ–ª|–∑–∞–±–æ–ª–µ–ª–∞|–±–æ–ª–µ–µ—Ç|–Ω–µ\s+–ø—Ä–∏–¥[–µ—ë]—Ç|–æ–ø–∞–∑–¥—ã–≤–∞|–æ–ø–æ–∑–¥–∞|–∑–∞–¥–µ—Ä–∂–∏–≤–∞|—É–π–¥[–µ—ë]—Ç|–∑–∞–±–µ—Ä—É|–∑–∞–±–∏—Ä–∞—Ç—å))/i
  );
  return m ? m[1] : null;
}
async function cmdPersonaSet(env, token, msg, state, args) {
  const isTeacher = state.teacher_id && state.teacher_id === msg.from.id;
  if (!isTeacher)
    return sendToSameThread("sendMessage", token, msg, { text: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—é." });
  const name = args.trim();
  if (!name)
    return sendToSameThread("sendMessage", token, msg, {
      text: "–£–∫–∞–∂–∏—Ç–µ –∏–º—è/–ø–æ–¥–ø–∏—Å—å: /persona_set –ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–Ω–∞",
    });
  state.teacher_display_name = name;
  await saveState(env, state);
  return sendToSameThread("sendMessage", token, msg, { text: `–¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—á–∞—é –∫–∞–∫: ${name}` });
}
async function cmdAutoReply(env, token, msg, state, args) {
  const isTeacher = state.teacher_id && state.teacher_id === msg.from.id;
  if (!isTeacher)
    return sendToSameThread("sendMessage", token, msg, { text: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—é." });
  const v = (args || "").trim().toLowerCase();
  if (!["on", "off"].includes(v))
    return sendToSameThread("sendMessage", token, msg, { text: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /autoreply on|off" });
  state.autoreply_enabled = v === "on";
  await saveState(env, state);
  return sendToSameThread("sendMessage", token, msg, {
    text: `–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã: ${state.autoreply_enabled ? "–í–ö–õ" : "–í–´–ö–õ"}`,
  });
}
async function cmdPolicyAbsenceSet(env, token, msg, state, args) {
  const isTeacher = state.teacher_id && state.teacher_id === msg.from.id;
  if (!isTeacher)
    return sendToSameThread("sendMessage", token, msg, { text: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—é." });
  const txt = args.trim();
  if (!txt)
    return sendToSameThread("sendMessage", token, msg, {
      text: "–§–æ—Ä–º–∞—Ç: /policy_absence_set –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞",
    });
  state.policy_absence = txt;
  await saveState(env, state);
  return sendToSameThread("sendMessage", token, msg, { text: "–ü–æ–ª–∏—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ" });
}
async function handleNaturalMessage(env, token, msg, state) {
  if (!state.autoreply_enabled) return false;
  const raw = (msg.text || "").trim();
  if (!raw) return false;
  const t = normalize(raw);

  if (/(^| )(–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ|–¥–æ–±—Ä—ã–π –¥–µ–Ω—å|–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ|–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä)( |!|$)/.test(t)) {
    await sendToSameThread("sendMessage", token, msg, {
      text: `${state.teacher_display_name}: –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!`,
    });
    return true;
  }
  if (/(^| )(—Å–ø–∞—Å–∏–±–æ|–±–ª–∞–≥–æ–¥–∞—Ä—é)( |!|$)/.test(t)) {
    await sendToSameThread("sendMessage", token, msg, {
      text: `${state.teacher_display_name}: –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!`,
    });
    return true;
  }
  if (/(^| )(–ø–æ–∫–∞|–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è|–¥–æ—Å–≤–∏–¥–∞–Ω–∏—è|—Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è)( |!|$)/.test(t)) {
    await sendToSameThread("sendMessage", token, msg, {
      text: `${state.teacher_display_name}: –¥–æ —Å–≤–∏–¥–∞–Ω–∏—è!`,
    });
    return true;
  }
  // –ë–æ–ª–µ–∑–Ω—å/–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ
  if (/(–∑–∞–±–æ–ª–µ–ª|–∑–∞–±–æ–ª–µ–ª–∞|–±–æ–ª–µ–µ—Ç|—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä|–ø—Ä–æ—Å—Ç—É–¥|–æ—Ä–≤–∏|–Ω–µ\s+–±—É–¥–µ—Ç|–ø—Ä–æ–ø—É—Å—Ç–∏—Ç|–Ω–µ\s+–ø—Ä–∏–¥[–µ—ë]—Ç)/.test(t)) {
    const name = guessChildName(raw) || "–†–µ–±—ë–Ω–æ–∫";
    await sendToSameThread("sendMessage", token, msg, {
      text: `${state.teacher_display_name}: ${name}, ${state.policy_absence}`,
    });
    if (state.teacher_id)
      await sendSafe("sendMessage", token, {
        chat_id: state.teacher_id,
        text: `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ (${msg.chat.title || msg.chat.id}):\n"${raw}"`,
      });
    return true;
  }
  // –û–ø–æ–∑–¥–∞–Ω–∏–µ / –∑–∞–¥–µ—Ä–∂–∫–∞
  if (/(–æ–ø–∞–∑–¥—ã–≤–∞|–æ–ø–æ–∑–¥–∞|–∑–∞–¥–µ—Ä–∂–∏–≤–∞|–±—É–¥–µ–º –ø–æ–∑–∂–µ|–±—É–¥—É –ø–æ–∑–∂–µ|–ø–æ–∑–∂–µ –Ω–∞)/.test(t)) {
    const tm = extractTimeHHMM(raw) || extractTimeFlexible(raw);
    const delay = extractDelayMinutes(raw);
    const when = tm ? `–∫ ${tm}` : delay ? `–Ω–∞ ~${delay} –º–∏–Ω` : "–Ω–µ–º–Ω–æ–≥–æ";
    await sendToSameThread("sendMessage", token, msg, {
      text: `${state.teacher_display_name}: –ø—Ä–∏–Ω—è–ª–∞, –ø–æ–¥–æ–∂–¥—ë–º ${when}.`,
    });
    if (state.teacher_id)
      await sendSafe("sendMessage", token, {
        chat_id: state.teacher_id,
        text: `–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–æ–∑–¥–∞–Ω–∏–∏ (${msg.chat.title || msg.chat.id}):\n"${raw}"`,
      });
    return true;
  }
  // –†–∞–Ω–Ω–∏–π —É—Ö–æ–¥ / –∑–∞–±–µ—Ä—É –≤ <–≤—Ä–µ–º—è>
  if (/(–æ—Ç–ø—É—Å—Ç(–∏|–∏—Ç–µ)|—É–π–¥[–µ—ë]–º.*—Ä–∞–Ω—å—à–µ|—É–π–¥—É.*—Ä–∞–Ω—å—à–µ|–∑–∞–±–µ—Ä—É\s*–≤|–∑–∞–±–∏—Ä–∞—Ç—å\s*–≤|–∑–∞–±–µ—Ä[—É—ë])/i.test(t)) {
    const tm = extractTimeHHMM(raw) || extractTimeFlexible(raw);
    const when = tm ? `–≤ ${tm}` : "—Ä–∞–Ω—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ";
    await sendToSameThread("sendMessage", token, msg, {
      text: `${state.teacher_display_name}: —Ö–æ—Ä–æ—à–æ, –æ—Ç–ø—É—Å—Ç–∏–º ${when}.`,
    });
    if (state.teacher_id)
      await sendSafe("sendMessage", token, {
        chat_id: state.teacher_id,
        text: `–ü—Ä–æ—Å—å–±–∞ –æ—Ç–ø—É—Å—Ç–∏—Ç—å (${msg.chat.title || msg.chat.id}):\n"${raw}"`,
      });
    return true;
  }
  // ¬´–≤–æ —Å–∫–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è –∑–∞–±–∏—Ä–∞—Ç—å¬ª
  if (/(–≤–æ —Å–∫–æ–ª—å–∫–æ|—Å–∫–æ–ª—å–∫–æ)\s+(—Å–µ–≥–æ–¥–Ω—è|—Å–µ–≥–æ–Ω—è)?.*(–∑–∞–±–∏—Ä|–∑–∞–±—Ä–∞—Ç—å|–∑–∞–±–∏—Ä–∞—Ç—å)/.test(t)) {
    await cmdPickup(token, msg, state, "");
    return true;
  }
  return false;
}

/* -------------------- –§–æ—Ç–æ –æ—Ç —É—á–∏—Ç–µ–ª—è -------------------- */
async function handlePhotoFromTeacher(env, token, msg, state) {
  if (msg.chat.type !== "private") return;
  if (!state.teacher_id || state.teacher_id !== msg.from.id) {
    await sendSafe("sendMessage", token, {
      chat_id: msg.chat.id,
      text: "–¢–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å. –°–Ω–∞—á–∞–ª–∞ /iam_teacher –≤ –ª–∏—á–∫–µ.",
    });
    return;
  }
  const caption = msg.caption || "";
  const cls = parseClassFrom(caption);
  if (!cls) {
    await sendSafe("sendMessage", token, {
      chat_id: msg.chat.id,
      text: "–î–æ–±–∞–≤—å—Ç–µ –≤ –ø–æ–¥–ø–∏—Å—å –∫–ª–∞—Å—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: #1–ë ...",
    });
    return;
  }
  ensureClass(state, cls);
  const file_id = extractLargestPhotoId(msg.photo || []);
  const isBuses = /–∞–≤—Ç–æ–±—É—Å|bus/i.test(caption);

  if (isBuses) {
    state.classes[cls].bus_file_id = file_id;
    state.classes[cls].bus_caption = caption;
  } else {
    state.classes[cls].schedule_file_id = file_id;
    state.classes[cls].schedule_caption = caption;
    state.classes[cls].last_update_iso = new Date().toISOString();
  }
  await saveState(env, state);

  const rec = state.classes[cls];
  const targets = [rec.general_chat_id, rec.parents_chat_id].filter(Boolean);
  if (!targets.length) {
    await sendSafe("sendMessage", token, {
      chat_id: msg.chat.id,
      text: `–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è ${cls}, –Ω–æ —á–∞—Ç—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã. /link_general ${cls} –∏ /link_parents ${cls}`,
    });
    return;
  }
  for (const chatId of targets) {
    await sendSafe("sendPhoto", token, { chat_id: chatId, photo: file_id, caption });
  }
  await sendSafe("sendMessage", token, {
    chat_id: msg.chat.id,
    text: `${isBuses ? "–ê–≤—Ç–æ–±—É—Å—ã" : "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"} –¥–ª—è ${cls} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ ‚úÖ`,
  });
}

/* -------------------- FAQ callbacks -------------------- */
function kbFaqItemsWrap(items, page, cat) {
  return kbFaqItems(items, page, 8, cat);
}
async function handleCallback(env, token, cb, state) {
  const chatId = cb.message.chat.id;
  const data = cb.data || "";
  const [kind, ...rest] = data.split("::");

  if (kind === "faq_cat") {
    const cat = rest[0] || "";
    const items = (state.faq || []).filter((x) => (x.cat || "") === cat);
    if (!items.length) {
      await sendSafe("answerCallbackQuery", token, {
        callback_query_id: cb.id,
        text: "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –ø—É—Å—Ç–æ",
      });
      return;
    }
    await sendSafe("editMessageText", token, {
      chat_id: chatId,
      message_id: cb.message.message_id,
      text: `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${cat}\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:`,
      reply_markup: kbFaqItemsWrap(items, 0, cat),
    });
    return;
  }
  if (kind === "faq_nav") {
    const cat = rest[1] || "";
    const page = Math.max(0, parseInt(rest[2] || "0", 10));
    const items = cat ? (state.faq || []).filter((x) => (x.cat || "") === cat) : (state.faq || []);
    await sendSafe("editMessageReplyMarkup", token, {
      chat_id: chatId,
      message_id: cb.message.message_id,
      reply_markup: kbFaqItemsWrap(items, page, cat),
    });
    await sendSafe("answerCallbackQuery", token, { callback_query_id: cb.id });
    return;
  }
  if (kind === "faq_show") {
    const idx = parseInt(rest[0] || "0", 10);
    const cat = rest[1] || "";
    const list = cat ? (state.faq || []).filter((x) => (x.cat || "") === cat) : (state.faq || []);
    if (!list[idx]) {
      await sendSafe("answerCallbackQuery", token, {
        callback_query_id: cb.id,
        text: "–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
      });
      return;
    }
    const item = list[idx];
    await sendSafe("answerCallbackQuery", token, { callback_query_id: cb.id });
    await sendSafe("sendMessage", token, {
      chat_id: chatId,
      text: `Q: ${item.q}\n‚Äî ‚Äî ‚Äî\n${item.a}`,
    });
    return;
  }
  await sendSafe("answerCallbackQuery", token, { callback_query_id: cb.id });
}

/* -------------------- –†–æ—É—Ç–µ—Ä –∫–æ–º–∞–Ω–¥ -------------------- */
async function handleCommand(env, token, msg, state) {
  const text = (msg.text || "").trim();
  const [cmd, ...rest] = text.split(/\s+/);
  const args = rest.join(" ").trim();

  switch (cmd) {
    case "/start": return await cmdStart(token, msg.chat.id), true;
    case "/ping":  return await cmdPing(token, msg), true;

    case "/iam_teacher":   return await cmdIamTeacher(env, token, msg, state), true;
    case "/link_general":  return await cmdLink(token, msg, state, args, "link_general"), await saveState(env, state), true;
    case "/link_parents":  return await cmdLink(token, msg, state, args, "link_parents"), await saveState(env, state), true;

    case "/schedule":      return await cmdSchedule(token, msg, state, args), true;
    case "/buses":         return await cmdBuses(token, msg, state, args), true;

    case "/pickup_set":    return await cmdPickupSet(env, token, msg, state, args), true;
    case "/pickup":        return await cmdPickup(token, msg, state, args), true;
    case "/pickup_week":   return await cmdPickupWeek(token, msg, state, args), true;

    case "/ask":           return await cmdAsk(env, token, msg, state, args), true;

    case "/faq":           return await cmdFaq(token, msg, state), true;
    case "/faq_list":      return await cmdFaqList(token, msg, state), true;
    case "/faq_export":    return await cmdFaqExport(token, msg, state), true;
    case "/faq_add":       return await cmdFaqAdd(env, token, msg, state, args), true;
    case "/faq_del":       return await cmdFaqDel(env, token, msg, state, args), true;
    case "/faq_import":    return await cmdFaqImport(env, token, msg, state, args), true;
    case "/faq_clear":     return await cmdFaqClear(env, token, msg, state), true;

    case "/persona_set":        return await cmdPersonaSet(env, token, msg, state, args), true;
    case "/autoreply":          return await cmdAutoReply(env, token, msg, state, args), true;
    case "/policy_absence_set": return await cmdPolicyAbsenceSet(env, token, msg, state, args), true;
    case "/forward_unknown":    return await cmdForwardUnknown(env, token, msg, state, args), true;

    default: return false;
  }
}

/* -------------------- Worker entry -------------------- */
export default {
  async fetch(request, env) {
    const url = new URL(request.url);
    const token = env.BOT_TOKEN;

    // –ü—Ä–æ—Å—Ç–æ–π health-check
    if (url.pathname === "/") return OK("ok");

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ (–¥–æ–ø—É—Å–∫–∞–µ–º GET –∏ POST ‚Äî —Ç–∞–∫ —É–¥–æ–±–Ω–µ–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ)
    if (url.pathname === "/init" && (request.method === "GET" || request.method === "POST")) {
      if (!token || !env.PUBLIC_URL) return NO(400, "Need BOT_TOKEN and PUBLIC_URL");
      const res = await tg("setWebhook", token, {
        url: `${env.PUBLIC_URL}/webhook/${token}`,
        allowed_updates: ["message","edited_message","callback_query","my_chat_member","chat_member","channel_post"],
        max_connections: 40,
      });
      return new Response(JSON.stringify(res), {
        status: 200,
        headers: { "content-type": "application/json" },
      });
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –≤–µ–±—Ö—É–∫
    if (url.pathname === `/webhook/${token}` && request.method === "POST") {
      let update;
      try {
        update = await request.json();
      } catch {
        return NO(400, "bad json");
      }

      // –ù–µ–º–Ω–æ–≥–æ –ª–æ–≥–æ–≤, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å, —á—Ç–æ –ø—Ä–∏–ª–µ—Ç–µ–ª–æ
      if (update.message?.message_id) {
        console.log("UPDATE kind= message ids=", JSON.stringify({
          chat: update.message.chat?.id,
          from: update.message.from?.id,
        }));
      } else if (update.callback_query?.id) {
        console.log("UPDATE kind= callback from=", update.callback_query.from?.id);
      } else {
        console.log("UPDATE kind= other");
      }

      const state = await loadState(env);

      // –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã / –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
      if (update.message?.text) {
        const handled = await handleCommand(env, token, update.message, state);
        if (handled) return OK();
        const human = await handleNaturalMessage(env, token, update.message, state);
        if (human) return OK();
      }

      // –§–æ—Ç–æ ‚Äî —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ/–∞–≤—Ç–æ–±—É—Å—ã –æ—Ç —É—á–∏—Ç–µ–ª—è
      if (update.message?.photo?.length) {
        await handlePhotoFromTeacher(env, token, update.message, state);
        return OK();
      }

      // Inline-–∫–Ω–æ–ø–∫–∏ FAQ
      if (update.callback_query) {
        await handleCallback(env, token, update.callback_query, state);
        return OK();
      }

      // –û—Å—Ç–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
      return OK();
    }

    return NO();
  },
};
