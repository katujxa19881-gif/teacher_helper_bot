// Cloudflare Worker: Telegram-–±–æ—Ç "–£—á–∏—Ç–µ–ª—å"
// Secrets / Vars / KV:
// - Secret: BOT_TOKEN
// - Var: PUBLIC_URL (–±–µ–∑ –∑–∞–≤–µ—Ä—à–∞—é—â–µ–≥–æ "/")
// - KV: KV_BOT
//
// –í BotFather: /setprivacy -> Disable

const OK = (b = "ok") => new Response(b, { status: 200 });
const NO = (c = 404, b = "not found") => new Response(b, { status: c });

/* ------------ Telegram API ------------- */
async function tg(method, token, payload) {
  const res = await fetch(`https://api.telegram.org/bot${token}/${method}`, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify(payload ?? {})
  });
  return res.json();
}
async function sendSafe(method, token, payload) {
  try { return await tg(method, token, payload); }
  catch (e) { console.log("SEND ERROR", method, e?.message || String(e)); return null; }
}
async function sendToSameThread(method, token, msg, payload = {}) {
  const p = { ...payload, chat_id: msg.chat.id };
  if ((msg.chat?.type === "supergroup" || msg.chat?.type === "group") && msg.is_topic_message && msg.message_thread_id) {
    p.message_thread_id = msg.message_thread_id;
  }
  return sendSafe(method, token, p);
}

/* ------------- KV state ---------------- */
async function loadState(env) {
  const raw = await env.KV_BOT.get("state");
  if (!raw) {
    return {
      teacher_id: null,
      teacher_display_name: "–ò—Ä–∏–Ω–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞",
      autoreply_enabled: true,
      forward_unknown_to_teacher: true,
      policy_absence: "–í—ã–∑–¥–æ—Ä–∞–≤–ª–∏–≤–∞–π—Ç–µ üôå –ü—Ä–∏–¥–∏—Ç–µ –≤ —à–∫–æ–ª—É —Å–æ —Å–ø—Ä–∞–≤–∫–æ–π –æ—Ç –≤—Ä–∞—á–∞.",
      classes: {},
      teach: []
    };
  }
  try {
    const s = JSON.parse(raw) || {};
    s.teacher_display_name ||= "–ò—Ä–∏–Ω–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞";
    s.autoreply_enabled ??= true;
    s.forward_unknown_to_teacher ??= true;
    s.policy_absence ||= "–í—ã–∑–¥–æ—Ä–∞–≤–ª–∏–≤–∞–π—Ç–µ üôå –ü—Ä–∏–¥–∏—Ç–µ –≤ —à–∫–æ–ª—É —Å–æ —Å–ø—Ä–∞–≤–∫–æ–π –æ—Ç –≤—Ä–∞—á–∞.";
    s.classes ||= {};
    s.teach ||= [];
    return s;
  } catch {
    return {
      teacher_id: null,
      teacher_display_name: "–ò—Ä–∏–Ω–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞",
      autoreply_enabled: true,
      forward_unknown_to_teacher: true,
      policy_absence: "–í—ã–∑–¥–æ—Ä–∞–≤–ª–∏–≤–∞–π—Ç–µ üôå –ü—Ä–∏–¥–∏—Ç–µ –≤ —à–∫–æ–ª—É —Å–æ —Å–ø—Ä–∞–≤–∫–æ–π –æ—Ç –≤—Ä–∞—á–∞.",
      classes: {},
      teach: []
    };
  }
}
async function saveState(env, state) { await env.KV_BOT.put("state", JSON.stringify(state)); }

function ensureClass(state, cls) {
  if (!state.classes[cls]) {
    state.classes[cls] = {
      general_chat_id: null,
      parents_chat_id: null,
      schedule_file_id: null, schedule_caption: null,
      bells_file_id: null, bells_caption: null,
      bus_file_id: null, bus_caption: null,
      shuttle_file_id: null, shuttle_caption: null,
      media: {}
    };
  }
}

/* ---------------- utils ---------------- */
function normalize(s = "") { return s.toLowerCase().replace(/—ë/g, "–µ").replace(/\s+/g, " ").trim(); }
function parseClassFrom(text = "") { const m = text.match(/#?\s*([0-9]{1,2}\s*[–ê-–ØA-Z])/i); return (m ? m[1].toUpperCase().replace(/\s+/g, "") : "1–ë"); }
function extractLargestPhotoId(photos = []) { if (!photos?.length) return null; const by = [...photos].sort((a, b) => (a.file_size || 0) - (b.file_size || 0)); return by.at(-1)?.file_id || photos.at(-1)?.file_id || null; }
function userDisplay(u) { if (!u) return ""; if (u.username) return `@${u.username}`; const n = [u.first_name, u.last_name].filter(Boolean).join(" ").trim(); return n || ""; }
function addressPrefix(msg) { const d = userDisplay(msg.from || null); return d ? `${d}, ` : ""; }

/* ---- —á–∞—Ç-–∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø–æ–∏—Å–∫ –∫–ª–∞—Å—Å–∞ ---- */
function pickClassFromChat(state, chatId) {
  for (const [k, v] of Object.entries(state.classes || {})) {
    if (v.general_chat_id === chatId || v.parents_chat_id === chatId) return k;
  }
  return null;
}
function ctxKey(msg) {
  const chat = msg.chat.id;
  const th = (msg.is_topic_message && msg.message_thread_id) ? msg.message_thread_id : 0;
  return `ctx::${chat}::${th}`;
}
async function rememberContext(env, msg, role, text) {
  try {
    const key = ctxKey(msg);
    let arr = [];
    try { arr = JSON.parse(await env.KV_BOT.get(key) || "[]") || []; } catch { arr = []; }
    arr.push({ t: Date.now(), role, text: (text || "").slice(0, 800) });
    if (arr.length > 10) arr = arr.slice(-10);
    await env.KV_BOT.put(key, JSON.stringify(arr));
  } catch { /* no-op */ }
}

/* ---------------- TEACH ---------------- */
function findTeachAnswer(state, question) {
  const qn = normalize(question);
  for (const r of state.teach || []) {
    const pn = normalize(r.pat);
    if (pn && qn.includes(pn)) return r.ans;
  }
  return null;
}

/* -------- –º–µ–¥–∏–∞-–∫–æ–º–ø–ª–µ–∫—Ç -------- */
function pushMedia(state, cls, topic, item) {
  ensureClass(state, cls);
  const lib = state.classes[cls].media ||= {};
  const arr = lib[topic] ||= [];
  if (!arr.some(x => x.file_id === item.file_id)) arr.push(item);
}
async function sendMediaItems(token, msg, items) {
  for (const it of items) {
    const cap = it.caption?.slice(0, 1024);
    if (it.type === "photo") await sendToSameThread("sendPhoto", token, msg, { photo: it.file_id, caption: cap });
    else if (it.type === "video") await sendToSameThread("sendVideo", token, msg, { video: it.file_id, caption: cap });
    else if (it.type === "document") await sendToSameThread("sendDocument", token, msg, { document: it.file_id, caption: cap });
  }
}

// ---- helper: —Ä–∞–∑–±–∏—Ç—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ ----
function splitLongText(text, maxLen = 3800) {
  if (!text || text.length <= maxLen) return [text || ""];
  const parts = [];
  let i = 0;
  while (i < text.length) {
    let chunk = text.slice(i, i + maxLen);
    // –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –Ω–µ —Ä–∞–∑—Ä–µ–∑–∞—Ç—å —Å–ª–æ–≤–æ/—Å—Ç—Ä–æ–∫—É –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ: –æ—Ç—Å—Ç—É–ø –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫–∏
    const lastNewline = chunk.lastIndexOf('\n');
    if (lastNewline > Math.floor(maxLen * 0.5)) {
      chunk = chunk.slice(0, lastNewline);
      i += lastNewline + 1; // –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–µ–≤. —Å—Ç—Ä–æ–∫–∏
    } else {
      i += chunk.length;
    }
    parts.push(chunk);
  }
  return parts;
}

// ---- –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ teach'–æ–≤ –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ ----
async function sendTeachListAll(token, msg, state) {
  // state.teach –æ–∂–∏–¥–∞–µ—Ç—Å—è –∫–∞–∫ –º–∞—Å—Å–∏–≤ –ø—Ä–∞–≤–∏–ª: [{pat, ans, ...}, ...]
  const list = state && state.teach ? state.teach : [];
  if (!Array.isArray(list) || list.length === 0) {
    await sendToSameThread("sendMessage", token, msg, { text: "–°–ø–∏—Å–æ–∫ teach-–ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø—É—Å—Ç." });
    return true;
  }

  // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏
  const lines = [];
  for (let i = 0; i < list.length; i++) {
    const r = list[i] || {};
    // –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –º–æ–≥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –ø–æ-—Ä–∞–∑–Ω–æ–º—É ‚Äî –ø–æ–¥—Å—Ç—Ä–∞—Ö—É–µ–º—Å—è:
    const pat = (r.pat || r.pattern || r.q || r.key || "").toString();
    const ans = (r.ans || r.a || r.answer || r.reply || "").toString();
    lines.push(`${i + 1}. "${pat}" => "${ans}"`);
  }

  const full = lines.join("\n");
  const parts = splitLongText(full, 3800);

  for (let j = 0; j < parts.length; j++) {
    // –ù—É–º–µ—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —á—Ç–æ–±—ã —É–¥–æ–±–Ω–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è
    const footer = (parts.length > 1) ? `\n\n(—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${j + 1} –∏–∑ ${parts.length})` : "";
    await sendToSameThread("sendMessage", token, msg, { text: parts[j] + footer });
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞, –Ω–æ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–º —à–≤—ã—Ä—è–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    // await new Promise(res => setTimeout(res, 150));
  }

  return true;
}

/* ---- helper –¥–ª—è teach-—Ç–æ–∫–µ–Ω–æ–≤ ---- */
async function sendTeachToken(token, msg, state, tokenName) {
  const cls = pickClassFromChat(state, msg.chat.id) || "1–ë";
  ensureClass(state, cls);
  const rec = state.classes[cls] || {};
  const map = {
    "SCHEDULE": { id: rec.schedule_file_id, cap: rec.schedule_caption || `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ${cls}` },
    "BELLS": { id: rec.bells_file_id, cap: rec.bells_caption || `–ó–≤–æ–Ω–∫–∏ ${cls}` },
    "BUS": { id: rec.bus_file_id, cap: rec.bus_caption || `–ê–≤—Ç–æ–±—É—Å—ã ‚Äî ${cls}` },
    "SHUTTLE": { id: rec.shuttle_file_id, cap: rec.shuttle_caption || `–ü–æ–¥–≤–æ–∑ ‚Äî ${cls}` }
  };
  const item = map[(tokenName || "").toUpperCase()];
  if (!item || !item.id) return false;
  await sendToSameThread("sendPhoto", token, msg, { photo: item.id, caption: item.cap });
  return true;
}

/* ---- –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ —á–∞—Ç—ã ---- */
async function publishSingleFileToClassChats(token, state, cls, file_id, caption) {
  const rec = state.classes[cls];
  for (const chatId of [rec.general_chat_id, rec.parents_chat_id].filter(Boolean)) {
    await sendSafe("sendPhoto", token, { chat_id: chatId, photo: file_id, caption });
  }
}

/* ---- –∞–≤—Ç–æ—Ä–∞–∑–º–µ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫ –≤ –õ–° ---- */
async function handleScheduleBusesUpload(env, token, msg, state, cls, caption, file_id) {
  const n = normalize(caption);

  // –£–†–û–ö–ò (—Å—Ç–∞–≤–∏–º —Ä–∞–Ω—å—à–µ –∞–≤—Ç–æ–±—É—Å–æ–≤, —á—Ç–æ–±—ã –Ω–µ –ø—É—Ç–∞—Ç—å)
  if (/—Ä–∞—Å–ø–∏—Å–∞–Ω|—É—Ä–æ–∫|–∑–∞–Ω—è—Ç|–ø—Ä–µ–¥–º–µ—Ç/.test(n) && !/(–∞–≤—Ç–æ–±—É—Å|–ø–æ–¥–≤–æ–∑|–∑–≤–æ–Ω–∫)/.test(n)) {
    state.classes[cls].schedule_file_id = file_id;
    state.classes[cls].schedule_caption = caption;
    await saveState(env, state);
    await publishSingleFileToClassChats(token, state, cls, file_id, caption);
    await sendSafe("sendMessage", token, { chat_id: msg.chat.id, text: `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –¥–ª—è ${cls} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ ‚úÖ` });
    return true;
  }

  // –ó–í–û–ù–ö–ò
  if (/–∑–≤–æ–Ω–∫/.test(n)) {
    state.classes[cls].bells_file_id = file_id;
    state.classes[cls].bells_caption = caption;
    await saveState(env, state);
    await publishSingleFileToClassChats(token, state, cls, file_id, caption);
    await sendSafe("sendMessage", token, { chat_id: msg.chat.id, text: `–ó–≤–æ–Ω–∫–∏ –¥–ª—è ${cls} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã ‚úÖ` });
    return true;
  }

  // –ü–û–î–í–û–ó (—à–∫–æ–ª—å–Ω—ã–µ –∞–≤—Ç–æ–±—É—Å—ã)
  if (/–ø–æ–¥–≤–æ–∑|—à–∫–æ–ª—å–Ω[–∞-—è]*\s*–∞–≤—Ç–æ–±—É—Å/.test(n)) {
    state.classes[cls].shuttle_file_id = file_id;
    state.classes[cls].shuttle_caption = caption;
    await saveState(env, state);
    await publishSingleFileToClassChats(token, state, cls, file_id, caption);
    await sendSafe("sendMessage", token, { chat_id: msg.chat.id, text: `–ü–æ–¥–≤–æ–∑ (—à–∫–æ–ª—å–Ω—ã–µ –∞–≤—Ç–æ–±—É—Å—ã) –¥–ª—è ${cls} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω ‚úÖ` });
    return true;
  }

  // –ì–û–†–û–î–°–ö–ò–ï –∞–≤—Ç–æ–±—É—Å—ã
  if (/–∞–≤—Ç–æ–±—É—Å|–º–∞—Ä—à—Ä—É—Ç|bus/.test(n)) {
    state.classes[cls].bus_file_id = file_id;
    state.classes[cls].bus_caption = caption;
    await saveState(env, state);
    await publishSingleFileToClassChats(token, state, cls, file_id, caption);
    await sendSafe("sendMessage", token, { chat_id: msg.chat.id, text: `–ê–≤—Ç–æ–±—É—Å—ã (–≥–æ—Ä–æ–¥—Å–∫–∏–µ) –¥–ª—è ${cls} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã ‚úÖ` });
    return true;
  }

  // –¥–µ—Ñ–æ–ª—Ç ‚Äî —Å—á–∏—Ç–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —É—Ä–æ–∫–æ–≤
  state.classes[cls].schedule_file_id = file_id;
  state.classes[cls].schedule_caption = caption;
  await saveState(env, state);
  await publishSingleFileToClassChats(token, state, cls, file_id, caption);
  await sendSafe("sendMessage", token, { chat_id: msg.chat.id, text: `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –¥–ª—è ${cls} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ ‚úÖ` });
  return true;
}

/* ---------- NATURAL DIALOG ------------ */
// —Å—Ç—Ä–æ–≥–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è (—É—Ä–æ–∫–∏ ‚Äî —Ä–∞–Ω—å—à–µ –∞–≤—Ç–æ–±—É—Å–æ–≤/–ø–æ–¥–≤–æ–∑–∞)
function isScheduleLessonsQuery(t) {
  return /(–∫–∞–∫–∏–µ|—á—Ç–æ –∑–∞|—Ä–∞—Å–ø–∏—Å–∞–Ω|—É—Ä–æ–∫|—É—Ä–æ–∫–∏|–∑–∞–Ω—è—Ç|–ø—Ä–µ–¥–º–µ—Ç)/.test(t) &&
         !/(–∞–≤—Ç–æ–±—É—Å|–º–∞—Ä—à—Ä—É—Ç|–ø–æ–¥–≤–æ–∑)/.test(t);
}
function isShuttleQuery(t) {
  return /(–ø–æ–¥–≤–æ–∑|—à–∫–æ–ª—å–Ω[–∞-—è]*\s*–∞–≤—Ç–æ–±—É—Å)/.test(t) &&
         !/(—É—Ä–æ–∫|—É—Ä–æ–∫–∏|–∑–∞–Ω—è—Ç|–ø—Ä–µ–¥–º–µ—Ç|—Ä–∞—Å–ø–∏—Å–∞–Ω.*—É—Ä–æ–∫)/.test(t);
}
function isBusQuery(t) {
  return /(–∞–≤—Ç–æ–±—É—Å|–º–∞—Ä—à—Ä—É—Ç|—Ä–∞—Å–ø–∏—Å–∞–Ω.*–∞–≤—Ç–æ–±—É—Å|bus)/.test(t) &&
         !/(—É—Ä–æ–∫|—É—Ä–æ–∫–∏|–∑–∞–Ω—è—Ç|–ø—Ä–µ–¥–º–µ—Ç)/.test(t);
}

async function handleNaturalMessage(env, token, msg, state) {
  const raw = (msg.text || "").trim();
  if (!raw) return false;
  const t = normalize(raw);
  const pref = addressPrefix(msg);

  // teach (–≤–∫–ª—é—á–∞—è —Ç–æ–∫–µ–Ω—ã)
  const taught = findTeachAnswer(state, raw);
  if (taught) {
    const TT = taught.trim().toUpperCase();
    const m = TT.match(/^\[\[(SCHEDULE|BUS|SHUTTLE|BELLS)\]\]$/);
    if (m) {
      const ok = await sendTeachToken(token, msg, state, m[1]);
      if (ok) { await rememberContext(env, msg, "bot", `TEACH:${m[1]}`); return true; }
      await sendToSameThread("sendMessage", token, msg, { text: `${pref}${state.teacher_display_name}: —Ñ–∞–π–ª–∞ –¥–ª—è ${m[1]} –ø–æ–∫–∞ –Ω–µ—Ç.` });
      return true;
    }
    await sendToSameThread("sendMessage", token, msg, { text: `${pref}${state.teacher_display_name}: ${taught}` });
    return true;
  }

  // –£–†–û–ö–ò
  if (isScheduleLessonsQuery(t)) {
    const cls = pickClassFromChat(state, msg.chat.id) || parseClassFrom(raw);
    const rec = state.classes[cls] || {};
    if (rec.schedule_file_id) {
      await sendToSameThread("sendPhoto", token, msg, { photo: rec.schedule_file_id, caption: rec.schedule_caption || `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ${cls}` });
    }
    return true;
  }

  // –ü–û–î–í–û–ó
  if (isShuttleQuery(t)) {
    const cls = pickClassFromChat(state, msg.chat.id) || parseClassFrom(raw);
    const rec = state.classes[cls] || {};
    if (rec.shuttle_file_id) {
      await sendToSameThread("sendPhoto", token, msg, { photo: rec.shuttle_file_id, caption: rec.shuttle_caption || `–ü–æ–¥–≤–æ–∑ ‚Äî ${cls}` });
    } else if (rec.bus_file_id) {
      await sendToSameThread("sendPhoto", token, msg, { photo: rec.bus_file_id, caption: (rec.bus_caption || `–ê–≤—Ç–æ–±—É—Å—ã ‚Äî ${cls}`) + "\n(–ø–æ–¥–≤–æ–∑ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω)" });
    }
    return true;
  }

  // –ê–í–¢–û–ë–£–°–´
  if (isBusQuery(t)) {
    const cls = pickClassFromChat(state, msg.chat.id) || parseClassFrom(raw);
    const rec = state.classes[cls] || {};
    if (rec.bus_file_id) {
      await sendToSameThread("sendPhoto", token, msg, { photo: rec.bus_file_id, caption: rec.bus_caption || `–ê–≤—Ç–æ–±—É—Å—ã ‚Äî ${cls}` });
    } else if (rec.shuttle_file_id) {
      await sendToSameThread("sendPhoto", token, msg, { photo: rec.shuttle_file_id, caption: (rec.shuttle_caption || `–ü–æ–¥–≤–æ–∑ ‚Äî ${cls}`) + "\n(–≥–æ—Ä–æ–¥—Å–∫–∏–µ –∞–≤—Ç–æ–±—É—Å—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã)" });
    }
    return true;
  }

  // –ó–í–û–ù–ö–ò
  if (/–∑–≤–æ–Ω–æ–∫|–ø–µ—Ä–µ–º–µ–Ω|—Ä–∞—Å–ø–∏—Å–∞–Ω.*–∑–≤–æ–Ω–∫/.test(t)) {
    const cls = pickClassFromChat(state, msg.chat.id) || parseClassFrom(raw);
    const rec = state.classes[cls] || {};
    if (rec.bells_file_id) {
      await sendToSameThread("sendPhoto", token, msg, { photo: rec.bells_file_id, caption: rec.bells_caption || `–ó–≤–æ–Ω–∫–∏ ${cls}` });
    }
    return true;
  }

  // –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã / –±–∞–ª–∞–Ω—Å (–º–µ–¥–∏–∞—Ç–µ–∫–∞)
  if (/–ø–æ–ø–æ–ª|–ø–ª–∞—Ç–µ–∂|–∫–∞–∫.*–ø–æ–ø–æ–ª–Ω–∏.*–∫–∞—Ä—Ç/.test(t)) {
    const cls = pickClassFromChat(state, msg.chat.id) || parseClassFrom(raw);
    const items = (state.classes[cls]?.media?.topup || []);
    if (items.length) await sendMediaItems(token, msg, items);
    return true;
  }
  if (/–±–∞–ª–∞–Ω—Å|–æ—Å—Ç–∞—Ç–æ–∫.*–∫–∞—Ä—Ç|–∫–∞–∫.*–ø—Ä–æ–≤–µ—Ä–∏—Ç—å.*–±–∞–ª–∞–Ω—Å/.test(t)) {
    const cls = pickClassFromChat(state, msg.chat.id) || parseClassFrom(raw);
    const items = (state.classes[cls]?.media?.balance || []);
    if (items.length) await sendMediaItems(token, msg, items);
    return true;
  }

  // –ù–µ–±–æ–ª—å—à–∏–µ –≤–µ–∂–ª–∏–≤–æ—Å—Ç–∏
  if (/(^|\s)(–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ|–¥–æ–±—Ä—ã–π –¥–µ–Ω—å|–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ|–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä)(!|$|\s)/.test(t)) {
    await sendToSameThread("sendMessage", token, msg, { text: `${pref}${state.teacher_display_name}: –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!` });
    return true;
  }
  if (/(^|\s)(—Å–ø–∞—Å–∏–±–æ|–±–ª–∞–≥–æ–¥–∞—Ä—é)(!|$|\s)/.test(t)) {
    await sendToSameThread("sendMessage", token, msg, { text: `${pref}${state.teacher_display_name}: –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!` });
    return true;
  }

  return false; // –º–æ–ª—á–∏–º
}

/* --------------- commands -------------- */
async function cmdStart(token, chatId) {
  const text = [
    "–ö–æ–º–∞–Ω–¥—ã:",
    "/ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç",
    "/iam_teacher ‚Äî –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è —É—á–∏—Ç–µ–ª–µ–º (–≤ –õ–°) (–µ—Å—Ç—å –∞–ª–∏–∞—Å /iam_teach)",
    "/link_general <–ö–õ–ê–°–°> ‚Äî –ø—Ä–∏–≤—è–∑–∞—Ç—å —ç—Ç–æ—Ç —á–∞—Ç –∫–∞–∫ –æ–±—â–∏–π",
    "/link_parents <–ö–õ–ê–°–°> ‚Äî –ø—Ä–∏–≤—è–∑–∞—Ç—å —ç—Ç–æ—Ç —á–∞—Ç –∫–∞–∫ —á–∞—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π",
    "/teach \"—à–∞–±–ª–æ–Ω\" => \"–æ—Ç–≤–µ—Ç\" (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è [[SCHEDULE]], [[BUS]], [[SHUTTLE]], [[BELLS]])",
    "/teach_list, /teach_del <‚Ññ>, /teach_clear",
    "/diag [–ö–õ–ê–°–°] ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤",
    "",
    "–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç —É—á–∏—Ç–µ–ª—è –≤ –õ–°:",
    "‚àô –§–æ—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è/–∑–≤–æ–Ω–∫–æ–≤/–∞–≤—Ç–æ–±—É—Å–æ–≤/–ø–æ–¥–≤–æ–∑–∞ ‚Äî –±–æ—Ç –ø—É–±–ª–∏–∫—É–µ—Ç –≤ —á–∞—Ç—ã.",
    "‚àô –§–æ—Ç–æ/–≤–∏–¥–µ–æ ¬´–ö–∞—Ä—Ç–∞/–ë–∞–ª–∞–Ω—Å¬ª ‚Äî –∫–æ–ø–∏—Ç—Å—è –≤ –º–µ–¥–∏–∞ –±–µ–∑ –∞–≤—Ç–æ-–ø—É–±–ª–∏–∫–∞—Ü–∏–∏."
  ].join("\n");
  await sendSafe("sendMessage", token, { chat_id: chatId, text });
}
async function cmdPing(token, msg) { await sendToSameThread("sendMessage", token, msg, { text: "pong ‚úÖ" }); }

async function cmdIamTeacher(env, token, msg, state) {
  if (msg.chat.type !== "private") {
    await sendToSameThread("sendMessage", token, msg, { text: "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ." });
    return true;
  }
  state.teacher_id = msg.from.id; await saveState(env, state);
  await sendSafe("sendMessage", token, { chat_id: msg.chat.id, text: "–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã —É—á–∏—Ç–µ–ª–µ–º ‚úÖ" });
  return true;
}
async function cmdLink(token, msg, state, args, kind) {
  const cls = parseClassFrom(args || "");
  ensureClass(state, cls);
  state.classes[cls][kind === "link_general" ? "general_chat_id" : "parents_chat_id"] = msg.chat.id;
  await sendToSameThread("sendMessage", token, msg, { text: `–ü—Ä–∏–≤—è–∑–∞–Ω–æ: ${kind === "link_general" ? "–û–ë–©–ò–ô" : "–†–û–î–ò–¢–ï–õ–ò"} —á–∞—Ç –¥–ª—è ${cls} ‚úÖ` });
}

async function handleCommand(env, token, msg, state) {
  const text = (msg.text || "").trim();
  const [cmd, ...rest] = text.split(/\s+/);
  const args = rest.join(" ").trim();

  switch (cmd) {
    case "/start": await cmdStart(token, msg.chat.id); return true;
    case "/ping": await cmdPing(token, msg); return true;
    case "/iam_teacher":
    case "/iam_teach": return await cmdIamTeacher(env, token, msg, state);
    case "/link_general": await cmdLink(token, msg, state, args, "link_general"); await saveState(env, state); return true;
    case "/link_parents": await cmdLink(token, msg, state, args, "link_parents"); await saveState(env, state); return true;

    case "/teach": {
      const m = args.match(/"([^"]+)"\s*=>\s*"([^"]+)"/);
      if (!m) { await sendToSameThread("sendMessage", token, msg, { text: '–§–æ—Ä–º–∞—Ç: /teach "—à–∞–±–ª–æ–Ω" => "–æ—Ç–≤–µ—Ç"' }); return true; }
      state.teach = state.teach || [];
      state.teach.push({ pat: m[1], ans: m[2] });
      await saveState(env, state);
      await sendToSameThread("sendMessage", token, msg, { text: `–î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª–æ #${state.teach.length} ‚úÖ` });
      return true;
    }
    case "/teach_list": {
      const list = state.teach || [];
      if (!list.length) { await sendToSameThread("sendMessage", token, msg, { text: "–ü—Ä–∞–≤–∏–ª–∞ –ø—É—Å—Ç—ã." }); return true; }
      const out = list.map((r, i) => `${i + 1}. "${r.pat}" => "${r.ans.slice(0, 80)}"`).join("\n");
      await sendToSameThread("sendMessage", token, msg, { text: out.slice(0, 4000) });
      return true;
    }
    case "/teach_del": {
      const idx = parseInt(args, 10);
      const list = state.teach || [];
      if (isNaN(idx) || idx < 1 || idx > list.length) {
        await sendToSameThread("sendMessage", token, msg, { text: "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª–∞: /teach_del 2" });
        return true;
      }
      list.splice(idx - 1, 1);
      state.teach = list; await saveState(env, state);
      await sendToSameThread("sendMessage", token, msg, { text: "–£–¥–∞–ª–µ–Ω–æ ‚úÖ" });
      return true;
    }
    case "/teach_clear": {
      state.teach = []; await saveState(env, state);
      await sendToSameThread("sendMessage", token, msg, { text: "–í—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –æ—á–∏—â–µ–Ω—ã ‚úÖ" });
      return true;
    }
      case "/teach_list_all":
  return await sendTeachListAll(token, msg, state);

    case "/diag": {
      const cls = parseClassFrom(args || "");
      ensureClass(state, cls);
      const rec = state.classes[cls];
      const yes = x => x ? "–µ—Å—Ç—å ‚úÖ" : "–Ω–µ—Ç";
      const lines = [
        `–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è ${cls}:`,
        `‚Ä¢ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤: ${yes(rec.schedule_file_id)}`,
        `‚Ä¢ –∑–≤–æ–Ω–∫–∏: ${yes(rec.bells_file_id)}`,
        `‚Ä¢ –∞–≤—Ç–æ–±—É—Å—ã/–ø–æ–¥–≤–æ–∑: –∞–≤—Ç–æ–±—É—Å—ã:${yes(rec.bus_file_id)} –ø–æ–¥–≤–æ–∑:${yes(rec.shuttle_file_id)}`,
        `‚Ä¢ teach –ø—Ä–∞–≤–∏–ª: ${(state.teach || []).length}`
      ].join("\n");
      await sendToSameThread("sendMessage", token, msg, { text: lines });
      return true;
    }

    default: return false;
  }
}

/* --------------- media from teacher --------------- */
async function handleMediaFromTeacher(env, token, msg, state) {
  if (msg.chat.type !== "private") return;
  if (!state.teacher_id || state.teacher_id !== msg.from.id) {
    await sendSafe("sendMessage", token, { chat_id: msg.chat.id, text: "–¢–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å (–≤–≤–µ–¥–∏—Ç–µ /iam_teacher –≤ –ª–∏—á–∫–µ)." });
    return;
  }

  const caption = msg.caption || "";
  const cls = parseClassFrom(caption || "");
  ensureClass(state, cls);

  let file_id = null, type = null;
  if (msg.photo?.length) { file_id = extractLargestPhotoId(msg.photo); type = "photo"; }
  else if (msg.video) { file_id = msg.video.file_id; type = "video"; }
  else if (msg.document) { file_id = msg.document.file_id; type = "document"; }
  else if (msg.audio) { file_id = msg.audio.file_id; type = "audio"; }
  if (!file_id) { await sendSafe("sendMessage", token, { chat_id: msg.chat.id, text: "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ." }); return; }

  const n = normalize(caption);

  // —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ ¬´–∫–∞—Ä—Ç–∞/–±–∞–ª–∞–Ω—Å¬ª ‚Äî –∫–æ–ø–∏–º, –Ω–µ –ø—É–±–ª–∏–∫—É–µ–º
  if (/–ø–æ–ø–æ–ª|–æ–ø–ª–∞—Ç|–ø–ª–∞—Ç–µ–∂/.test(n) && /–∫–∞—Ä—Ç/.test(n)) {
    pushMedia(state, cls, "topup", { type, file_id, caption });
    await saveState(env, state);
    await sendSafe("sendMessage", token, { chat_id: msg.chat.id, text: `–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ (${cls} ‚Äî topup).` });
    return;
  }
  if (/–±–∞–ª–∞–Ω—Å|–æ—Å—Ç–∞—Ç–æ–∫/.test(n) && /–∫–∞—Ä—Ç/.test(n)) {
    pushMedia(state, cls, "balance", { type, file_id, caption });
    await saveState(env, state);
    await sendSafe("sendMessage", token, { chat_id: msg.chat.id, text: `–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ (${cls} ‚Äî balance).` });
    return;
  }

  // –¥–∞–ª—å—à–µ ‚Äî –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è
  await handleScheduleBusesUpload(env, token, msg, state, cls, caption, file_id);
}

/* ---------- entry ---------- */
export default {
  async fetch(request, env) {
    const url = new URL(request.url);
    const token = env.BOT_TOKEN;

    if (url.pathname === "/") return OK("ok");

    // init webhook
    if (url.pathname === "/init" && (request.method === "GET" || request.method === "POST")) {
      if (!token || !env.PUBLIC_URL) return NO(400, "Need BOT_TOKEN and PUBLIC_URL");
      const res = await tg("setWebhook", token, {
        url: `${env.PUBLIC_URL}/webhook/${token}`,
        allowed_updates: ["message", "edited_message", "callback_query", "channel_post", "my_chat_member", "chat_member"],
        max_connections: 40,
        drop_pending_updates: false
      });
      return new Response(JSON.stringify(res), { status: 200, headers: { "content-type": "application/json" } });
    }

    if (url.pathname === `/webhook/${token}` && request.method === "POST") {
      let update;
      try { update = await request.json(); } catch { return NO(400, "bad json"); }
      const state = await loadState(env);

      // —Ç–µ–∫—Å—Ç
      if (update.message?.text) {
        const handled = await handleCommand(env, token, update.message, state);
        if (handled) return OK();
        const human = await handleNaturalMessage(env, token, update.message, state);
        if (human) return OK();
        return OK();
      }

      // –º–µ–¥–∏–∞ –æ—Ç —É—á–∏—Ç–µ–ª—è (–õ–°)
      if (update.message && (update.message.photo?.length || update.message.video || update.message.document || update.message.audio)) {
        await handleMediaFromTeacher(env, token, update.message, state);
        return OK();
      }

      return OK();
    }

    return NO();
  }
};
