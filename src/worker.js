/**
 * TEACHER HELPER ‚Äî –∏—Ç–æ–≥–æ–≤–∞—è —Å–±–æ—Ä–∫–∞ (21.09)
 * Cloudflare Workers + Telegram Bot API
 */

export default {
  async fetch(request, env) {
    const url = new URL(request.url);

    if (url.pathname === "/") return json({ ok: true, result: "teacher-helper alive" });

    if (url.pathname === "/init") {
      const ok = await setWebhook(env);
      return json({ ok, webhook: `${env.PUBLIC_URL.replace(/\/+$/,'')}/webhook/${env.BOT_TOKEN}` });
    }

    if (url.pathname.startsWith("/webhook/")) {
      if (!env.BOT_TOKEN || !url.pathname.includes(env.BOT_TOKEN.slice(0, 8))) return OK();
      if (request.method !== "POST") return OK();

      const update = await request.json().catch(() => ({}));
      const msg = update.message || update.edited_message;
      if (!msg) return OK();

      const ctx = await buildCtx(env, msg);

      // –∫–æ–º–∞–Ω–¥—ã
      if (msg.text?.startsWith("/")) {
        await handleCommand(ctx, msg.text.trim());
        return OK();
      }

      // —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ–¥–∏–∞ –ø–æ –ø–æ–¥–ø–∏—Å–∏ "#–ö–õ–ê–°–° ..."
      if (hasMedia(msg) && msg.caption) {
        const saved = await saveMediaByCaption(ctx, msg);
        if (saved) return OK();
      }

      // —Ä–æ—É—Ç–µ—Ä —Ç–µ–∫—Å—Ç–∞
      await handleTextRouter(ctx, msg);
      return OK();
    }

    return new Response("Not found", { status: 404 });
  },
};

/* =============== helpers =============== */

function json(obj) {
  return new Response(JSON.stringify(obj), {
    headers: { "content-type": "application/json; charset=utf-8" },
  });
}
function OK() { return new Response("", { status: 200 }); }

async function setWebhook(env) {
  const url = `${env.PUBLIC_URL.replace(/\/+$/,'')}/webhook/${env.BOT_TOKEN}`;
  const res = await tg(env, "setWebhook", { url });
  console.log("setWebhook:", await res.text());
  return true;
}

function normalize(s) { return (s || "").toLowerCase().replace(/—ë/g, "–µ").trim(); }
function hasMedia(m) { return Boolean(m.photo?.length || m.video || m.animation || m.document || m.voice || m.audio); }
function escapeHtml(s){return String(s).replace(/[&<>"']/g,m=>({ '&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;' }[m]));}
function slugify(s){
  return s.toLowerCase().replace(/—ë/g,"–µ").replace(/[^a-z0-9–∞-—è\s_-]/g,"").replace(/\s+/g,"_").replace(/_+/g,"_").trim();
}
function slugifyShort(s){ return s.length>28 ? s.slice(0,28)+"‚Ä¶" : s; }

async function buildCtx(env, msg) {
  const teacherId = await env.KV_BOT.get("TEACHER_ID");
  const personaName = (await env.KV_BOT.get("PERSONA_NAME")) || "–ò—Ä–∏–Ω–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞";
  const personaEnabled = (await env.KV_BOT.get("PERSONA_ENABLED")) || "0"; // OFF –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const defaultClass = (await env.KV_BOT.get("DEFAULT_CLASS")) || "1–ë";
  const autopublish = (await env.KV_BOT.get("AUTOPUBLISH_ON_SAVE")) || "1";

  const chat_id = msg.chat.id;
  const isGroup = msg.chat.type === "group" || msg.chat.type === "supergroup";
  let classLabel = await env.KV_BOT.get(`CLASS_BY_CHAT:${chat_id}`);
  if (!classLabel) classLabel = defaultClass;

  return { env, msg, chat_id, isGroup, classLabel, teacherId, personaName, personaEnabled, autopublish };
}
function personaPrefix(ctx){ return ctx.personaEnabled === "1" ? `${ctx.personaName}: ` : ""; }
function mention(msg){ const u = msg.from?.username; return u ? `@${u}, ` : ""; }

/* =============== commands =============== */

async function handleCommand(ctx, raw) {
  const [cmd, ...rest] = raw.split(/\s+/);
  const args = rest.join(" ").trim();

  if (cmd === "/ping") { await sendText(ctx.env, ctx.chat_id, "pong ‚úÖ"); return; }

  if (cmd === "/iam_teacher") {
    if (ctx.isGroup) { await sendText(ctx.env, ctx.chat_id, "–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö."); return; }
    await ctx.env.KV_BOT.put("TEACHER_ID", String(ctx.msg.from?.id));
    await sendText(ctx.env, ctx.chat_id, "–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã —É—á–∏—Ç–µ–ª–µ–º ‚úÖ");
    return;
  }

  if (cmd === "/link_general") {
    if (String(ctx.msg.from?.id) !== String(ctx.teacherId)) return;
    if (!ctx.isGroup) { await sendText(ctx.env, ctx.chat_id, "–í—ã–ø–æ–ª–Ω–∏ –∫–æ–º–∞–Ω–¥—É –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ."); return; }
    if (!args) { await sendText(ctx.env, ctx.chat_id, "–ü—Ä–∏–º–µ—Ä: /link_general 1–ë"); return; }

    await ctx.env.KV_BOT.put(`CLASS_BY_CHAT:${ctx.chat_id}`, args);
    const key = `CHATS_BY_CLASS:${args}`;
    const arr = (await ctx.env.KV_BOT.get(key, "json")) || [];
    if (!arr.includes(String(ctx.chat_id))) arr.push(String(ctx.chat_id));
    await ctx.env.KV_BOT.put(key, JSON.stringify(arr));
    await sendText(ctx.env, ctx.chat_id, `${personaPrefix(ctx)}–ü—Ä–∏–≤—è–∑–∞–Ω–æ: –û–ë–©–ò–ô —á–∞—Ç –¥–ª—è –∫–ª–∞—Å—Å–∞ ${escapeHtml(args)} ‚úÖ`);
    return;
  }

  if (cmd === "/class_default") {
    if (String(ctx.msg.from?.id) !== String(ctx.teacherId)) return;
    if (!args) { await sendText(ctx.env, ctx.chat_id, "–ü—Ä–∏–º–µ—Ä: /class_default 1–ë"); return; }
    await ctx.env.KV_BOT.put("DEFAULT_CLASS", args);
    await sendText(ctx.env, ctx.chat_id, `–ö–ª–∞—Å—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${escapeHtml(args)}`);
    return;
  }

  if (cmd === "/persona_set") {
    if (String(ctx.msg.from?.id) !== String(ctx.teacherId)) return;
    if (!args) { await sendText(ctx.env, ctx.chat_id, "–ü—Ä–∏–º–µ—Ä: /persona_set –ò—Ä–∏–Ω–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞"); return; }
    await ctx.env.KV_BOT.put("PERSONA_NAME", args);
    await sendText(ctx.env, ctx.chat_id, `–ü–æ–¥–ø–∏—Å—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${escapeHtml(args)}`);
    return;
  }

  // /persona –∏ /prefix ‚Äî –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ
  if (cmd === "/persona" || cmd === "/prefix") {
    if (String(ctx.msg.from?.id) !== String(ctx.teacherId)) return;
    const val = /on/i.test(args) ? "1" : /off/i.test(args) ? "0" : null;
    if (val === null) { await sendText(ctx.env, ctx.chat_id, `–ò—Å–ø–æ–ª—å–∑—É–π: ${cmd} on | off`); return; }
    await ctx.env.KV_BOT.put("PERSONA_ENABLED", val);
    await sendText(ctx.env, ctx.chat_id, `–ü–æ–¥–ø–∏—Å—å —É—á–∏—Ç–µ–ª—è: ${val === "1" ? "–≤–∫–ª—é—á–µ–Ω–∞" : "–≤—ã–∫–ª—é—á–µ–Ω–∞"}`);
    return;
  }

  if (cmd === "/autopublish") {
    if (String(ctx.msg.from?.id) !== String(ctx.teacherId)) return;
    const val = /on/i.test(args) ? "1" : /off/i.test(args) ? "0" : null;
    if (val === null) { await sendText(ctx.env, ctx.chat_id, "–ò—Å–ø–æ–ª—å–∑—É–π: /autopublish on | off"); return; }
    await ctx.env.KV_BOT.put("AUTOPUBLISH_ON_SAVE", val);
    await sendText(ctx.env, ctx.chat_id, `–ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è: ${val === "1" ? "–≤–∫–ª—é—á–µ–Ω–∞" : "–≤—ã–∫–ª—é—á–µ–Ω–∞"}`);
    return;
  }
}

/* =============== media save =============== */

function parseCaptionHashtag(caption) {
  // "#1–ë –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ –°–±–µ—Ä–±–∞–Ω–∫" –∏–ª–∏ "#1–ë topup ‚Äî 2"
  const m = caption.match(/#\s*([0-9–ê-–ØA-Za-z–∞-—è—ë–Å]+)\s+(.+)/i);
  if (!m) return null;
  const classLabel = m[1].trim();
  const keyHuman = m[2].trim();
  const slug = slugify(keyHuman);
  return { classLabel, keyHuman, slug };
}

function extractFileItem(msg) {
  if (msg.photo?.length) {
    const fid = msg.photo.sort((a,b)=>(a.file_size||0)-(b.file_size||0)).pop().file_id;
    return { type: "photo", file_id: fid };
  }
  if (msg.video) return { type: "video", file_id: msg.video.file_id };
  if (msg.animation) return { type: "animation", file_id: msg.animation.file_id };
  if (msg.document) return { type: "document", file_id: msg.document.file_id };
  if (msg.voice) return { type: "voice", file_id: msg.voice.file_id };
  if (msg.audio) return { type: "audio", file_id: msg.audio.file_id };
  return null;
}

async function saveMediaByCaption(ctx, msg) {
  const allow = String(msg.from?.id) === String(ctx.teacherId) || msg.chat.type === "private";
  if (!allow) return false;

  const parsed = parseCaptionHashtag(msg.caption);
  if (!parsed) return false;

  const { classLabel, keyHuman, slug } = parsed;
  const item = extractFileItem(msg);
  if (!item) return false;

  const kvKey = `MEDIA::${classLabel}::${slug}`;
  const arr = (await ctx.env.KV_BOT.get(kvKey, "json")) || [];
  arr.push(item);
  await ctx.env.KV_BOT.put(kvKey, JSON.stringify(arr));

  await sendText(ctx.env, ctx.chat_id, `–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ (${classLabel} ‚Äî ${slugifyShort(slug)}).`);

  // –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ —á–∞—Ç—ã
  if (ctx.autopublish === "1") {
    const chats = (await ctx.env.KV_BOT.get(`CHATS_BY_CLASS:${classLabel}`, "json")) || [];
    for (const id of chats) {
      await sendMedia(ctx.env, id, item, `#${classLabel} ${keyHuman}`);
    }
  }
  return true;
}

/* =============== text router =============== */

async function handleTextRouter(ctx, msg) {
  const lower = normalize(msg.text || msg.caption || "");

  // –±–æ–ª–µ–∑–Ω—å
  const ill = /(–∑–∞–±–æ–ª(–µ–ª|–µ–ª–∞|–µ–ª–∏)|–±–æ–ª–µ(–µ—Ç|–µ–º)|—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä|–Ω–∞—Å–º–æ—Ä–∫|—Å–æ–ø–ª|–∫–∞—à(–µ|)–ª)/i.test(lower);
  if (ill) {
    await sendText(ctx.env, ctx.chat_id, `${personaPrefix(ctx)}–í—ã–∑–¥–æ—Ä–∞–≤–ª–∏–≤–∞–π—Ç–µ üôå –ü—Ä–∏–¥–∏—Ç–µ –≤ —à–∫–æ–ª—É —Å–æ —Å–ø—Ä–∞–≤–∫–æ–π –æ—Ç –≤—Ä–∞—á–∞.`);
    await notifyTeacher(ctx, msg, "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ –±–æ–ª–µ–∑–Ω–∏");
    return;
  }

  // –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ
  const abs = /(–Ω–µ\s*–±—É–¥–µ—Ç|–Ω–µ\s*–ø—Ä–∏–¥[–µ—ë]—Ç|–æ—Ç—Å—É—Ç—Å—Ç–≤|–ø—Ä–æ–ø—É—Å—Ç–∏—Ç|–ø—Ä–æ–ø—É—Å–∫)/i.test(lower);
  if (abs) {
    await sendText(ctx.env, ctx.chat_id, `${personaPrefix(ctx)}–ü—Ä–∏–Ω—è–ª–∞. –°–æ–æ–±—â–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—á–∏–Ω—É –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.`);
    await notifyTeacher(ctx, msg, "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ (–Ω–µ –±–æ–ª–µ–∑–Ω—å)");
    return;
  }

  // –æ–ø–æ–∑–¥–∞–Ω–∏–µ / ¬´–∫ 8:45¬ª / ¬´–±–µ–∂–∏–º¬ª
  if (/(–æ–ø–∞–∑–¥—ã–≤–∞|–∑–∞–¥–µ—Ä–∂–∏–º|–∑–∞–¥–µ—Ä–∂–∏–≤–∞|–±—É–¥–µ–º –ø–æ–∑–∂–µ|–±–µ–∂–∏–º)/i.test(lower) || /(?:–∫|–≤)\s*\d{1,2}[:.]\d{2}\b/.test(lower)) {
    const t = parseTime(lower);
    await sendText(ctx.env, ctx.chat_id, `${personaPrefix(ctx)}–ü–æ–Ω—è–ª–∞, –ø–æ–¥–æ–∂–¥—ë–º${t ? `, –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É—é—Å—å –Ω–∞ ${t}` : ""}.`);
    await notifyTeacher(ctx, msg, `–û–ø–æ–∑–¥–∞–Ω–∏–µ${t ? ` (–æ—Ä–∏–µ–Ω—Ç–∏—Ä ${t})` : ""}`);
    return;
  }

  // —Ä–∞–Ω–Ω–∏–π —É—Ö–æ–¥ ‚Äî ¬´–æ—Ç–ø—É—Å—Ç–∏—Ç–µ‚Ä¶¬ª, ¬´–ø–æ—Å–ª–µ 2 —É—Ä–æ–∫–∞¬ª, ¬´–≤ 10:30¬ª
  if (/(–æ—Ç–ø—É—Å—Ç–∏—Ç–µ|—É–π–¥[–µ—ë]–º —Ä–∞–Ω—å—à–µ|–∑–∞–±–µ—Ä—É.*—Ä–∞–Ω—å—à–µ|—Ä–∞–Ω—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ|–ø–æ—Å–ª–µ\s*\d+\s*—É—Ä–æ–∫|–∑–∞–±–µ—Ä—É –≤|–∑–∞–±–µ—Ä—É –≤–æ|–≤\s*\d{1,2}[:.]\d{2})/i.test(lower)) {
    const t = parseTime(lower);
    const afterLesson = parseAfterLesson(lower);
    const extra = t ? `–≤ ${t}` : afterLesson ? `–ø–æ—Å–ª–µ ${afterLesson} —É—Ä–æ–∫–∞` : "";
    await sendText(ctx.env, ctx.chat_id, `${personaPrefix(ctx)}–•–æ—Ä–æ—à–æ, –æ—Ç–ø—É—â—É${extra ? ` ${extra}` : ""}.`);
    await notifyTeacher(ctx, msg, `–ü—Ä–æ—Å—å–±–∞ –æ—Ç–ø—É—Å—Ç–∏—Ç—å —Ä–∞–Ω—å—à–µ ${extra || ""}`.trim());
    return;
  }

  // —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ / –∑–≤–æ–Ω–∫–∏ / –ø–µ—Ä–µ–º–µ–Ω—ã
  if (/(—Ä–∞—Å–ø–∏—Å–∞–Ω–∏|—É—Ä–æ–∫(–∏|–æ–≤)|–∑–≤–æ–Ω–∫|–ø–µ—Ä–µ–º–µ–Ω|–≤–æ —Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞(–µ—Ç|—é—Ç—Å—è)|–∫–æ–≥–¥–∞ –ø–µ—Ä–µ–º–µ–Ω)/i.test(lower)) {
    const ok = await sendAllByKeys(ctx,
      ["—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤", "–∑–≤–æ–Ω–∫–∏", "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤", "schedule", "bells"],
      `${mention(msg)}${personaPrefix(ctx)}–≤–æ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è ‚Äî —Å–æ–æ–±—â—É –∑–∞—Ä–∞–Ω–µ–µ.`);
    if (ok) return;
  }

  // –ø–æ–¥–≤–æ–∑ / –∞–≤—Ç–æ–±—É—Å—ã / –ø–æ—Å—ë–ª–∫–∏
  if (/(–ø–æ–¥–≤–æ–∑|–∞–≤—Ç–æ–±—É—Å|–∞–≤—Ç–æ–±—É—Å—ã|—Å –ø–æ—Å[–µ—ë]–ª–æ–∫|—Å –ø–æ—Å–µ–ª–∫|–ø–æ—Å–µ–ª–∫–æ–≤|—Ä–µ–π—Å)/i.test(lower)) {
    const ok = await sendAllByKeys(ctx,
      ["–ø–æ–¥–≤–æ–∑", "–∞–≤—Ç–æ–±—É—Å—ã", "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å–æ–≤", "–ø–æ–¥–≤–æ–∑ —Å –ø–æ—Å–µ–ª–∫–æ–≤", "–ø–æ–¥–≤–æ–∑ —Å –ø–æ—Å—ë–ª–∫–æ–≤", "buses"],
      `${personaPrefix(ctx)}–≤–æ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è ‚Äî —Å–æ–æ–±—â—É –∑–∞—Ä–∞–Ω–µ–µ.`);
    if (ok) return;
  }

  // –∫–æ–≥–¥–∞ –∑–∞–±–∏—Ä–∞—Ç—å
  if (/(–≤–æ —Å–∫–æ–ª—å–∫–æ –∑–∞–±–∏—Ä–∞|–∫–æ–≥–¥–∞ –∑–∞–±–∏—Ä–∞|–∫–æ–≥–¥–∞ —É—Ö–æ–¥|–∫–æ–≥–¥–∞ –¥–æ–º–æ–π|–∑–∞–±–æ—Ä)/i.test(lower)) {
    const ok = await sendAllByKeys(ctx, ["–∫–æ–≥–¥–∞ –∑–∞–±–∏—Ä–∞—Ç—å", "—É—Ö–æ–¥ –¥–æ–º–æ–π", "–∑–∞–±–æ—Ä"], `${personaPrefix(ctx)}–≤–æ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–±–æ—Ä–∞. –ï—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Äî –Ω–∞–ø–∏—à—É –∑–∞—Ä–∞–Ω–µ–µ.`);
    if (ok) return;
    await sendText(ctx.env, ctx.chat_id, `${personaPrefix(ctx)}–ø–æ–¥—Å–∫–∞–∂—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–±–æ—Ä–∞. –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞ ‚Äî –ø—Ä–∏—à–ª—é.`);
    return;
  }

  // –±–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã
  if (/(–±–∞–ª–∞–Ω—Å.*–∫–∞—Ä—Ç|–ø—Ä–æ–≤–µ—Ä–∏—Ç—å.*–±–∞–ª–∞–Ω—Å|—Å–∫–æ–ª—å–∫–æ.*–Ω–∞.*–∫–∞—Ä—Ç|–∫–∞—Ä—Ç–∞.*–±–∞–ª–∞–Ω—Å)/i.test(lower)) {
    const ok = await sendAllByKeys(ctx, ["–±–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã", "card_balance", "balance"], `${personaPrefix(ctx)}–≤–æ—Ç –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å —à–∫–æ–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã.`);
    if (ok) return;
  }

  // –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤: —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –°–±–µ—Ä–±–∞–Ω–∫, –∏ —Ç.–¥.)
  if (/(–∫–∞–∫.*–ø–æ–ø–æ–ª–Ω(–∏—Ç—å|—è—é)|–ø–æ–ø–æ–ª–Ω–µ–Ω–∏[–µ—è].*–∫–∞—Ä—Ç|–ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–∞—Ä—Ç—É|–æ–ø–ª–∞—Ç–∞ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç|—á–µ—Ä–µ–∑ —Å–±–µ—Ä|—Å–±–µ—Ä–±–∞–Ω–∫|topup|card_topup)/i.test(lower)) {
    const ok = await sendAllByKeys(ctx,
      ["–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã", "–æ–ø–ª–∞—Ç–∞ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º", "–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ —Å–±–µ—Ä–±–∞–Ω–∫", "topup", "card_topup", "requisites", "sberbank"],
      `${personaPrefix(ctx)}–≤–æ—Ç —Å–ø–æ—Å–æ–±—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã.`);
    if (ok) return;
  }

  // –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
  if (/(–¥–æ–º–∞—à–Ω|–¥–∑|—á—Ç–æ –∑–∞–¥–∞–ª–∏|–¥\/–∑)/i.test(lower)) {
    await sendText(ctx.env, ctx.chat_id, `${personaPrefix(ctx)}–£—Ç–æ—á–Ω—è–µ–º —É –¥–µ—Ç–µ–π. –ò–Ω–æ–≥–¥–∞ –¥—É–±–ª–∏—Ä—É—é –î–ó –≤ —á–∞—Ç –ø–æ—Å–ª–µ —É—Ä–æ–∫–æ–≤. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—Ç–µ—Ä—è–ª–æ—Å—å ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ, —É—Ç–æ—á–Ω—é.`);
    return;
  }

  // –∏–Ω–∞—á–µ ‚Äî –º–æ–ª—á–∏–º
}

/* ===== send / notify ===== */

async function sendText(env, chat_id, text) {
  await tg(env, "sendMessage", {
    chat_id, text, parse_mode: "HTML", disable_web_page_preview: true,
  });
}

async function sendMedia(env, chat_id, item, caption) {
  const base = { chat_id };
  if (caption) base.caption = caption;
  switch (item.type) {
    case "photo": await tg(env, "sendPhoto", { ...base, photo: item.file_id }); break;
    case "video": await tg(env, "sendVideo", { ...base, video: item.file_id }); break;
    case "animation": await tg(env, "sendAnimation",{ ...base, animation: item.file_id }); break;
    case "document": await tg(env, "sendDocument", { ...base, document: item.file_id }); break;
    case "voice": await tg(env, "sendVoice", { ...base, voice: item.file_id }); break;
    case "audio": await tg(env, "sendAudio", { ...base, audio: item.file_id }); break;
  }
}

async function notifyTeacher(ctx, msg, title) {
  if (!ctx.teacherId) return;
  const who = msg.from?.username ? `@${msg.from.username}` : [msg.from?.first_name, msg.from?.last_name].filter(Boolean).join(" ") || "—Ä–æ–¥–∏—Ç–µ–ª—å";
  const text =
    `üîî ${title}\n` +
    `–ö–ª–∞—Å—Å: ${ctx.classLabel}\n` +
    `–û—Ç: ${who}\n` +
    `–¢–µ–∫—Å—Ç: "${(msg.text || msg.caption || "").slice(0, 400)}"`;
  await sendText(ctx.env, ctx.teacherId, text);
}

/**
 * –°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –º–µ–¥–∏–∞ –ø–æ —Å–ø–∏—Å–∫—É –∫–ª—é—á–µ–π (—Å–∏–Ω–æ–Ω–∏–º–æ–≤) –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç.
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–∞—à–ª–æ—Å—å.
 */
async function sendAllByKeys(ctx, keys, firstCaption) {
  const classLabel = ctx.classLabel;
  let any = false;
  const used = new Set();

  for (const k of keys) {
    const slug = slugify(k);
    if (used.has(slug)) continue;
    used.add(slug);

    const arr = await ctx.env.KV_BOT.get(`MEDIA::${classLabel}::${slug}`, "json");
    if (arr && arr.length) {
      let cap = firstCaption;
      for (const item of arr) {
        await sendMedia(ctx.env, ctx.chat_id, item, cap);
        cap = undefined; // –ø–æ–¥–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–∞–π–ª—É
      }
      any = true;
    }
  }
  return any;
}

/* ============ parse utils ============ */

function parseTime(text) {
  const m = text.match(/(?:–∫|–≤)\s*(\d{1,2})[.: ]?(\d{2})\b/);
  if (!m) return null;
  const hh = String(Math.min(23, parseInt(m[1],10))).padStart(2,"0");
  const mm = String(Math.min(59, parseInt(m[2],10))).padStart(2,"0");
  return `${hh}:${mm}`;
}
function parseAfterLesson(text) {
  const m = text.match(/–ø–æ—Å–ª–µ\s*(\d{1,2})\s*—É—Ä–æ–∫/);
  if (!m) return null;
  return String(parseInt(m[1],10));
}

/* ============ Telegram HTTP ============ */

function tg(env, method, payload) {
  const url = `https://api.telegram.org/bot${env.BOT_TOKEN}/${method}`;
  return fetch(url, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify(payload),
  });
}
