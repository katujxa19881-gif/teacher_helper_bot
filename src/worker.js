// Cloudflare Worker: Telegram-–±–æ—Ç –¥–ª—è –∫–ª–∞—Å—Å–∞
// –§—É–Ω–∫—Ü–∏–∏: —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ-—Ñ–æ—Ç–æ (#5–ê), –ø—Ä–∏–≤—è–∑–∫–∞ —á–∞—Ç–æ–≤, FAQ (/ask, /faq —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏),
// —ç–∫—Å–ø–æ—Ä—Ç FAQ, –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —É—á–∏—Ç–µ–ª—é, toggle –ø–µ—Ä–µ—Å—ã–ª–∫–∏.
// –•—Ä–∞–Ω–∏–ª–∏—â–µ: Cloudflare KV (binding: KV_BOT). –ù—É–∂–Ω—ã Secrets/Vars: BOT_TOKEN, PUBLIC_URL.

const OK = (body = "ok") => new Response(body, { status: 200 });
const NO = (code = 404, body = "not found") => new Response(body, { status: code });

/* -------------------- Telegram API -------------------- */
async function tg(method, token, payload) {
  const res = await fetch(`https://api.telegram.org/bot${token}/${method}`, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify(payload),
  });
  return res.json();
}

/* -------------------- State (KV) -------------------- */
async function loadState(env) {
  const raw = await env.KV_BOT.get("state");
  if (!raw) {
    return {
      teacher_id: null,
      classes: {}, // "5–ê": { general_chat_id, parents_chat_id, schedule_file_id, schedule_caption, last_update_iso }
      faq: [],     // { q, a, kw:[], cat:"" }
      forward_unknown_to_teacher: true,
    };
  }
  return JSON.parse(raw);
}
async function saveState(env, state) { await env.KV_BOT.put("state", JSON.stringify(state)); }

function ensureClass(state, cls) {
  if (!state.classes[cls]) {
    state.classes[cls] = {
      general_chat_id: null,
      parents_chat_id: null,
      schedule_file_id: null,
      schedule_caption: null,
      last_update_iso: null,
    };
  }
}

/* -------------------- Utils -------------------- */
function normalize(s = "") {
  return s.toLowerCase().replace(/[—ë]/g, "–µ").replace(/[^a-z–∞-—è0-9\s#:+-]/g, " ").replace(/\s+/g, " ").trim();
}
function parseClassFrom(text = "") {
  const m = text.match(/#?\s*([0-9]{1,2}\s*[–ê-–ØA-Z])/i);
  return m ? m[1].toUpperCase().replace(/\s+/g, "") : null;
}
function extractLargestPhotoId(photos = []) {
  if (!photos.length) return null;
  const bySize = photos.slice().sort((a, b) => (a.file_size || 0) - (b.file_size || 0));
  return bySize.at(-1)?.file_id || photos.at(-1)?.file_id || null;
}
function scoreMatch(text, kwList) {
  const t = " " + normalize(text) + " ";
  let score = 0;
  for (const kw of kwList || []) {
    const k = " " + normalize(kw) + " ";
    if (t.includes(k)) score += Math.min(k.length, 10);
  }
  return score;
}
function bestFaqAnswer(state, question) {
  if (!state.faq?.length) return null;
  const ranked = state.faq.map(it => ({ it, s: scoreMatch(question, it.kw || []) })).sort((a, b) => b.s - a.s);
  if (!ranked[0] || ranked[0].s < 5) return null;
  return ranked[0].it;
}
function listCategories(state) {
  const s = new Set();
  for (const f of state.faq || []) if (f.cat) s.add(f.cat);
  return [...s].sort();
}

/* -------------------- Keyboards -------------------- */
function kbCategories(cats) {
  return { inline_keyboard: cats.map(c => [{ text: `üìö ${c}`, callback_data: `faq_cat::${c}` }]) };
}
function kbFaqItems(items, page = 0, perPage = 8, cat = "") {
  const start = page * perPage;
  const slice = items.slice(start, start + perPage);
  const rows = slice.map((it, i) => [{ text: `${start + i + 1}. ${it.q.slice(0, 32)}‚Ä¶`, callback_data: `faq_show::${start + i}::${cat}` }]);
  const nav = [];
  if (start > 0) nav.push({ text: "‚óÄÔ∏è", callback_data: `faq_nav::prev::${cat}::${page - 1}` });
  if (start + perPage < items.length) nav.push({ text: "‚ñ∂Ô∏è", callback_data: `faq_nav::next::${cat}::${page + 1}` });
  if (nav.length) rows.push(nav);
  return { inline_keyboard: rows };
}

/* -------------------- –ö–æ–º–∞–Ω–¥—ã -------------------- */
async function cmdStart(token, chatId) {
  const text = [
    "–ö–æ–º–∞–Ω–¥—ã:",
    "/schedule ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–¥–ª—è –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤)",
    "/ask –í–û–ü–†–û–° ‚Äî —Å–ø—Ä–æ—Å–∏—Ç—å –±–æ—Ç–∞ (FAQ + –ø–µ—Ä–µ—Å—ã–ª–∫–∞ —É—á–∏—Ç–µ–ª—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)",
    "/faq ‚Äî —Å–ø–∏—Å–æ–∫ —á–∞—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (—Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏)",
    "",
    "–ê–¥–º–∏–Ω (—É—á–∏—Ç–µ–ª—å/—Ä–æ–¥–∫–æ–º):",
    "/iam_teacher ‚Äî –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è —É—á–∏—Ç–µ–ª–µ–º (–≤ –õ–°)",
    "/link_general <–ö–õ–ê–°–°> ‚Äî –ø—Ä–∏–≤—è–∑–∞—Ç—å –≠–¢–û–¢ —á–∞—Ç –∫–∞–∫ –æ–±—â–∏–π",
    "/link_parents <–ö–õ–ê–°–°> ‚Äî –ø—Ä–∏–≤—è–∑–∞—Ç—å –≠–¢–û–¢ —á–∞—Ç –∫–∞–∫ —á–∞—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π",
    "/faq_add –í–æ–ø—Ä–æ—Å | –û—Ç–≤–µ—Ç | –∫–ª—é—á1, –∫–ª—é—á2 | –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
    "/faq_del <–Ω–æ–º–µ—Ä>",
    "/faq_list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ FAQ",
    "/faq_export ‚Äî —ç–∫—Å–ø–æ—Ä—Ç FAQ (JSON)",
    "/forward_unknown on|off ‚Äî –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —É—á–∏—Ç–µ–ª—é",
    "",
    "–£—á–∏—Ç–µ–ª—å: –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –õ–° —Å –ø–æ–¥–ø–∏—Å—å—é –≤–∏–¥–∞: #5–ê —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é",
  ].join("\n");
  await tg("sendMessage", token, { chat_id: chatId, text });
}
async function cmdIamTeacher(env, token, msg, state) {
  if (msg.chat.type !== "private") return tg("sendMessage", token, { chat_id: msg.chat.id, text: "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ." });
  state.teacher_id = msg.from.id; await saveState(env, state);
  await tg("sendMessage", token, { chat_id: msg.chat.id, text: "–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã —É—á–∏—Ç–µ–ª–µ–º ‚úÖ" });
}
async function cmdLink(token, msg, state, args, kind) {
  const cls = parseClassFrom(args);
  if (!cls) return tg("sendMessage", token, { chat_id: msg.chat.id, text: `–£–∫–∞–∂–∏—Ç–µ –∫–ª–∞—Å—Å, –ø—Ä–∏–º–µ—Ä: /${kind} 5–ê` });
  ensureClass(state, cls);
  state.classes[cls][kind === "link_general" ? "general_chat_id" : "parents_chat_id"] = msg.chat.id;
  await tg("sendMessage", token, { chat_id: msg.chat.id, text: `–ü—Ä–∏–≤—è–∑–∞–Ω–æ: ${kind === "link_general" ? "–û–ë–©–ò–ô" : "–†–û–î–ò–¢–ï–õ–ò"} —á–∞—Ç –¥–ª—è –∫–ª–∞—Å—Å–∞ ${cls} ‚úÖ` });
}
async function cmdSchedule(token, msg, state, args) {
  let cls = null;
  for (const [k, v] of Object.entries(state.classes)) {
    if (v.general_chat_id === msg.chat.id || v.parents_chat_id === msg.chat.id) { cls = k; break; }
  }
  if (!cls && msg.chat.type === "private") { const found = parseClassFrom(args); if (!found) return tg("sendMessage", token, { chat_id: msg.chat.id, text: "–£–∫–∞–∂–∏—Ç–µ –∫–ª–∞—Å—Å: /schedule 5–ê" }); cls = found; }
  if (!cls) return tg("sendMessage", token, { chat_id: msg.chat.id, text: "–≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–ª–∞—Å—Å—É. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /link_general 5–ê –∏–ª–∏ /link_parents 5–ê." });
  const rec = state.classes[cls];
  if (!rec?.schedule_file_id) return tg("sendMessage", token, { chat_id: msg.chat.id, text: `–î–ª—è ${cls} —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.` });
  await tg("sendPhoto", token, { chat_id: msg.chat.id, photo: rec.schedule_file_id, caption: rec.schedule_caption || `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ${cls}` });
}
async function cmdAsk(env, token, msg, state, args) {
  const q = args || "";
  if (!q) return tg("sendMessage", token, { chat_id: msg.chat.id, text: "–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /ask –ö–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —É—Ä–æ–∫–∏?" });
  const hit = bestFaqAnswer(state, q);
  if (hit) return tg("sendMessage", token, { chat_id: msg.chat.id, text: `–û—Ç–≤–µ—Ç:\n${hit.a}` });
  if (state.forward_unknown_to_teacher && state.teacher_id) {
    await tg("sendMessage", token, { chat_id: state.teacher_id, text: `–í–æ–ø—Ä–æ—Å –æ—Ç ${msg.from?.first_name || "—Ä–æ–¥–∏—Ç–µ–ª—è"} (${msg.chat.id}):\n${q}` });
  }
  await tg("sendMessage", token, { chat_id: msg.chat.id, text: "–ü–æ–∫–∞ –Ω–µ –Ω–∞—à—ë–ª –≥–æ—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. –Ø –ø–µ—Ä–µ–¥–∞–ª –≤–æ–ø—Ä–æ—Å —É—á–∏—Ç–µ–ª—é. –í—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç–µ üôå" });
}
async function cmdFaq(token, msg, state) {
  const faqs = state.faq || [];
  if (!faqs.length) return tg("sendMessage", token, { chat_id: msg.chat.id, text: "FAQ –ø–æ–∫–∞ –ø—É—Å—Ç. –ê–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ /faq_add" });
  const cats = listCategories(state);
  if (cats.length) return tg("sendMessage", token, { chat_id: msg.chat.id, text: "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup: kbCategories(cats) });
  await tg("sendMessage", token, { chat_id: msg.chat.id, text: "–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:", reply_markup: kbFaqItems(faqs, 0) });
}
async function cmdFaqList(token, chatId, state) {
  const faqs = state.faq || [];
  if (!faqs.length) return tg("sendMessage", token, { chat_id: chatId, text: "FAQ –ø—É—Å—Ç." });
  const out = faqs.map((x, i) => `${i + 1}. ${x.q}${x.cat ? ` [${x.cat}]` : ""}`).join("\n");
  for (let i = 0; i < out.length; i += 3500) await tg("sendMessage", token, { chat_id: chatId, text: out.slice(i, i + 3500) });
}
async function cmdFaqExport(token, chatId, state) {
  const json = JSON.stringify(state.faq || [], null, 2);
  for (let i = 0; i < json.length; i += 3500) await tg("sendMessage", token, { chat_id: chatId, text: "```json\n" + json.slice(i, i + 3500) + "\n```", parse_mode: "Markdown" });
}
async function cmdFaqAdd(env, token, msg, state, args) {
  const isTeacher = state.teacher_id && state.teacher_id === msg.from.id;
  if (!isTeacher) return tg("sendMessage", token, { chat_id: msg.chat.id, text: "–¢–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å FAQ." });
  const parts = args.split("|").map(s => s.trim());
  if (parts.length < 2) return tg("sendMessage", token, { chat_id: msg.chat.id, text: "–§–æ—Ä–º–∞—Ç: /faq_add –í–æ–ø—Ä–æ—Å | –û—Ç–≤–µ—Ç | –∫–ª—é—á1, –∫–ª—é—á2 | –∫–∞—Ç–µ–≥–æ—Ä–∏—è" });
  const [q, a] = [parts[0], parts[1]];
  const kw = (parts[2] || "").split(",").map(s => s.trim()).filter(Boolean);
  const cat = parts[3] || "";
  state.faq = state.faq || []; state.faq.push({ q, a, kw, cat }); await saveState(env, state);
  await tg("sendMessage", token, { chat_id: msg.chat.id, text: "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ FAQ ‚úÖ" });
}
async function cmdFaqDel(env, token, msg, state, args) {
  const isTeacher = state.teacher_id && state.teacher_id === msg.from.id;
  if (!isTeacher) return tg("sendMessage", token, { chat_id: msg.chat.id, text: "–¢–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å FAQ." });
  const idx = parseInt(args, 10);
  if (!state.faq || isNaN(idx) || idx < 1 || idx > state.faq.length) return tg("sendMessage", token, { chat_id: msg.chat.id, text: "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏: /faq_del 2" });
  state.faq.splice(idx - 1, 1); await saveState(env, state);
  await tg("sendMessage", token, { chat_id: msg.chat.id, text: "–£–¥–∞–ª–µ–Ω–æ ‚úÖ" });
}
async function cmdForwardUnknown(env, token, msg, state, args) {
  const isTeacher = state.teacher_id && state.teacher_id === msg.from.id;
  if (!isTeacher) return tg("sendMessage", token, { chat_id: msg.chat.id, text: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—é." });
  const v = (args || "").trim().toLowerCase();
  if (!["on", "off"].includes(v)) return tg("sendMessage", token, { chat_id: msg.chat.id, text: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /forward_unknown on|off" });
  state.forward_unknown_to_teacher = v === "on"; await saveState(env, state);
  await tg("sendMessage", token, { chat_id: msg.chat.id, text: `–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: ${v === "on" ? "–í–ö–õ" : "–í–´–ö–õ"} ‚úÖ` });
}

/* -------------------- –§–æ—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç —É—á–∏—Ç–µ–ª—è -------------------- */
async function handlePhotoFromTeacher(env, token, msg, state) {
  if (msg.chat.type !== "private") return;
  if (!state.teacher_id || state.teacher_id !== msg.from.id) {
    await tg("sendMessage", token, { chat_id: msg.chat.id, text: "–¢–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ /iam_teacher –≤ –ª–∏—á–∫–µ." });
    return;
  }
  const caption = msg.caption || "";
  const cls = parseClassFrom(caption);
  if (!cls) return tg("sendMessage", token, { chat_id: msg.chat.id, text: "–î–æ–±–∞–≤—å—Ç–µ –≤ –ø–æ–¥–ø–∏—Å—å –∫–ª–∞—Å—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: #5–ê —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é" });
  ensureClass(state, cls);
  const file_id = extractLargestPhotoId(msg.photo || []);
  state.classes[cls].schedule_file_id = file_id;
  state.classes[cls].schedule_caption = caption;
  state.classes[cls].last_update_iso = new Date().toISOString();
  await saveState(env, state);

  const rec = state.classes[cls];
  const targets = [rec.general_chat_id, rec.parents_chat_id].filter(Boolean);
  if (!targets.length) {
    await tg("sendMessage", token, { chat_id: msg.chat.id, text: `–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è ${cls}, –Ω–æ —á–∞—Ç—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã.\n–ó–∞–π–¥–∏—Ç–µ –≤ –Ω—É–∂–Ω—ã–π —á–∞—Ç –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:\n/link_general ${cls}\n/link_parents ${cls}` });
    return;
  }
  for (const chatId of targets) await tg("sendPhoto", token, { chat_id: chatId, photo: file_id, caption });
  await tg("sendMessage", token, { chat_id: msg.chat.id, text: `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è ${cls} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ ${targets.length} —á–∞—Ç(–∞/–æ–≤) ‚úÖ` });
}

/* -------------------- Callback FAQ -------------------- */
async function handleCallback(env, token, cb, state) {
  const chatId = cb.message.chat.id;
  const data = cb.data || "";
  const [kind, ...rest] = data.split("::");

  if (kind === "faq_cat") {
    const cat = rest[0] || "";
    const items = (state.faq || []).filter(x => (x.cat || "") === cat);
    if (!items.length) return tg("answerCallbackQuery", token, { callback_query_id: cb.id, text: "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –ø—É—Å—Ç–æ" });
    await tg("editMessageText", token, { chat_id: chatId, message_id: cb.message.message_id, text: `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${cat}\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:`, reply_markup: kbFaqItems(items, 0, 8, cat) });
    return;
  }
  if (kind === "faq_nav") {
    const cat = rest[1] || "";
    const page = Math.max(0, parseInt(rest[2] || "0", 10));
    const items = cat ? (state.faq || []).filter(x => (x.cat || "") === cat) : (state.faq || []);
    await tg("editMessageReplyMarkup", token, { chat_id: chatId, message_id: cb.message.message_id, reply_markup: kbFaqItems(items, page, 8, cat) });
    await tg("answerCallbackQuery", token, { callback_query_id: cb.id });
    return;
  }
  if (kind === "faq_show") {
    const idx = parseInt(rest[0] || "0", 10);
    const cat = rest[1] || "";
    const list = cat ? (state.faq || []).filter(x => (x.cat || "") === cat) : (state.faq || []);
    if (!list[idx]) return tg("answerCallbackQuery", token, { callback_query_id: cb.id, text: "–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    const item = list[idx];
    await tg("answerCallbackQuery", token, { callback_query_id: cb.id });
    await tg("sendMessage", token, { chat_id: chatId, text: `Q: ${item.q}\n‚Äî ‚Äî ‚Äî\n${item.a}` });
    return;
  }
  await tg("answerCallbackQuery", token, { callback_query_id: cb.id });
}

/* -------------------- Router -------------------- */
async function handleCommand(env, token, msg, state) {
  const chatId = msg.chat.id;
  const text = (msg.text || "").trim();
  const [cmd, ...rest] = text.split(/\s+/);
  const args = rest.join(" ").trim();

  switch (cmd) {
    case "/start": await cmdStart(token, chatId); return true;
    case "/iam_teacher": await cmdIamTeacher(env, token, msg, state); return true;
    case "/link_general": await cmdLink(token, msg, state, args, "link_general"); await saveState(env, state); return true;
    case "/link_parents": await cmdLink(token, msg, state, args, "link_parents"); await saveState(env, state); return true;
    case "/schedule": await cmdSchedule(token, msg, state, args); return true;
    case "/ask": await cmdAsk(env, token, msg, state, args); return true;
    case "/faq": await cmdFaq(token, msg, state); return true;
    case "/faq_list": await cmdFaqList(token, chatId, state); return true;
    case "/faq_export": await cmdFaqExport(token, chatId, state); return true;
    case "/faq_add": await cmdFaqAdd(env, token, msg, state, args); return true;
    case "/faq_del": await cmdFaqDel(env, token, msg, state, args); return true;
    case "/forward_unknown": await cmdForwardUnknown(env, token, msg, state, args); return true;
    default: return false;
  }
}

/* -------------------- Worker entry -------------------- */
export default {
  async fetch(request, env) {
    const url = new URL(request.url);
    const token = env.BOT_TOKEN;

    // Healthcheck
    if (url.pathname === "/") return OK("ok");

    // –†—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ Testing)
    if (url.pathname === "/init" && request.method === "POST") {
      if (!token || !env.PUBLIC_URL) return NO(400, "Need BOT_TOKEN and PUBLIC_URL");
      const res = await tg("setWebhook", token, { url: `${env.PUBLIC_URL}/webhook/${token}` });
      return new Response(JSON.stringify(res), { status: 200, headers: { "content-type": "application/json" } });
    }

    // –í–µ–±—Ö—É–∫ –æ—Ç Telegram
    if (url.pathname === `/webhook/${token}` && request.method === "POST") {
      const update = await request.json();
      const state = await loadState(env);

      if (update.message?.text) {
        const handled = await handleCommand(env, token, update.message, state);
        if (handled) return OK();
      }

      if (update.message?.photo?.length) {
        await handlePhotoFromTeacher(env, token, update.message, state);
        return OK();
      }

      if (update.callback_query) {
        await handleCallback(env, token, update.callback_query, state);
        return OK();
      }

      return OK();
    }

    return NO();
  },
};
