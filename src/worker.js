/**
 * Telegram bot on Cloudflare Workers
 * Features:
 * - /init setWebhook
 * - /ping
 * - /iam_teacher in PM to appoint teacher
 * - Save media by captions like "#1–ë –ø–æ–¥–≤–æ–∑", "#1–ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤", "#1–ë –±–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã", "#1–ë –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã"
 *   Stores multiple files per key.
 * - Keyword router (RU) ‚Üí sends stored media + teacher-style text
 * - Illness vs generic absence; forwards absence notice to teacher's PM
 * - If no match ‚Üí NO REPLY (returns 200 with empty body)
 *
 * KV keys:
 *   TEACHER_ID                              -> string user id
 *   PERSONA_NAME                            -> string (default "–ò—Ä–∏–Ω–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞")
 *   CLASS_BY_CHAT:<chat_id>                 -> string class label, e.g., "1–ë"
 *   MEDIA::<class>::<slug>                  -> JSON [{type,file_id,caption?}, ...]
 *
 * Bindings required:
 *   env.BOT_TOKEN (secret)
 *   env.PUBLIC_URL (plain)
 *   env.KV_BOT (KV namespace)
 */

export default {
  async fetch(request, env, ctx) {
    try {
      const url = new URL(request.url);

      if (url.pathname === "/") {
        return json({ ok: true, result: "teacher-helper alive" });
      }

      if (url.pathname === "/init") {
        // set webhook
        const ok = await setWebhook(env);
        return json({ ok });
      }

      // Telegram webhook endpoint: /webhook/<token>
      if (url.pathname.startsWith("/webhook/")) {
        const tokenInPath = url.pathname.split("/webhook/")[1];
        if (!tokenInPath || !env.BOT_TOKEN || !tokenInPath.startsWith(env.BOT_TOKEN.slice(0, 10))) {
          // –Ω–µ —Å–≤–µ—Ç–∏–º —Ç–æ–∫–µ–Ω, –ø—Ä–æ—Å—Ç–æ 200
          return json({ ok: true });
        }

        if (request.method !== "POST") return json({ ok: true });

        const update = await request.json().catch(() => ({}));
        // –í –ª–æ–≥–∞—Ö –æ—Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ —Ç–∏–ø
        console.log("UPDATE kind=", kindOf(update));

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
        const msg = update.message || update.edited_message;
        if (!msg) return OK();

        const ctxObj = await makeCtx(env, msg);

        // Commands
        if (msg.text?.startsWith("/")) {
          const handled = await handleCommand(env, ctxObj, msg.text.trim());
          return handled ? OK() : OK();
        }

        // Saving media by caption "#–ö–õ–ê–°–° –∫–ª—é—á"
        if (hasMedia(msg) && msg.caption) {
          const saved = await trySaveMediaByCaption(env, ctxObj, msg);
          if (saved) return OK();
        }

        // Natural language router (only in groups/supergroups/chats; and PM if user writes)
        const reacted = await handleNL(env, ctxObj, msg);
        // If nothing matched ‚Äî NO reply
        return OK();
      }

      return new Response("Not found", { status: 404 });
    } catch (e) {
      console.error(e);
      return new Response("ERR", { status: 200 });
    }
  },
};

/* ----------------- helpers ----------------- */

function json(obj) {
  return new Response(JSON.stringify(obj), { headers: { "content-type": "application/json; charset=utf-8" } });
}
function OK() { return new Response("", { status: 200 }); }

async function setWebhook(env) {
  const url = `${env.PUBLIC_URL.replace(/\/+$/,'')}/webhook/${env.BOT_TOKEN}`;
  const res = await tg(env, "setWebhook", { url });
  console.log("setWebhook", await res.text());
  return true;
}

function kindOf(u) {
  if (u.message) return "message";
  if (u.edited_message) return "edited_message";
  if (u.my_chat_member) return "my_chat_member";
  return "other";
}

function hasMedia(m) {
  return Boolean(m.photo?.length || m.video || m.animation || m.document || m.voice || m.audio);
}

async function makeCtx(env, msg) {
  const chat_id = msg.chat.id;
  const from_id = msg.from?.id;
  const username = msg.from?.username ? `@${msg.from.username}` : null;
  const isGroup = msg.chat.type === "group" || msg.chat.type === "supergroup";
  // class label bound to chat
  let classLabel = await env.KV_BOT.get(`CLASS_BY_CHAT:${chat_id}`);
  const teacherId = await env.KV_BOT.get("TEACHER_ID");
  const persona = (await env.KV_BOT.get("PERSONA_NAME")) || "–ò—Ä–∏–Ω–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞";

  return { env, chat_id, from_id, username, isGroup, classLabel, teacherId, persona };
}

/* ---------- Commands ---------- */

async function handleCommand(env, ctx, text) {
  const cmd = text.split(/\s+/)[0];
  const args = text.slice(cmd.length).trim();

  if (cmd === "/ping") {
    await replyTeacher(ctx, "pong ‚úÖ");
    return true;
  }

  if (cmd === "/iam_teacher") {
    // –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—á–∏—Ç–µ–ª–µ–º ‚Äî –¢–û–õ–¨–ö–û –≤ –õ–°
    if (ctx.isGroup) {
      await replyTeacher(ctx, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ ‚Äî —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.");
      return true;
    }
    await env.KV_BOT.put("TEACHER_ID", String(ctx.from_id));
    await replyTeacher(ctx, "–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã —É—á–∏—Ç–µ–ª–µ–º ‚úÖ");
    return true;
  }

  // –ê–¥–º–∏–Ω (—É—á–∏—Ç–µ–ª—å) –º–æ–∂–µ—Ç –ø—Ä–∏–≤—è–∑—ã–≤–∞—Ç—å –∫–ª–∞—Å—Å –∫ —Ç–µ–∫—É—â–µ–º—É —á–∞—Ç—É:
  if (cmd === "/link_general") {
    if (String(ctx.from_id) !== String(ctx.teacherId)) return true;
    if (!ctx.isGroup) { await replyTeacher(ctx, "–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ."); return true; }
    if (!args) { await replyTeacher(ctx, "–£–∫–∞–∂–∏—Ç–µ –∫–ª–∞—Å—Å, –ø—Ä–∏–º–µ—Ä: /link_general 1–ë"); return true; }
    await env.KV_BOT.put(`CLASS_BY_CHAT:${ctx.chat_id}`, args);
    await sendText(ctx.chat_id, `${ctx.persona}: –ü—Ä–∏–≤—è–∑–∞–Ω–æ: –û–ë–©–ò–ô —á–∞—Ç –¥–ª—è –∫–ª–∞—Å—Å–∞ ${escape(args)} ‚úÖ`, ctx.env);
    return true;
  }

  // /persona_set –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ
  if (cmd === "/persona_set") {
    if (String(ctx.from_id) !== String(ctx.teacherId)) return true;
    if (!args) { await replyTeacher(ctx, "–£–∫–∞–∂–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å, –Ω–∞–ø—Ä–∏–º–µ—Ä: /persona_set –ò—Ä–∏–Ω–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞"); return true; }
    await env.KV_BOT.put("PERSONA_NAME", args);
    await replyTeacher(ctx, `–ü–æ–¥–ø–∏—Å—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${args}`);
    return true;
  }

  return false;
}

/* ---------- Media save by caption "#–ö–õ–ê–°–° –∫–ª—é—á" ---------- */

async function trySaveMediaByCaption(env, ctx, msg) {
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å - —É—á–∏—Ç–µ–ª—å (–≤ –ª—é–±–æ–º —á–∞—Ç–µ) –ò–õ–ò –ª—é–±–∞—è –õ–° –±–æ—Ç—É (—á—Ç–æ–±—ã —Ç–µ–±–µ –±—ã–ª–æ —É–¥–æ–±–Ω–æ)
  const allow =
    String(ctx.from_id) === String(ctx.teacherId) ||
    (msg.chat.type === "private");

  if (!allow) return false;

  const m = msg.caption.match(/#\s*([0-9–ê-–ØA-Z–∞-—è—ë–Å]+)\s+(.+)/i);
  if (!m) return false;

  const classLabel = m[1].trim();
  const keyHuman = m[2].trim();
  const slug = slugify(keyHuman);

  const files = await env.KV_BOT.get(`MEDIA::${classLabel}::${slug}`, "json") || [];

  // extract file_id/type
  const item = extractFileItem(msg);
  if (!item) return false;

  files.push(item);
  await env.KV_BOT.put(`MEDIA::${classLabel}::${slug}`, JSON.stringify(files));

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
  await sendText(ctx.chat_id, `–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ (${classLabel} ‚Äî ${slug}).`, env);
  // –ü–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å –∫–ª–∞—Å—Å (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ö–µ—à—Ç–µ–≥ —Å –∫–ª–∞—Å—Å–æ–º)
  if (!/#\s*[0-9–ê-–ØA-Z–∞-—è—ë–Å]+\s*/.test(keyHuman)) {
    await sendText(ctx.chat_id, `–î–æ–±–∞–≤—å—Ç–µ –≤ –ø–æ–¥–ø–∏—Å—å –∫–ª–∞—Å—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: #${classLabel} ‚Ä¶`, env);
  }
  return true;
}

function extractFileItem(msg) {
  if (msg.photo?.length) {
    const fid = msg.photo.sort((a, b) => (a.file_size || 0) - (b.file_size || 0)).pop().file_id;
    return { type: "photo", file_id: fid };
  }
  if (msg.video) return { type: "video", file_id: msg.video.file_id };
  if (msg.animation) return { type: "animation", file_id: msg.animation.file_id };
  if (msg.document) return { type: "document", file_id: msg.document.file_id };
  if (msg.voice) return { type: "voice", file_id: msg.voice.file_id };
  if (msg.audio) return { type: "audio", file_id: msg.audio.file_id };
  return null;
}

function slugify(s) {
  const map = { "—ë": "–µ" };
  return s
    .toLowerCase()
    .replace(/[–Å—ë]/g, (ch) => map[ch])
    .replace(/[^a-z0-9–∞-—è\s_-]/g, "")
    .replace(/\s+/g, "_")
    .replace(/_+/g, "_")
    .trim();
}

/* ---------- NLU / keyword router ---------- */

async function handleNL(env, ctx, msg) {
  const text = (msg.text || msg.caption || "").trim();
  if (!text) return false;

  // refresh class for this chat (fallback: if teacher writes in PM and gave a class in text like "#1–ë ..." ‚Äî –º—ã –Ω–µ —Ç—Ä–æ–≥–∞–µ–º)
  if (!ctx.classLabel && ctx.isGroup) {
    ctx.classLabel = await env.KV_BOT.get(`CLASS_BY_CHAT:${ctx.chat_id}`);
  }

  const lower = normalize(text);

  // 1) Illness vs absence
  const illness = /(–∑–∞–±–æ–ª(–µ–ª|–µ–ª–∞|–µ–ª–∏)|–±–æ–ª–µ(–µ—Ç|–µ–º)|—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä|–Ω–∞—Å–º–æ—Ä–∫|—Å–æ–ø–ª|–∫–∞—à–ª—è?)/i.test(lower);
  const absence = /(–Ω–µ\s*–±—É–¥–µ—Ç|–Ω–µ\s*–ø—Ä–∏–¥[–µ—ë]—Ç|–æ—Ç—Å—É—Ç—Å—Ç–≤|–ø—Ä–æ–ø—É—Å—Ç–∏—Ç|–ø—Ä–æ–ø—É—Å–∫)/i.test(lower);

  if (illness) {
    await say(ctx, `${ctx.persona}: –í—ã–∑–¥–æ—Ä–∞–≤–ª–∏–≤–∞–π—Ç–µ üôå –ü—Ä–∏–¥–∏—Ç–µ –≤ —à–∫–æ–ª—É —Å–æ —Å–ø—Ä–∞–≤–∫–æ–π –æ—Ç –≤—Ä–∞—á–∞.`, env);
    await notifyTeacher(env, ctx, msg, "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ –±–æ–ª–µ–∑–Ω–∏");
    return true;
  }
  if (absence) {
    await say(ctx, `${ctx.persona}: –ü—Ä–∏–Ω—è–ª–∞. –°–æ–æ–±—â–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—á–∏–Ω—É –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.`, env);
    await notifyTeacher(env, ctx, msg, "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ (–Ω–µ –±–æ–ª–µ–∑–Ω—å)");
    return true;
  }

  // 2) SCHEDULE (—É—Ä–æ–∫–∏/–∑–≤–æ–Ω–∫–∏/–ø–µ—Ä–µ–º–µ–Ω—ã)
  if (/(—Ä–∞—Å–ø–∏—Å–∞–Ω–∏|—É—Ä–æ–∫(–∏|–æ–≤)|–∑–∞–≤—Ç—Ä–∞ —É—Ä–æ–∫–∏|–∑–≤–æ–Ω–∫|–ø–µ—Ä–µ–º–µ–Ω|–≤–æ —Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞(–µ—Ç|—é—Ç—Å—è)|–∫–æ–≥–¥–∞ –æ–∫–æ–Ω—á–∞–Ω|–∫–æ–≥–¥–∞ –ø–µ—Ä–µ–º–µ–Ω)/i.test(lower)) {
    const keysTry = ["—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤", "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–∑–≤–æ–Ω–∫–∏", "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤"];
    const sent = await sendMediaByKeys(env, ctx, keysTry, `@${msg.from?.username || ""} ${ctx.persona}: –≤–æ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è ‚Äî —Å–æ–æ–±—â—É –∑–∞—Ä–∞–Ω–µ–µ.`.replace("@ ", "@"));
    if (sent) return true;
    return false;
  }

  // 3) BUSES / –ü–û–î–í–û–ó
  if (/(–ø–æ–¥–≤–æ–∑|–∞–≤—Ç–æ–±—É—Å|–∞–≤—Ç–æ–±—É—Å—ã|—Å –ø–æ—Å[–µ—ë]–ª–∫|—Ä–µ–π—Å)/i.test(lower)) {
    const keysTry = ["–ø–æ–¥–≤–æ–∑", "–∞–≤—Ç–æ–±—É—Å—ã", "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å–æ–≤"];
    const sent = await sendMediaByKeys(env, ctx, keysTry, `${ctx.persona}: –≤–æ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è ‚Äî —Å–æ–æ–±—â—É –∑–∞—Ä–∞–Ω–µ–µ.`);
    if (sent) return true;
    return false;
  }

  // 4) PICKUP (–∫–æ–≥–¥–∞ –∑–∞–±–∏—Ä–∞—Ç—å)
  if (/(–≤–æ —Å–∫–æ–ª—å–∫–æ –∑–∞–±–∏—Ä–∞|–∫–æ–≥–¥–∞ –∑–∞–±–∏—Ä–∞|–∫–æ–≥–¥–∞ —É—Ö–æ–¥|–∫–æ–≥–¥–∞ –¥–æ–º–æ–π|–∫–æ–≥–¥–∞ –∑–∞–±–æ—Ä)/i.test(lower)) {
    // –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–≥–æ—Ç–æ–≤–∫–∞ ¬´–∫–æ–≥–¥–∞ –∑–∞–±–∏—Ä–∞—Ç—å¬ª ‚Äî –ø—Ä–∏—à–ª—ë–º –∫–∞—Ä—Ç–∏–Ω–∫—É; –∏–Ω–∞—á–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç
    const sent = await sendMediaByKeys(env, ctx, ["–∫–æ–≥–¥–∞ –∑–∞–±–∏—Ä–∞—Ç—å", "–∑–∞–±–æ—Ä", "—É—Ö–æ–¥ –¥–æ–º–æ–π"], `${ctx.persona}: –≤–æ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–±–æ—Ä–∞. –ï—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Äî –Ω–∞–ø–∏—à—É –∑–∞—Ä–∞–Ω–µ–µ.`);
    if (sent) return true;
    await say(ctx, `${ctx.persona}: –ø–æ–¥—Å–∫–∞–∂—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–±–æ—Ä–∞. –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞ ‚Äî –ø—Ä–∏—à–ª—é.`, env);
    return true;
  }

  // 5) CARD balance / topup
  if (/(–±–∞–ª–∞–Ω—Å.*–∫–∞—Ä—Ç|–ø—Ä–æ–≤–µ—Ä–∏—Ç—å.*–±–∞–ª–∞–Ω—Å|—Å–∫–æ–ª—å–∫–æ.*–Ω–∞.*–∫–∞—Ä—Ç|–∫–∞—Ä—Ç–∞.*–±–∞–ª–∞–Ω—Å)/i.test(lower)) {
    const sent = await sendMediaByKeys(env, ctx, ["–±–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã", "card_balance"], `${ctx.persona}: –≤–æ—Ç –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å —à–∫–æ–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã.`);
    return !!sent;
  }
  if (/(–∫–∞–∫.*–ø–æ–ø–æ–ª–Ω(–∏—Ç—å|—è—é)|–ø–æ–ø–æ–ª–Ω–µ–Ω–∏[–µ—è].*–∫–∞—Ä—Ç|–ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–∞—Ä—Ç—É|–æ–ø–ª–∞—Ç–∞ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç|—á–µ—Ä–µ–∑ —Å–±–µ—Ä)/i.test(lower)) {
    const sent = await sendMediaByKeys(env, ctx, ["–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã", "card_topup"], `${ctx.persona}: –≤–æ—Ç —Å–ø–æ—Å–æ–±—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã.`);
    return !!sent;
  }

  // 6) –î–æ–º–∞—à–∫–∞ / ¬´—á—Ç–æ –∑–∞–¥–∞–ª–∏¬ª
  if (/(–¥–æ–º–∞—à–Ω|–¥–∑|—á—Ç–æ –∑–∞–¥–∞–ª–∏|–¥\/–∑)/i.test(lower)) {
    await say(ctx, `${ctx.persona}: —É—Ç–æ—á–Ω—è–µ–º —É –¥–µ—Ç–µ–π. –ò–Ω–æ–≥–¥–∞ –¥—É–±–ª–∏—Ä—É—é –î–ó –≤ —á–∞—Ç –ø–æ—Å–ª–µ —É—Ä–æ–∫–æ–≤. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—Ç–µ—Ä—è–ª–æ—Å—å ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ, —É—Ç–æ—á–Ω—é.`, env);
    return true;
  }

  // –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ ‚Üí –º–æ–ª—á–∏–º
  return false;
}

function normalize(t) {
  return t.toLowerCase().replace(/[—ë]/g, "–µ").trim();
}

/* ---------- Sending helpers ---------- */

async function say(ctx, text, env) {
  return sendText(ctx.chat_id, text, env);
}

async function replyTeacher(ctx, text) {
  return sendText(ctx.chat_id, text, ctx.env);
}

async function notifyTeacher(env, ctx, msg, title) {
  if (!ctx.teacherId) return;
  const who = ctx.username ? `(${ctx.username})` : "";
  const chatRef = ctx.classLabel ? `–ö–ª–∞—Å—Å: ${ctx.classLabel}` : `–ß–∞—Ç: ${ctx.chat_id}`;
  const txt =
    `üîî ${title}\n` +
    `${chatRef}\n` +
    `–°–æ–æ–±—â–µ–Ω–∏–µ: "${(msg.text || msg.caption || "").slice(0, 400)}" ${who}`;
  await sendText(ctx.teacherId, txt, env);
}

async function sendText(chat_id, text, env) {
  await tg(env, "sendMessage", {
    chat_id,
    text,
    parse_mode: "HTML",
    disable_web_page_preview: true,
  });
}

async function sendMediaByKeys(env, ctx, keysTry, fallbackText) {
  if (!ctx.classLabel) return false;
  for (const key of keysTry) {
    const slug = slugify(key);
    const arr = await env.KV_BOT.get(`MEDIA::${ctx.classLabel}::${slug}`, "json");
    if (arr && arr.length) {
      // –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –ø–æ –æ–¥–Ω–æ–º—É (mediaGroup –¥–ª—è photo+video —Ç–æ–∂–µ –æ–∫, –Ω–æ —É Telegram –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è; –¥–µ–ª–∞–µ–º –Ω–∞–¥—ë–∂–Ω–æ)
      for (const item of arr) {
        await sendSingleMedia(env, ctx.chat_id, item, fallbackText);
        // —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–≤–æ–º
        fallbackText = undefined;
      }
      return true;
    }
  }
  return false;
}

async function sendSingleMedia(env, chat_id, item, caption) {
  const base = { chat_id };
  if (caption) base.caption = caption;
  switch (item.type) {
    case "photo":
      await tg(env, "sendPhoto", { ...base, photo: item.file_id });
      break;
    case "video":
      await tg(env, "sendVideo", { ...base, video: item.file_id });
      break;
    case "animation":
      await tg(env, "sendAnimation", { ...base, animation: item.file_id });
      break;
    case "document":
      await tg(env, "sendDocument", { ...base, document: item.file_id });
      break;
    case "voice":
      await tg(env, "sendVoice", { ...base, voice: item.file_id });
      break;
    case "audio":
      await tg(env, "sendAudio", { ...base, audio: item.file_id });
      break;
    default:
      break;
  }
}

/* ---------- Telegram call ---------- */

function tg(env, method, payload) {
  const url = `https://api.telegram.org/bot${env.BOT_TOKEN}/${method}`;
  return fetch(url, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify(payload),
  });
}
